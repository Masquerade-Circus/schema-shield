//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","constructor","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","schema","valid","error","array","string","number","integer","Number","isInteger","boolean","null","keywords","required","hasOwnProperty","properties","schemaShieldInstance","finalData","prop","schemaProp","default","validatorResult","validate","maxProperties","minProperties","additionalProperties","isCompiledSchema","patternProperties","match","pattern","patterns","propertyNames","$ref","definitions","$id","$schema","title","$comment","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Set","item","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","has","add","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","join","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","areMultiples","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","validationResult","oneOf","validCount","dependencies","dependency","const","contains","if","then","thenResult","else","elseResult","not","types","Map","type","addType","keyword","addKeyword","addFormat","validator","set","compile","compiledSchema","compileSchema","map","t","trim","filter","keywordValidator","validators","push","isSchemaLike","subSchema","index","typeValid","result","isSchemaOrKeywordPresent","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","export class ValidationError extends Error {\n  name: string;\n  pointer: string;\n  message: string;\n  value: any;\n  code: string;\n\n  constructor(message: string, pointer?: string) {\n    super(message);\n    this.pointer = pointer;\n  }\n}\n\nexport const defaultValidator = (schema, data, pointer) => {\n  return [new ValidationError('No validator for this schema', pointer)];\n};\n\nexport function deepEqual(obj: Array<any> | Record<string, any>, other: Array<any> | Record<string, any>) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === 'object' && typeof other === 'object') {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === 'object' && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  if (isObject(obj)) {\n    const result = {};\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { isObject, ValidationError } from './utils';\nimport { ValidatorFunction } from './index';\n\nexport const Types: Record<string, ValidatorFunction> = {\n  object(schema, data, pointer) {\n    if (isObject(data)) {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not an object', pointer),\n      data,\n    };\n  },\n  array(schema, data, pointer) {\n    if (Array.isArray(data)) {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    if (typeof data === 'object' && data !== null && 'length' in data) {\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\n      const keys = Object.keys(data);\n      if (keys.length > 0 && (keys[0] !== '0' || keys.length !== data.length)) {\n        return {\n          valid: false,\n          error: new ValidationError('Data is not an array', pointer),\n          data,\n        };\n      }\n\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not an array', pointer),\n      data,\n    };\n  },\n  string(schema, data, pointer) {\n    if (typeof data === 'string') {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not a string', pointer),\n      data,\n    };\n  },\n  number(schema, data, pointer) {\n    if (typeof data === 'number') {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not a number', pointer),\n      data,\n    };\n  },\n  integer(schema, data, pointer) {\n    if (typeof data === 'number' && Number.isInteger(data)) {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not an integer', pointer),\n      data,\n    };\n  },\n  boolean(schema, data, pointer) {\n    // Check if data is a boolean like value\n    if (typeof data === 'boolean') {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not a boolean', pointer),\n      data,\n    };\n  },\n  null(schema, data, pointer) {\n    if (data === null) {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Data is not null', pointer),\n      data,\n    };\n  },\n};\n","import { ArrayKeywords } from './keywords/array-keywords';\nimport { NumberKeywords } from './keywords/number-keywords';\nimport { ObjectKeywords } from './keywords/object-keywords';\nimport { OtherKeywords } from './keywords/other-keywords';\nimport { StringKeywords } from './keywords/string-keywords';\nimport { ValidatorFunction } from './index';\n\nexport const keywords: Record<string, ValidatorFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords,\n};\n","import { CompiledSchema, ValidatorFunction } from '../index';\nimport { ValidationError, isObject } from '../utils';\n\nexport const ObjectKeywords: Record<string, ValidatorFunction | false> = {\n  // Object\n  required(schema, data, pointer) {\n    if (!isObject(data)) {\n      return {\n        valid: true,\n        error: null,\n        data,\n      };\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return {\n          valid: false,\n          error: new ValidationError('Property is required', `${pointer}/${key}`),\n          data,\n        };\n      }\n    }\n\n    return { valid: true, error: null, data };\n  },\n\n  properties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    let finalData = { ...data };\n    const keys = Object.keys(schema.properties);\n    for (const key of keys) {\n      const prop = data[key];\n      if (typeof prop === 'undefined') {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && 'default' in schemaProp) {\n          finalData[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === 'boolean') {\n        if (schema.properties[key] === false) {\n          return {\n            valid: false,\n            error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\n            data,\n          };\n        }\n        continue;\n      }\n\n      const validatorResult = schemaShieldInstance.validate(schema.properties[key], prop);\n\n      finalData[key] = validatorResult.data;\n\n      if (!validatorResult.valid) {\n        return { valid: false, error: validatorResult.error, data: finalData };\n      }\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  maxProperties(schema, data, pointer) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Object has too many properties', pointer),\n      data,\n    };\n  },\n\n  minProperties(schema, data, pointer) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Object has too few properties', pointer),\n      data,\n    };\n  },\n\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    let finalData = { ...data };\n    const keys = Object.keys(data);\n    const isCompiledSchema = schemaShieldInstance.isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, 'u').test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return {\n          valid: false,\n          error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\n          data,\n        };\n        continue;\n      }\n\n      if (isCompiledSchema) {\n        const validatorResult = schemaShieldInstance.validate(schema.additionalProperties, finalData[key]);\n\n        finalData[key] = validatorResult.data;\n\n        if (!validatorResult.valid) {\n          return { valid: false, error: validatorResult.error, data: finalData };\n        }\n      }\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    let finalData = { ...data };\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, 'u');\n\n      if (typeof schema.patternProperties[pattern] === 'boolean') {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in finalData) {\n            if (regex.test(key)) {\n              return {\n                valid: false,\n                error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\n                data: finalData,\n              };\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(finalData);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          const validatorResult = schemaShieldInstance.validate(schema.patternProperties[pattern], finalData[key]);\n\n          finalData[key] = validatorResult.data;\n\n          if (!validatorResult.valid) {\n            return { valid: false, error: validatorResult.error, data: finalData };\n          }\n        }\n      }\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  propertyNames(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    if (typeof schema.propertyNames === 'boolean') {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return {\n          valid: false,\n          error: new ValidationError('Property names are not allowed', pointer),\n          data,\n        };\n      }\n    }\n\n    let finalData = { ...data };\n\n    if (schemaShieldInstance.isCompiledSchema(schema.propertyNames)) {\n      for (let key in finalData) {\n        const validatorResult = schemaShieldInstance.validate(schema.propertyNames, key);\n\n        if (!validatorResult.valid) {\n          return { valid: false, error: validatorResult.error, data: finalData };\n        }\n      }\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  default: false,\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n  title: false,\n  $comment: false,\n};\n","import { CompiledSchema, ValidatorFunction } from '../index';\nimport { ValidationError, isObject } from '../utils';\n\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\n  items(schema, data, pointer, schemaShieldInstance) {\n    if (!Array.isArray(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === 'boolean') {\n      if (schemaItems === false && dataLength > 0) {\n        return {\n          valid: false,\n          error: new ValidationError('Array is not allowed', pointer),\n          data,\n        };\n      }\n\n      return { valid: true, error: null, data };\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const finalData = [...data];\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        if (typeof schemaItems[i] === 'boolean') {\n          if (schemaItems[i] === false && typeof finalData[i] !== 'undefined') {\n            return {\n              valid: false,\n              error: new ValidationError('Array item is not allowed', `${pointer}/${i}`),\n              data: finalData,\n            };\n          }\n          continue;\n        }\n\n        const validatorResult = schemaShieldInstance.validate(schemaItems[i], finalData[i]);\n\n        finalData[i] = validatorResult.data;\n\n        if (!validatorResult.valid) {\n          return { valid: false, error: validatorResult.error, data: finalData };\n        }\n      }\n\n      return { valid: true, error: null, data: finalData };\n    }\n\n    if (schemaShieldInstance.isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const validatorErrors = schemaShieldInstance.validate(schemaItems, data[i]);\n\n        data[i] = validatorErrors.data;\n\n        if (!validatorErrors.valid) {\n          return { valid: false, error: validatorErrors.error, data };\n        }\n      }\n    }\n\n    return { valid: true, error: null, data };\n  },\n\n  minItems(schema, data, pointer) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Array is too short', pointer),\n      data,\n    };\n  },\n\n  maxItems(schema, data, pointer) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('Array is too long', pointer),\n      data,\n    };\n  },\n\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return { valid: true, error: null, data };\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return {\n          valid: false,\n          error: new ValidationError('Array has too many items', pointer),\n          data,\n        };\n      }\n\n      return { valid: true, error: null, data };\n    }\n\n    if (schemaShieldInstance.isCompiledSchema(schema.additionalItems)) {\n      const finalData = [...data];\n      for (let i = schema.items.length; i < finalData.length; i++) {\n        const validatorResult = schemaShieldInstance.validate(schema.additionalItems, finalData[i]);\n        if (!validatorResult.valid) {\n          return { valid: false, error: validatorResult.error, data: finalData };\n        }\n        finalData[i] = validatorResult.data;\n      }\n      return { valid: true, error: null, data: finalData };\n    }\n\n    return { valid: true, error: null, data };\n  },\n\n  uniqueItems(schema, data, pointer) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return { valid: true, error: null, data };\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === 'string') {\n        itemStr = `s:${item}`;\n\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(Object.fromEntries(Object.entries(item).sort(([a], [b]) => a.localeCompare(b))))}`;\n      } else {\n        itemStr = JSON.stringify(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return {\n          valid: false,\n          error: new ValidationError('Array items are not unique', pointer),\n          data,\n        };\n      } else {\n        unique.add(itemStr);\n      }\n    }\n\n    return { valid: true, error: null, data };\n  },\n};\n","import { ValidationError, deepEqual } from '../utils';\n\nimport { ValidatorFunction } from '../index';\n\nexport const StringKeywords: Record<string, ValidatorFunction> = {\n  minLength(schema, data, pointer) {\n    if (typeof data !== 'string' || data.length >= schema.minLength) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('String is too short', pointer),\n      data,\n    };\n  },\n\n  maxLength(schema, data, pointer) {\n    if (typeof data !== 'string' || data.length <= schema.maxLength) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError('String is too long', pointer),\n      data,\n    };\n  },\n\n  pattern(schema, data, pointer) {\n    if (typeof data !== 'string') {\n      return { valid: true, error: null, data };\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, 'u');\n\n    if (patternRegexp instanceof RegExp === false) {\n      return {\n        valid: false,\n        error: new ValidationError('Pattern is not a valid regular expression', pointer),\n        data,\n      };\n    }\n\n    const valid = patternRegexp.test(data);\n\n    return {\n      valid,\n      error: valid ? null : new ValidationError('String does not match pattern', pointer),\n      data,\n    };\n  },\n\n  format(schema, data, pointer, formatInstance) {\n    if (typeof data !== 'string') {\n      return { valid: true, error: null, data };\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return { valid: true, error: null, data };\n    }\n\n    if (typeof formatValidate === 'function') {\n      const valid = formatValidate(data);\n\n      return {\n        valid,\n        error: valid ? null : new ValidationError(`String does not match format ${schema.format}`, pointer),\n        data,\n      };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Unknown format ${schema.format}`, pointer),\n      data,\n    };\n  },\n\n  enum(schema, data, pointer) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === 'object' && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return { valid: true, error: null, data };\n      }\n\n      // If data is an array or an object, check for deep equality\n      if ((isArray && Array.isArray(enumItem)) || (isObject && typeof enumItem === 'object' && enumItem !== null)) {\n        if (deepEqual(enumItem, data)) {\n          return { valid: true, error: null, data };\n        }\n      }\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Value must be one of ${schema.enum.join(', ')}`, pointer),\n      data,\n    };\n  },\n};\n","import { areCloseEnough, ValidationError } from '../utils';\nimport { ValidatorFunction } from '../index';\n\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\n  minimum(schema, data, pointer, schemaShieldInstance) {\n    if (typeof data !== 'number') {\n      return { valid: true, error: null, data };\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === 'number') {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    const valid = data >= min;\n\n    return {\n      valid,\n      error: valid ? null : new ValidationError('Number is too small', pointer),\n      data,\n    };\n  },\n\n  maximum(schema, data, pointer, schemaShieldInstance) {\n    if (typeof data !== 'number') {\n      return { valid: true, error: null, data };\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === 'number') {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    const valid = data <= max;\n\n    return {\n      valid,\n      error: valid ? null : new ValidationError('Number is too big', pointer),\n      data,\n    };\n  },\n\n  multipleOf(schema, data, pointer) {\n    if (typeof data !== 'number') {\n      return { valid: true, error: null, data };\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    // Detect overflow handling in JS\n    if (!isFinite(quotient)) {\n      return { valid: true, error: null, data };\n    }\n\n    const areMultiples = areCloseEnough(quotient, Math.round(quotient));\n\n    return {\n      valid: areMultiples,\n      error: areMultiples ? null : new ValidationError('Number is not a multiple of', pointer),\n      data,\n    };\n  },\n\n  exclusiveMinimum(schema, data, pointer) {\n    if (typeof data !== 'number' || typeof schema.exclusiveMinimum !== 'number' || 'minimum' in schema) {\n      return { valid: true, error: null, data };\n    }\n\n    const valid = data > schema.exclusiveMinimum + 1e-15;\n\n    return {\n      valid,\n      error: valid ? null : new ValidationError('Number is too small', pointer),\n      data,\n    };\n  },\n\n  exclusiveMaximum(schema, data, pointer) {\n    if (typeof data !== 'number' || typeof schema.exclusiveMaximum !== 'number' || 'maximum' in schema) {\n      return { valid: true, error: null, data };\n    }\n\n    const valid = data < schema.exclusiveMaximum - 1e-15;\n\n    return {\n      valid,\n      error: valid ? null : new ValidationError('Number is too big', pointer),\n      data,\n    };\n  },\n};\n","import { CompiledSchema, ValidatorFunction } from '../index';\nimport { ValidationError, isObject, deepEqual } from '../utils';\n\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\n  nullable(schema, data, pointer) {\n    if (schema.nullable && data !== null) {\n      return {\n        valid: false,\n        error: new ValidationError('Value must be null to be empty', pointer),\n        data,\n      };\n    }\n\n    return { valid: true, error: null, data };\n  },\n\n  allOf(schema, data, pointer, schemaShieldInstance) {\n    let finalData = data;\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        const validatorResult = schemaShieldInstance.validate(schema.allOf[i], finalData);\n\n        if (!validatorResult.valid) {\n          return { valid: false, error: validatorResult.error, data: finalData };\n        }\n\n        finalData = validatorResult.data;\n      } else {\n        if (typeof schema.allOf[i] === 'boolean') {\n          if (Boolean(data) !== schema.allOf[i]) {\n            return {\n              valid: false,\n              error: new ValidationError(`Value must match all schemas in allOf`, pointer),\n              data: finalData,\n            };\n          }\n          continue;\n        }\n\n        if (data !== schema.allOf[i]) {\n          return {\n            valid: false,\n            error: new ValidationError(`Value must match all schemas in allOf`, pointer),\n            data: finalData,\n          };\n        }\n      }\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  anyOf(schema, data, pointer, schemaShieldInstance) {\n    let finalData = data;\n\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        const validationResult = schemaShieldInstance.validate(schema.anyOf[i], finalData);\n        finalData = validationResult.data;\n        if (validationResult.valid) {\n          return { valid: true, error: null, data: finalData };\n        }\n      } else {\n        if (typeof schema.anyOf[i] === 'boolean') {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return { valid: true, error: null, data: finalData };\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return { valid: true, error: null, data: finalData };\n        }\n      }\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Value must match at least one schema in anyOf`, pointer),\n      data,\n    };\n  },\n\n  oneOf(schema, data, pointer, schemaShieldInstance) {\n    let validCount = 0;\n    let finalData = data;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        const validationResult = schemaShieldInstance.validate(schema.oneOf[i], finalData);\n        if (validationResult.valid) {\n          validCount++;\n        }\n        finalData = validationResult.data;\n      } else {\n        if (typeof schema.oneOf[i] === 'boolean') {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return { valid: true, error: null, data: finalData };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Value must match exactly one schema in oneOf`, pointer),\n      data: finalData,\n    };\n  },\n\n  dependencies(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    let finalData = data;\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return {\n              valid: false,\n              error: new ValidationError(`Dependency ${dependency[i]} is missing`, pointer),\n              data: finalData,\n            };\n          }\n        }\n        continue;\n      }\n\n      if (typeof dependency === 'boolean') {\n        if (dependency) {\n          continue;\n        }\n        return {\n          valid: false,\n          error: new ValidationError(`Dependency ${key} is missing`, pointer),\n\n          data: finalData,\n        };\n      }\n\n      if (typeof dependency === 'string') {\n        if (dependency in data) {\n          continue;\n        }\n        return {\n          valid: false,\n          error: new ValidationError(`Dependency ${dependency} is missing`, pointer),\n          data: finalData,\n        };\n      }\n\n      const validatorResult = schemaShieldInstance.validate(dependency, finalData);\n      if (!validatorResult.valid) {\n        return { valid: false, error: validatorResult.error, data: finalData };\n      }\n      finalData = validatorResult.data;\n    }\n\n    return { valid: true, error: null, data: finalData };\n  },\n\n  const(schema, data, pointer) {\n    if (\n      data === schema.const ||\n      (isObject(data) && isObject(schema.const) && deepEqual(data, schema.const)) ||\n      (Array.isArray(data) && Array.isArray(schema.const) && deepEqual(data, schema.const))\n    ) {\n      return { valid: true, error: null, data };\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Value must be equal to const`, pointer),\n      data,\n    };\n  },\n\n  contains(schema, data, pointer, schemaShieldInstance) {\n    if (!Array.isArray(data)) {\n      return { valid: true, error: null, data };\n    }\n\n    if (typeof schema.contains === 'boolean') {\n      if (schema.contains) {\n        const valid = data.length > 0;\n        return {\n          valid,\n          error: valid ? null : new ValidationError(`Value must contain at least one item`, pointer),\n          data,\n        };\n      }\n\n      return {\n        valid: false,\n        error: new ValidationError(`Value must not contain any items`, pointer),\n        data,\n      };\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const validatorResult = schemaShieldInstance.validate(schema.contains, data[i]);\n      if (validatorResult.valid) {\n        return { valid: true, error: null, data };\n      }\n    }\n\n    return {\n      valid: false,\n      error: new ValidationError(`Value must contain at least one item that matches the contains schema`, pointer),\n      data,\n    };\n  },\n\n  if(schema, data, pointer, schemaShieldInstance) {\n    if ('then' in schema === false && 'else' in schema === false) {\n      return { valid: true, error: null, data };\n    }\n\n    if (typeof schema.if === 'boolean') {\n      if (schema.if) {\n        if (schema.then) {\n          const thenResult = schemaShieldInstance.validate(schema.then, data);\n          if (!thenResult.valid) {\n            return thenResult;\n          }\n        }\n      } else if (schema.else) {\n        const elseResult = schemaShieldInstance.validate(schema.else, data);\n        if (!elseResult.valid) {\n          return elseResult;\n        }\n      }\n      return { valid: true, error: null, data };\n    }\n\n    const ifResult = schemaShieldInstance.validate(schema.if, data);\n    if (ifResult.valid) {\n      if (schema.then) {\n        const thenResult = schemaShieldInstance.validate(schema.then, data);\n        if (!thenResult.valid) {\n          return thenResult;\n        }\n      }\n    } else if (schema.else) {\n      const elseResult = schemaShieldInstance.validate(schema.else, data);\n      if (!elseResult.valid) {\n        return elseResult;\n      }\n    }\n\n    return { valid: true, error: null, data };\n  },\n\n  not(schema, data, pointer, schemaShieldInstance) {\n    if (typeof schema.not === 'boolean') {\n      if (schema.not) {\n        return {\n          valid: false,\n          error: new ValidationError(`Value must not be valid`, pointer),\n          data,\n        };\n      }\n      return { valid: true, error: null, data };\n    }\n\n    const validatorResult = schemaShieldInstance.validate(schema.not, data);\n    if (validatorResult.valid) {\n      return {\n        valid: false,\n        error: new ValidationError(`Value must not be valid`, pointer),\n        data,\n      };\n    }\n\n    return { valid: true, error: null, data };\n  },\n};\n","import { ValidationError, isObject } from './utils';\n\nimport { Formats } from './formats';\nimport { Types } from './types';\nimport { keywords } from './keywords';\n\nexport interface Result {\n  valid: boolean;\n  error: ValidationError | null;\n  data: any;\n}\n\nexport interface ValidatorFunction {\n  (schema: CompiledSchema, data: any, pointer: string, schemaShieldInstance: SchemaShield): Result;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface CompiledSchema {\n  validators?: ValidatorFunction[];\n  types?: ValidatorFunction[];\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): Result;\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, ValidatorFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, ValidatorFunction | false>();\n\n  constructor() {\n    for (const type of Object.keys(Types)) {\n      this.addType(type, Types[type]);\n    }\n\n    for (const keyword of Object.keys(keywords)) {\n      if (keywords[keyword]) {\n        this.addKeyword(keyword, keywords[keyword] as ValidatorFunction);\n      }\n    }\n\n    for (const format of Object.keys(Formats)) {\n      if (Formats[format]) {\n        this.addFormat(format, Formats[format] as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: ValidatorFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: ValidatorFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema, '#');\n\n    const validate: Validator = (data: any) => this.validate(compiledSchema, data);\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any, pointer): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }, { type: 'array' }, { type: 'object' }, { type: 'null' }],\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: [],\n        };\n      } else {\n        schema = {\n          oneOf: [schema],\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = {};\n\n    if ('type' in schema) {\n      const types = Array.isArray(schema.type) ? schema.type : schema.type.split(',').map((t) => t.trim());\n\n      compiledSchema.types = types.map((type) => this.types.get(type)).filter((validator) => Boolean(validator));\n    }\n\n    for (let key in schema) {\n      if (key === 'type') {\n        continue;\n      }\n\n      let keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        compiledSchema.validators = compiledSchema.validators || [];\n        compiledSchema.validators.push(keywordValidator);\n      }\n\n      if (this.isSchemaLike(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\n        continue;\n      }\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema) ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`) : subSchema\n        );\n        continue;\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema;\n  }\n\n  validate(schema: CompiledSchema, data: any): Result {\n    if (schema.types) {\n      let typeValid = false;\n      for (let type of schema.types) {\n        const result = type(schema, data, schema.pointer, this);\n\n        if (result.valid) {\n          typeValid = true;\n          break;\n        }\n      }\n\n      if (!typeValid) {\n        return {\n          valid: false,\n          error: new ValidationError(`Invalid type`, schema.pointer),\n          data,\n        };\n      }\n    }\n\n    if (schema.validators) {\n      for (let validator of schema.validators) {\n        const result = validator(schema, data, schema.pointer, this);\n\n        if (!result.valid) {\n          return result;\n        }\n      }\n    }\n\n    return {\n      valid: true,\n      error: null,\n      data,\n    };\n  }\n\n  private isSchemaOrKeywordPresent(subSchema: any): boolean {\n    if ('type' in subSchema) {\n      return true;\n    }\n\n    for (let subKey in subSchema) {\n      if (this.keywords.has(subKey)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    return isObject(subSchema) && this.isSchemaOrKeywordPresent(subSchema);\n  }\n\n  isCompiledSchema(subSchema: any): boolean {\n    return isObject(subSchema) && ('validators' in subSchema || 'types' in subSchema);\n  }\n}\n"],"mappings":"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"}