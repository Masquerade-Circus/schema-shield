//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","constructor","options","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","import_is_my_ip_valid","__toESM","RegExps","uri","email","hostname","date","notImplementedFormat","Formats","uperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","time","replace","duration","uuid","iri","Types","object","schema","valid","errors","array","string","number","integer","Number","isInteger","boolean","null","NumberKeywords","minimum","schemaShieldInstance","exclusiveMinimum","min","maximum","exclusiveMaximum","max","multipleOf","quotient","isFinite","areMultiples","a","b","epsilon","Math","abs","areCloseEnough","round","OtherKeywords","nullable","allOf","finalData","validator","validatorResult","push","Boolean","anyOf","validationResult","oneOf","validCount","dependencies","dependency","const","contains","if","then","thenValidator","thenResult","else","elseValidator","elseResult","ifValidator","not","keywords","required","hasOwnProperty","properties","default","maxProperties","minProperties","additionalProperties","patternProperties","match","pattern","propertyNames","items","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Set","item","itemStr","sort","sorted","JSON","stringify","has","add","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","join","types","Map","type","addType","keyword","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","validate","isSchemaLike","map","t","trim","validators","filter","typeErrorsResult","validateTypes","validateKeywords","handleSubSchema","subSchema","index","subKey","schemaValidator","schemaResult","keywordResult","keywordValidator","isSchemaOrKeywordPresent"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { SchemaShield, ValidationErrorProps } from './index';\r\n\r\nexport class ValidationError extends Error {\r\n  name: string;\r\n  pointer: string;\r\n  message: string;\r\n  value: any;\r\n  code: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    options: ValidationErrorProps = {\r\n      pointer: '',\r\n      value: null,\r\n      code: '',\r\n    }\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n    this.pointer = options.pointer;\r\n    this.message = message;\r\n    this.value = options.value;\r\n    this.code = options.code;\r\n  }\r\n}\r\n\r\nexport const defaultValidator = (schema, data, pointer) => {\r\n  return [\r\n    new ValidationError('No validator for this schema', {\r\n      pointer,\r\n      value: data,\r\n      code: 'NO_VALIDATOR',\r\n    }),\r\n  ];\r\n};\r\n\r\nexport function deepEqual(obj: Array<any> | Record<string, any>, other: Array<any> | Record<string, any>) {\r\n  if (Array.isArray(obj) && Array.isArray(other)) {\r\n    if (obj.length !== other.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < obj.length; i++) {\r\n      if (!deepEqual(obj[i], other[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof obj === 'object' && typeof other === 'object') {\r\n    if (obj === null || other === null) {\r\n      return obj === other;\r\n    }\r\n\r\n    const keys = Object.keys(obj);\r\n    if (keys.length !== Object.keys(other).length) {\r\n      return false;\r\n    }\r\n\r\n    for (const key of keys) {\r\n      if (!deepEqual(obj[key], other[key])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return obj === other;\r\n}\r\n\r\nexport function isObject(data) {\r\n  return typeof data === 'object' && data !== null && !Array.isArray(data);\r\n}\r\n\r\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\r\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\r\n}\r\n\r\nexport function getUTF16Length(str) {\r\n  let length = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const codePoint = str.codePointAt(i);\r\n    if (codePoint > 0xffff) {\r\n      i++;\r\n    }\r\n    length++;\r\n  }\r\n  return length;\r\n}\r\n","import isMyIpValid from 'is-my-ip-valid';\r\nimport { FormatFunction } from './index';\r\nimport { ValidationError } from './utils';\r\n\r\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\r\nconst RegExps = {\r\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\r\n  email:\r\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\r\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\r\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\r\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\r\n};\r\n\r\nfunction notImplementedFormat(data: any) {\r\n  throw new ValidationError(`Format \"${data}\" is not implemented yet. Please open an issue on GitHub.`);\r\n  return false;\r\n}\r\n\r\nexport const Formats: Record<string, FormatFunction> = {\r\n  ['date-time'](data) {\r\n    const uperCaseData = data.toUpperCase();\r\n    if (RegExps['date-time'].test(uperCaseData) === false) {\r\n      return false;\r\n    }\r\n\r\n    const date = new Date(uperCaseData);\r\n    return !isNaN(date.getTime());\r\n  },\r\n  uri(data) {\r\n    return RegExps.uri.test(data);\r\n  },\r\n  email(data) {\r\n    if (RegExps.email.test(data) === false) {\r\n      return false;\r\n    }\r\n\r\n    const [local, domain] = data.split('@');\r\n\r\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  ipv4: isMyIpValid({ version: 4 }),\r\n  ipv6: isMyIpValid({ version: 6 }),\r\n\r\n  hostname(data) {\r\n    return RegExps.hostname.test(data);\r\n  },\r\n  date(data) {\r\n    if (typeof data !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    if (RegExps.date.test(data) === false) {\r\n      return false;\r\n    }\r\n\r\n    return !isNaN(new Date(data).getTime());\r\n  },\r\n  regex(data) {\r\n    try {\r\n      new RegExp(data);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  'json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['json-pointer'].test(data);\r\n  },\r\n  'relative-json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['relative-json-pointer'].test(data);\r\n  },\r\n  time(data) {\r\n    return Formats['date-time'](`1970-01-01T${data}Z`.replace(/ZZ$/, 'Z'));\r\n  },\r\n\r\n  // Not supported yet\r\n\r\n  duration: notImplementedFormat,\r\n  'idn-email': notImplementedFormat,\r\n  'idn-hostname': notImplementedFormat,\r\n  uuid: notImplementedFormat,\r\n  'uri-reference': notImplementedFormat,\r\n  iri: notImplementedFormat,\r\n  'iri-reference': notImplementedFormat,\r\n  'uri-template': notImplementedFormat,\r\n};\r\n","import { isObject, ValidationError } from './utils';\r\nimport { ValidatorFunction } from './index';\r\n\r\nexport const Types: Record<string, ValidatorFunction> = {\r\n  object(schema, data, pointer) {\r\n    if (isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an object', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_OBJECT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  array(schema, data, pointer) {\r\n    if (Array.isArray(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null && 'length' in data) {\r\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\r\n      const keys = Object.keys(data);\r\n      if (keys.length > 0 && (keys[0] !== '0' || keys.length !== data.length)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Data is not an array', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NOT_AN_ARRAY',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an array', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_ARRAY',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  string(schema, data, pointer) {\r\n    if (typeof data === 'string') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a string', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_STRING',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  number(schema, data, pointer) {\r\n    if (typeof data === 'number') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a number', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_NUMBER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  integer(schema, data, pointer) {\r\n    if (typeof data === 'number' && Number.isInteger(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an integer', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_INTEGER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  boolean(schema, data, pointer) {\r\n    // Check if data is a boolean like value\r\n    if (typeof data === 'boolean') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a boolean', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_BOOLEAN',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  null(schema, data, pointer) {\r\n    if (data === null) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not null', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_NULL',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { areCloseEnough, ValidationError } from '../utils';\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\r\n  minimum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.exclusiveMinimum === 'number') {\r\n      return NumberKeywords.exclusiveMinimum(schema, data, pointer, schemaShieldInstance);\r\n    }\r\n\r\n    let min = schema.minimum;\r\n    if (typeof schema.exclusiveMinimum === 'boolean' && schema.exclusiveMinimum === true) {\r\n      min += 1e-15;\r\n    }\r\n\r\n    const valid = data >= min;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maximum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.exclusiveMaximum === 'number') {\r\n      return NumberKeywords.exclusiveMaximum(schema, data, pointer, schemaShieldInstance);\r\n    }\r\n\r\n    let max = schema.maximum;\r\n    if (typeof schema.exclusiveMaximum === 'boolean' && schema.exclusiveMaximum === true) {\r\n      max -= 1e-15;\r\n    }\r\n\r\n    const valid = data <= max;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  multipleOf(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const quotient = data / schema.multipleOf;\r\n\r\n    // Detect overflow handling in JS\r\n    if (!isFinite(quotient)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const areMultiples = areCloseEnough(quotient, Math.round(quotient));\r\n\r\n    return {\r\n      valid: areMultiples,\r\n      errors: areMultiples\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is not a multiple of', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_NOT_MULTIPLE_OF',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMinimum(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.exclusiveMinimum !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data > schema.exclusiveMinimum + 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMaximum(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.exclusiveMaximum !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data < schema.exclusiveMaximum - 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject, deepEqual } from '../utils';\r\n\r\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\r\n  nullable(schema, data, pointer) {\r\n    if (schema.nullable && data !== null) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Value must be null to be empty', {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_NOT_NULL',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  allOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.allOf.length; i++) {\r\n      if (isObject(schema.allOf[i])) {\r\n        const { validator } = schema.allOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          continue;\r\n        }\r\n\r\n        const validatorResult = validator(schema.allOf[i], finalData, pointer, schemaShieldInstance);\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n\r\n        finalData = validatorResult.data;\r\n      } else {\r\n        if (typeof schema.allOf[i] === 'boolean') {\r\n          if (Boolean(data) !== schema.allOf[i]) {\r\n            errors.push(\r\n              new ValidationError(`Value must match all schemas in allOf`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data !== schema.allOf[i]) {\r\n          errors.push(\r\n            new ValidationError(`Value must match all schemas in allOf`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  anyOf(schema, data, pointer, schemaShieldInstance) {\r\n    let finalData = data;\r\n\r\n    for (let i = 0; i < schema.anyOf.length; i++) {\r\n      if (isObject(schema.anyOf[i])) {\r\n        const { validator } = schema.anyOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          return { valid: true, errors: [], data };\r\n        }\r\n        const validationResult = validator(schema.anyOf[i], finalData, pointer, schemaShieldInstance);\r\n        finalData = validationResult.data;\r\n        if (validationResult.valid) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      } else {\r\n        if (typeof schema.anyOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.anyOf[i]) {\r\n            return { valid: true, errors: [], data: finalData };\r\n          }\r\n        }\r\n\r\n        if (data === schema.anyOf[i]) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match at least one schema in anyOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ANY_OF',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  oneOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let validCount = 0;\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.oneOf.length; i++) {\r\n      if (isObject(schema.oneOf[i])) {\r\n        const { validator } = schema.oneOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          validCount++;\r\n          continue;\r\n        }\r\n        const validationResult = validator(schema.oneOf[i], finalData, pointer, schemaShieldInstance);\r\n        if (validationResult.valid) {\r\n          validCount++;\r\n        } else {\r\n          errors.push(...validationResult.errors);\r\n        }\r\n        finalData = validationResult.data;\r\n      } else {\r\n        if (typeof schema.oneOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.oneOf[i]) {\r\n            validCount++;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data === schema.oneOf[i]) {\r\n          validCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validCount === 1) {\r\n      return { valid: true, errors: [], data: finalData };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match exactly one schema in oneOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ONE_OF',\r\n        }),\r\n      ],\r\n      data: finalData,\r\n    };\r\n  },\r\n\r\n  dependencies(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (const key in schema.dependencies) {\r\n      if (key in data === false) {\r\n        continue;\r\n      }\r\n\r\n      const dependency = schema.dependencies[key];\r\n      if (Array.isArray(dependency)) {\r\n        for (let i = 0; i < dependency.length; i++) {\r\n          if (!(dependency[i] in data)) {\r\n            errors.push(\r\n              new ValidationError(`Dependency ${dependency[i]} is missing`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'DEPENDENCY_MISSING',\r\n              })\r\n            );\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'boolean') {\r\n        if (dependency) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${key} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'string') {\r\n        if (dependency in data) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${dependency} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const { validator } = dependency as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(dependency, finalData, pointer, schemaShieldInstance);\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n      finalData = validatorResult.data;\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  const(schema, data, pointer) {\r\n    if (\r\n      data === schema.const ||\r\n      (isObject(data) && isObject(schema.const) && deepEqual(data, schema.const)) ||\r\n      (Array.isArray(data) && Array.isArray(schema.const) && deepEqual(data, schema.const))\r\n    ) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be equal to const`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_EQUAL_TO_CONST',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  contains(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.contains === 'boolean') {\r\n      if (schema.contains) {\r\n        const valid = data.length > 0;\r\n        return {\r\n          valid,\r\n          errors: valid\r\n            ? []\r\n            : [\r\n                new ValidationError(`Value must contain at least one item`, {\r\n                  pointer,\r\n                  value: data,\r\n                  code: 'VALUE_DOES_NOT_CONTAIN_ITEM',\r\n                }),\r\n              ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not contain any items`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_CONTAINS_ITEM',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const { validator } = schema.contains as CompiledSchema;\r\n    if (!validator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const validatorResult = validator(schema.contains, data[i], `${pointer}/${i}`, schemaShieldInstance);\r\n      if (validatorResult.valid) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must contain at least one item that matches the contains schema`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_CONTAIN_MATCHING_ITEM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  if(schema, data, pointer, schemaShieldInstance) {\r\n    if ('then' in schema === false && 'else' in schema === false) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.if === 'boolean') {\r\n      if (schema.if) {\r\n        if (schema.then) {\r\n          const { validator: thenValidator } = schema.then as CompiledSchema;\r\n          if (thenValidator) {\r\n            const thenResult = thenValidator(schema.then, data, pointer, schemaShieldInstance);\r\n            if (!thenResult.valid) {\r\n              return thenResult;\r\n            }\r\n          }\r\n        }\r\n      } else if (schema.else) {\r\n        const { validator: elseValidator } = schema.else as CompiledSchema;\r\n        if (elseValidator) {\r\n          const elseResult = elseValidator(schema.else, data, pointer, schemaShieldInstance);\r\n          if (!elseResult.valid) {\r\n            return elseResult;\r\n          }\r\n        }\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const { validator: ifValidator } = schema.if as CompiledSchema;\r\n    if (!ifValidator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const ifResult = ifValidator(schema.if, data, pointer, schemaShieldInstance);\r\n    if (ifResult.valid) {\r\n      if (schema.then) {\r\n        const { validator: thenValidator } = schema.then as CompiledSchema;\r\n        if (thenValidator) {\r\n          const thenResult = thenValidator(schema.then, data, pointer, schemaShieldInstance);\r\n          if (!thenResult.valid) {\r\n            return thenResult;\r\n          }\r\n        }\r\n      }\r\n    } else if (schema.else) {\r\n      const { validator: elseValidator } = schema.else as CompiledSchema;\r\n      if (elseValidator) {\r\n        const elseResult = elseValidator(schema.else, data, pointer, schemaShieldInstance);\r\n        if (!elseResult.valid) {\r\n          return elseResult;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  not(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof schema.not === 'boolean') {\r\n      if (schema.not) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError(`Value must not be valid`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_IS_VALID',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const { validator } = schema.not as CompiledSchema;\r\n    if (!validator) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not be valid`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_IS_VALID',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const validatorResult = validator(schema.not, data, pointer, schemaShieldInstance);\r\n    if (validatorResult.valid) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not be valid`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_IS_VALID',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n};\r\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\r\nimport { NumberKeywords } from \"./keywords/number-keywords\";\r\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\r\nimport { OtherKeywords } from \"./keywords/other-keywords\";\r\nimport { StringKeywords } from \"./keywords/string-keywords\";\r\nimport { ValidatorFunction } from \"./index\";\r\n\r\nexport const keywords: Record<string, ValidatorFunction> = {\r\n  ...ObjectKeywords,\r\n  ...ArrayKeywords,\r\n  ...StringKeywords,\r\n  ...NumberKeywords,\r\n  ...OtherKeywords\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ObjectKeywords: Record<string, ValidatorFunction> = {\r\n  // Object\r\n  required(schema, data, pointer) {\r\n    if (!isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 0; i < schema.required.length; i++) {\r\n      const key = schema.required[i];\r\n      if (!data.hasOwnProperty(key)) {\r\n        errors.push(\r\n          new ValidationError('Missing required property', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'MISSING_REQUIRED_PROPERTY',\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data };\r\n  },\r\n\r\n  properties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    for (let key in schema.properties) {\r\n      if (!data.hasOwnProperty(key) || typeof data[key] === 'undefined') {\r\n        if (isObject(schema.properties[key]) && 'default' in schema.properties[key]) {\r\n          finalData[key] = schema.properties[key].default;\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      if (typeof schema.properties[key] === 'boolean') {\r\n        if (schema.properties[key] === false) {\r\n          errors.push(\r\n            new ValidationError('Property is not allowed', {\r\n              pointer: `${pointer}/${key}`,\r\n              value: data[key],\r\n              code: 'PROPERTY_NOT_ALLOWED',\r\n            })\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.properties[key] as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(schema.properties[key], finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  maxProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too many properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_MANY_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  minProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too few properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_FEW_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    for (let key in data) {\r\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      if (schema.patternProperties) {\r\n        let match = false;\r\n        for (let pattern in schema.patternProperties) {\r\n          if (new RegExp(pattern, 'u').test(key)) {\r\n            match = true;\r\n            break;\r\n          }\r\n        }\r\n        if (match) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (schema.additionalProperties === false) {\r\n        errors.push(\r\n          new ValidationError('Additional property not allowed', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'ADDITIONAL_PROPERTY_NOT_ALLOWED',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.additionalProperties as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(schema.additionalProperties, finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    for (let pattern in schema.patternProperties) {\r\n      if (typeof schema.patternProperties[pattern] === 'boolean') {\r\n        if (schema.patternProperties[pattern] === false) {\r\n          for (let key in finalData) {\r\n            if (new RegExp(pattern, 'u').test(key)) {\r\n              errors.push(\r\n                new ValidationError('Property is not allowed', {\r\n                  pointer: `${pointer}/${key}`,\r\n                  value: data[key],\r\n                  code: 'PROPERTY_NOT_ALLOWED',\r\n                })\r\n              );\r\n            }\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.patternProperties[pattern] as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      for (let key in finalData) {\r\n        if (new RegExp(pattern, 'u').test(key)) {\r\n          const validatorResult = validator(schema.patternProperties[pattern], finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n          finalData[key] = validatorResult.data;\r\n\r\n          if (!validatorResult.valid) {\r\n            errors.push(...validatorResult.errors);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  propertyNames(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.propertyNames === 'boolean') {\r\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Property names are not allowed', {\r\n              pointer,\r\n              value: data,\r\n              code: 'PROPERTY_NAMES_NOT_ALLOWED',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const { validator } = schema.propertyNames as CompiledSchema;\r\n    if (!validator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    for (let key in finalData) {\r\n      const validatorResult = validator(schema.propertyNames, key, pointer, schemaShieldInstance);\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\r\nimport { ValidationError, isObject } from \"../utils\";\r\n\r\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\r\n  items(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = [...data];\r\n    if (Array.isArray(schema.items)) {\r\n      for (let i = 0; i < schema.items.length; i++) {\r\n        if (typeof schema.items[i] === \"boolean\") {\r\n          if (schema.items[i] === false && typeof data[i] !== \"undefined\") {\r\n            errors.push(\r\n              new ValidationError(\"Array item is not allowed\", {\r\n                pointer: `${pointer}/${i}`,\r\n                value: data[i],\r\n                code: \"ARRAY_ITEM_NOT_ALLOWED\"\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        const { validator } = schema.items[i] as CompiledSchema;\r\n        if (!validator) {\r\n          continue;\r\n        }\r\n        const validatorResult = validator(\r\n          schema.items[i],\r\n          finalData[i],\r\n          `${pointer}/${i}`,\r\n          schemaShieldInstance\r\n        );\r\n\r\n        finalData[i] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n      }\r\n    } else if (typeof schema.items === \"boolean\") {\r\n      if (schema.items === false && data.length > 0) {\r\n        errors.push(\r\n          new ValidationError(\"Array is not allowed\", {\r\n            pointer,\r\n            value: data,\r\n            code: \"ARRAY_NOT_ALLOWED\"\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      const { validator } = schema.items as CompiledSchema;\r\n      if (!validator) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n\r\n      for (let i = 0; i < finalData.length; i++) {\r\n        const validatorErrors = validator(\r\n          schema.items,\r\n          finalData[i],\r\n          `${pointer}/${i}`,\r\n          schemaShieldInstance\r\n        );\r\n\r\n        finalData[i] = validatorErrors.data;\r\n\r\n        if (!validatorErrors.valid) {\r\n          errors.push(...validatorErrors.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  minItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(\"Array is too short\", {\r\n          pointer,\r\n          value: data,\r\n          code: \"ARRAY_TOO_SHORT\"\r\n        })\r\n      ],\r\n      data\r\n    };\r\n  },\r\n\r\n  maxItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(\"Array is too long\", {\r\n          pointer,\r\n          value: data,\r\n          code: \"ARRAY_TOO_LONG\"\r\n        })\r\n      ],\r\n      data\r\n    };\r\n  },\r\n\r\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (schema.additionalItems === false) {\r\n      if (data.length > schema.items.length) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError(\"Array has too many items\", {\r\n              pointer,\r\n              value: data,\r\n              code: \"ARRAY_TOO_MANY_ITEMS\"\r\n            })\r\n          ],\r\n          data\r\n        };\r\n      }\r\n\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = [...data];\r\n    if (typeof schema.additionalItems === \"object\") {\r\n      for (let i = schema.items.length; i < finalData.length; i++) {\r\n        const { validator } = schema.additionalItems as CompiledSchema;\r\n        const validatorResult = validator(\r\n          schema.additionalItems,\r\n          finalData[i],\r\n          `${pointer}/${i}`,\r\n          schemaShieldInstance\r\n        );\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n        finalData[i] = validatorResult.data;\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  uniqueItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || !schema.uniqueItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const unique = new Set();\r\n\r\n    for (const item of data) {\r\n      let itemStr = item;\r\n\r\n      // Change string to \"string\" to avoid false positives\r\n      if (typeof item === \"string\") {\r\n        itemStr = `\"${item}\"`;\r\n\r\n        // Sort object keys to avoid false positives\r\n      } else if (isObject(item)) {\r\n        const keys = Object.keys(item).sort();\r\n        const sorted = {};\r\n        for (let i = 0; i < keys.length; i++) {\r\n          sorted[keys[i]] = item[keys[i]];\r\n        }\r\n        itemStr = JSON.stringify(sorted);\r\n      } else if (Array.isArray(item)) {\r\n        itemStr = JSON.stringify(item);\r\n      }\r\n\r\n      if (unique.has(itemStr)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError(\"Array items are not unique\", {\r\n              pointer,\r\n              value: data,\r\n              code: \"ARRAY_ITEMS_NOT_UNIQUE\"\r\n            })\r\n          ],\r\n          data\r\n        };\r\n      } else {\r\n        unique.add(itemStr);\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  }\r\n};\r\n","import { ValidationError, deepEqual } from '../utils';\r\n\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const StringKeywords: Record<string, ValidatorFunction> = {\r\n  minLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length >= schema.minLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too short', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_SHORT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length <= schema.maxLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too long', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_LONG',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  pattern(schema, data, pointer) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const patternRegexp = new RegExp(schema.pattern, 'u');\r\n\r\n    if (patternRegexp instanceof RegExp === false) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Pattern is not a valid regular expression', {\r\n            pointer,\r\n            value: data,\r\n            code: 'PATTERN_IS_NOT_REGEXP',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = patternRegexp.test(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('String does not match pattern', {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_PATTERN',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  format(schema, data, pointer, formatInstance) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const formatValidate = formatInstance.formats.get(schema.format);\r\n    if (!formatValidate) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Unknown format ${schema.format}`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'UNKNOWN_FORMAT',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = formatValidate(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError(`String does not match format ${schema.format}`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_FORMAT',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  enum(schema, data, pointer) {\r\n    // Simple equality check\r\n    for (let i = 0; i < schema.enum.length; i++) {\r\n      if (schema.enum[i] === data) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n    }\r\n\r\n    // If is an array check for a deep equality\r\n    if (Array.isArray(data)) {\r\n      for (let i = 0; i < schema.enum.length; i++) {\r\n        if (Array.isArray(schema.enum[i])) {\r\n          if (deepEqual(schema.enum[i], data)) {\r\n            return { valid: true, errors: [], data };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // If is an object check for a deep equality\r\n    if (typeof data === 'object' && data !== null) {\r\n      for (let i = 0; i < schema.enum.length; i++) {\r\n        if (typeof schema.enum[i] === 'object' && schema.enum[i] !== null) {\r\n          if (deepEqual(schema.enum[i], data)) {\r\n            return { valid: true, errors: [], data };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be one of ${schema.enum.join(', ')}`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_IN_ENUM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { ValidationError, isObject } from './utils';\r\n\r\nimport { Formats } from './formats';\r\nimport { Types } from './types';\r\nimport { keywords } from './keywords';\r\n\r\nexport interface ValidationErrorProps {\r\n  pointer: string;\r\n  value: any;\r\n  code: string;\r\n}\r\n\r\nexport interface Result {\r\n  valid: boolean;\r\n  errors: ValidationError[];\r\n  data: any;\r\n}\r\n\r\nexport interface ValidatorFunction {\r\n  (schema: CompiledSchema, data: any, pointer: string, schemaShieldInstance: SchemaShield): Result;\r\n}\r\n\r\nexport interface FormatFunction {\r\n  (data: any): boolean;\r\n}\r\n\r\nexport interface CompiledSchema {\r\n  pointer: string;\r\n  validator?: ValidatorFunction;\r\n  type?: string;\r\n  validators?: ValidatorFunction[];\r\n  keywords?: Record<string, ValidatorFunction>;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Validator {\r\n  (data: any): Result;\r\n  compiledSchema: CompiledSchema;\r\n}\r\n\r\nexport class SchemaShield {\r\n  types = new Map<string, ValidatorFunction>();\r\n  formats = new Map<string, FormatFunction>();\r\n  keywords = new Map<string, ValidatorFunction>();\r\n\r\n  constructor() {\r\n    for (const type in Types) {\r\n      this.addType(type, Types[type]);\r\n    }\r\n\r\n    for (const keyword in keywords) {\r\n      this.addKeyword(keyword, keywords[keyword]);\r\n    }\r\n\r\n    for (const format in Formats) {\r\n      this.addFormat(format, Formats[format]);\r\n    }\r\n  }\r\n\r\n  addType(name: string, validator: ValidatorFunction) {\r\n    this.types.set(name, validator);\r\n  }\r\n\r\n  addFormat(name: string, validator: FormatFunction) {\r\n    this.formats.set(name, validator);\r\n  }\r\n\r\n  addKeyword(name: string, validator: ValidatorFunction) {\r\n    this.keywords.set(name, validator);\r\n  }\r\n\r\n  compile(schema: any): Validator {\r\n    const compiledSchema = this.compileSchema(schema, '#');\r\n\r\n    const validate: Validator = (data: any) => {\r\n      return compiledSchema.validator(compiledSchema, data, '#', this);\r\n    };\r\n\r\n    validate.compiledSchema = compiledSchema;\r\n\r\n    return validate;\r\n  }\r\n\r\n  private compileSchema(schema: Partial<CompiledSchema> | any, pointer): CompiledSchema {\r\n    if (!this.isSchemaLike(schema)) {\r\n      if (schema === true) {\r\n        schema = {\r\n          anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }, { type: 'array' }, { type: 'object' }, { type: 'null' }],\r\n        };\r\n      }\r\n\r\n      if (schema === false) {\r\n        schema = {\r\n          oneOf: [],\r\n        };\r\n      }\r\n    }\r\n\r\n    const compiledSchema = {\r\n      ...schema,\r\n      pointer,\r\n    };\r\n\r\n    if ('type' in compiledSchema) {\r\n      const types = Array.isArray(compiledSchema.type) ? compiledSchema.type : compiledSchema.type.split(',').map((t) => t.trim());\r\n\r\n      compiledSchema.validators = types.filter((type) => this.types.has(type)).map((type) => this.types.get(type));\r\n    }\r\n\r\n    // Compile schema type\r\n    const validator: ValidatorFunction = (schema: any, data: any, pointer: string) => {\r\n      if (typeof data === 'undefined') {\r\n        if (pointer === '#') {\r\n          return {\r\n            valid: false,\r\n            errors: [\r\n              new ValidationError('Data is undefined', {\r\n                pointer,\r\n                value: data,\r\n                code: 'DATA_UNDEFINED',\r\n              }),\r\n            ],\r\n            data,\r\n          };\r\n        }\r\n      }\r\n\r\n      let finalData = data;\r\n      const typeErrorsResult = this.validateTypes(schema, finalData, pointer);\r\n      if (typeErrorsResult.valid === false) {\r\n        return typeErrorsResult;\r\n      }\r\n      finalData = typeErrorsResult.data;\r\n\r\n      return this.validateKeywords(schema, finalData, pointer);\r\n    };\r\n\r\n    compiledSchema.validator = validator;\r\n\r\n    // Recursively compile sub schemas\r\n    for (let key in schema) {\r\n      // Skip type as it is already compiled\r\n      if (key === 'type') {\r\n        continue;\r\n      }\r\n\r\n      if (this.keywords.has(key)) {\r\n        const validator = this.keywords.get(key);\r\n        compiledSchema.keywords = compiledSchema.keywords || {};\r\n        compiledSchema.keywords[key] = validator;\r\n      }\r\n\r\n      this.handleSubSchema(key, schema, pointer, compiledSchema);\r\n    }\r\n\r\n    return compiledSchema;\r\n  }\r\n\r\n  private handleSubSchema(key: string, schema: any, pointer: string, compiledSchema: any) {\r\n    if (Array.isArray(schema[key])) {\r\n      compiledSchema[key] = schema[key].map((subSchema, index) => {\r\n        if (this.isSchemaLike(subSchema)) {\r\n          return this.compileSchema(subSchema, `${pointer}/${key}/${index}`);\r\n        }\r\n        return subSchema;\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (isObject(schema[key])) {\r\n      if (this.isSchemaLike(schema[key]) && key !== 'properties') {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        return;\r\n      }\r\n\r\n      for (let subKey in schema[key]) {\r\n        if (this.isSchemaLike(schema[key][subKey])) {\r\n          compiledSchema[key] = compiledSchema[key] || {};\r\n\r\n          compiledSchema[key][subKey] = this.compileSchema(schema[key][subKey], `${pointer}/${key}/${subKey}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateTypes(schema: CompiledSchema, data, pointer): Result {\r\n    if (typeof data === 'undefined' || !Array.isArray(schema.validators) || schema.validators.length === 0) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    let errors = [];\r\n    let finalData = data;\r\n\r\n    for (let schemaValidator of schema.validators) {\r\n      const schemaResult = schemaValidator(schema, data, pointer, this);\r\n\r\n      finalData = schemaResult.data;\r\n\r\n      if (schemaResult.valid) {\r\n        return schemaResult;\r\n      }\r\n\r\n      errors = schemaResult.errors;\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data: finalData,\r\n    };\r\n  }\r\n\r\n  private validateKeywords(schema: CompiledSchema, data, pointer): Result {\r\n    const errors = [];\r\n    let finalData = data;\r\n\r\n    if ('keywords' in schema) {\r\n      for (let keyword in schema.keywords) {\r\n        const keywordValidator: ValidatorFunction = schema.keywords[keyword];\r\n        const keywordResult = keywordValidator(schema, finalData, pointer, this);\r\n        finalData = keywordResult.data;\r\n        if (!keywordResult.valid) {\r\n          errors.push(...keywordResult.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data: finalData,\r\n    };\r\n  }\r\n\r\n  private isSchemaOrKeywordPresent(subSchema: any): boolean {\r\n    if ('type' in subSchema) {\r\n      return true;\r\n    }\r\n\r\n    for (let subKey in subSchema) {\r\n      if (this.keywords.has(subKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isSchemaLike(subSchema: any): boolean {\r\n    return isObject(subSchema) && this.isSchemaOrKeywordPresent(subSchema);\r\n  }\r\n}\r\n"],"mappings":"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"}