//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["ValidationError","Error","message","item","keyword","cause","path","data","schema","_getCause","pointer","this","getCause","getDefinedErrorFunctionForKey","key","KeywordError","getNamedFunction","options","deepEqual","obj","other","Array","isArray","length","i","keys","Object","isObject","deepClone","result","constructor","name","isCompiledSchema","subSchema","fn","defineProperty","value","RegExps","time","uri","date","daysInMonth","Formats","match","day","Number","yearStr","monthStr","hourStr","minuteStr","secondStr","timezoneSign","timezoneHourStr","timezoneMinuteStr","year","month","hour","minute","second","timezoneHour","timezoneMinute","test","email","ipv4","ipv6","address","indexOf","startsWith","endsWith","hasIpv4","addressParts","split","ipv4Part","pop","isShortened","ipv6Part","join","isIpv6Valid","hasInvalidChar","hostname","isNaN","Date","getTime","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","timestamp","int8","unit8","int16","unit16","int32","unit32","float32","float64","keywords","required","defineError","hasOwnProperty","properties","error","$validate","schemaProp","default","values","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","pattern","patterns","propertyNames","dependencies","dependency","then","else","$ref","definitions","$id","$schema","title","description","$comment","examples","contentMediaType","contentEncoding","discriminator","nullable","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","elements","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","instance","formatValidate","getFormat","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","enum","enumItem","allOf","Boolean","anyOf","oneOf","validCount","const","if","not","types","formats","immutable","type","validator","addType","addKeyword","addFormat","overwrite","getType","getKeyword","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","defineTypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","executeKeywordValidator","prevValidator","keywordError","index","subKey"],"sources":["../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  message: string;\n  item: string | number;\n  keyword: string;\n  cause: ValidationError;\n  path: string = \"\";\n  data?: any;\n  schema?: CompiledSchema;\n\n  private _getCause(pointer = \"#\") {\n    const path =\n      pointer +\n      \"/\" +\n      this.keyword +\n      (typeof this.item !== \"undefined\" ? \"/\" + this.item : \"\");\n\n    if (!this.cause) {\n      this.path = path;\n      return this;\n    }\n\n    return this.cause._getCause(path);\n  }\n\n  getCause() {\n    return this._getCause();\n  }\n}\n\nexport interface DefineErrorOptions {\n  item?: any; // Final item in the path\n  cause?: ValidationError; // Cause of the error\n  data?: any; // Data that caused the error\n}\n\nexport interface DefineErrorFunction {\n  (message: string, options?: DefineErrorOptions): ValidationError;\n}\n\nexport function getDefinedErrorFunctionForKey(\n  key: string,\n  schema: CompiledSchema\n) {\n  const KeywordError = new ValidationError(`Invalid ${key}`);\n  KeywordError.keyword = key;\n  KeywordError.schema = schema;\n\n  const defineError: DefineErrorFunction = (message, options = {}) => {\n    KeywordError.message = message;\n    KeywordError.item = options.item;\n    KeywordError.cause = options.cause;\n    KeywordError.data = options.data;\n    return KeywordError;\n  };\n\n  return getNamedFunction<DefineErrorFunction>(\n    `defineError_${key}`,\n    defineError\n  );\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  // Is class instance of any kind\n  if (obj && obj.constructor && obj.constructor.name !== \"Object\") {\n    return obj;\n  }\n\n  if (isObject(obj)) {\n    const result = {\n      ...obj\n    };\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import { FormatFunction } from \"./index\";\nimport { ValidationError } from \"./utils\";\nimport isMyIpValid from \"is-my-ip-valid\";\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  \"json-pointer\": /^\\/(?:[^~]|~0|~1)*$/,\n  \"relative-json-pointer\": /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\n};\n\nconst daysInMonth = [31, , 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\nfunction ipv6(address) {\n  if (address === \"::\") {\n    return true;\n  }\n\n  if (\n    address.indexOf(\":\") === -1 ||\n    (address.startsWith(\":\") && !address.startsWith(\"::\")) ||\n    (address.endsWith(\":\") && !address.endsWith(\"::\")) ||\n    /:::+/.test(address)\n  ) {\n    return false;\n  }\n\n  const hasIpv4 = address.indexOf(\".\") !== -1;\n  const addressParts = address.split(\":\");\n\n  if (hasIpv4) {\n    const ipv4Part = addressParts.pop();\n    if (\n      !/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n        ipv4Part\n      )\n    ) {\n      return false;\n    }\n  }\n\n  const isShortened = address.indexOf(\"::\") !== -1;\n  const ipv6Part = hasIpv4 ? addressParts.join(\":\") : address;\n\n  if (isShortened) {\n    if (ipv6Part.split(\"::\").length - 1 > 1) {\n      return false;\n    }\n\n    if (!/^[0-9a-fA-F:.]*$/.test(ipv6Part)) {\n      return false;\n    }\n\n    const ipv6ShortenedRegex =\n      /^(?:(?:(?:[0-9a-fA-F]{1,4}(?::|$)){1,6}))|(?:::(?:[0-9a-fA-F]{1,4})){0,5}$/;\n\n    return (\n      ipv6ShortenedRegex.test(ipv6Part) && !/[0-9a-fA-F]{5,}/.test(ipv6Part)\n    );\n  }\n\n  const ipv6Regex = /^(?:(?:[0-9a-fA-F]{1,4}:){7}(?:[0-9a-fA-F]{1,4}|:))$/;\n\n  const isIpv6Valid = ipv6Regex.test(ipv6Part);\n\n  const hasInvalidChar = /(?:[0-9a-fA-F]{5,}|\\D[0-9a-fA-F]{3}:)/.test(ipv6Part);\n\n  if (hasIpv4) {\n    return isIpv6Valid || !hasInvalidChar;\n  }\n\n  return isIpv6Valid && !hasInvalidChar;\n}\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  [\"date-time\"](data) {\n    const match = data.match(\n      /^(\\d{4})-(0[0-9]|1[0-2])-(\\d{2})T(0[0-9]|1\\d|2[0-3]):([0-5]\\d):((?:[0-5]\\d|60))(?:.\\d+)?(?:([+-])(0[0-9]|1\\d|2[0-3]):([0-5]\\d)|Z)?$/i\n    );\n\n    if (!match) {\n      return false;\n    }\n\n    let day = Number(match[3]);\n\n    if (match[2] === \"02\" && day > 29) {\n      return false;\n    }\n\n    const [\n      ,\n      yearStr,\n      monthStr,\n      ,\n      hourStr,\n      minuteStr,\n      secondStr,\n      timezoneSign,\n      timezoneHourStr,\n      timezoneMinuteStr\n    ] = match;\n\n    let year = Number(yearStr);\n    let month = Number(monthStr);\n    let hour = Number(hourStr);\n    let minute = Number(minuteStr);\n    let second = Number(secondStr);\n\n    if (timezoneSign === \"-\" || timezoneSign === \"+\") {\n      const timezoneHour = Number(timezoneHourStr);\n      const timezoneMinute = Number(timezoneMinuteStr);\n\n      if (timezoneSign === \"-\") {\n        hour += timezoneHour;\n        minute += timezoneMinute;\n      } else if (timezoneSign === \"+\") {\n        hour -= timezoneHour;\n        minute -= timezoneMinute;\n      }\n\n      if (minute > 59) {\n        hour += 1;\n        minute -= 60;\n      } else if (minute < 0) {\n        hour -= 1;\n        minute += 60;\n      }\n\n      if (hour > 23) {\n        day += 1;\n        hour -= 24;\n      } else if (hour < 0) {\n        day -= 1;\n        hour += 24;\n      }\n\n      if (day > 31) {\n        month += 1;\n        day -= 31;\n      } else if (day < 1) {\n        month -= 1;\n        day += 31;\n      }\n\n      if (month > 12) {\n        year += 1;\n        month -= 12;\n      } else if (month < 1) {\n        year -= 1;\n        month += 12;\n      }\n\n      if (year < 0) {\n        return false;\n      }\n    }\n\n    const maxDays =\n      month === 2\n        ? year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)\n          ? 29\n          : 28\n        : daysInMonth[month - 1];\n\n    if (day > maxDays) {\n      return false;\n    }\n\n    // Leap seconds\n    if (second === 60 && (minute !== 59 || hour !== 23)) {\n      return false;\n    }\n\n    return true;\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    return /^(?!\\.)(?!.*\\.$)[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,20}(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,21}){0,2}@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,60}[a-z0-9])?){0,3}$/i.test(\n      data\n    );\n  },\n  ipv4(data) {\n    // Matches a string formed by 4 numbers between 0 and 255 separated by dots without leading zeros\n    // /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/\n    return /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n      data\n    );\n  },\n\n  // ipv6: isMyIpValid({ version: 6 }),\n  ipv6: ipv6,\n\n  hostname(data) {\n    return /^[a-z0-9][a-z0-9-]{0,62}(?:\\.[a-z0-9][a-z0-9-]{0,62})*[a-z0-9]$/i.test(\n      data\n    );\n  },\n  date(data) {\n    if (typeof data !== \"string\") {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"json-pointer\"].test(data);\n  },\n  \"relative-json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"relative-json-pointer\"].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  \"idn-email\": false,\n  \"idn-hostname\": false,\n  uuid: false,\n  \"uri-reference\": false,\n  iri: false,\n  \"iri-reference\": false,\n  \"uri-template\": false\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction | false> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  },\n\n  // Not implemented yet\n  timestamp: false,\n  int8: false,\n  unit8: false,\n  int16: false,\n  unit16: false,\n  int32: false,\n  unit32: false,\n  float32: false,\n  float64: false\n\n\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return defineError(\"Required property is missing\", {\n          item: key,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key of Object.keys(schema.properties)) {\n      if (!data.hasOwnProperty(key)) {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          return defineError(\"Property is not allowed\", {\n            item: key,\n            data: data[key]\n          });\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          return defineError(\"Property is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  values(schema, data, defineError) {\n    if (!isObject(data) || !isCompiledSchema(schema.values)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    for (const key of keys) {\n      const error = schema.values.$validate(data[key]);\n      if (error) {\n        return defineError(\"Property is invalid\", {\n          item: key,\n          cause: error,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return defineError(\"Too many properties\", { data });\n  },\n\n  minProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return defineError(\"Too few properties\", { data });\n  },\n\n  additionalProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return defineError(\"Additional properties are not allowed\", {\n          item: key,\n          data: data[key]\n        });\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          return defineError(\"Additional properties are invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              return defineError(\"Property is not allowed\", {\n                item: key,\n                data: data[key]\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              return defineError(\"Property is invalid\", {\n                item: key,\n                cause: error,\n                data: data[key]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return defineError(\"Properties are not allowed\", { data });\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          return defineError(\"Property name is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  dependencies(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return defineError(\"Dependency is not satisfied\", {\n              item: i,\n              data: dependency[i]\n            });\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return defineError(\"Dependency is not satisfied\", {\n          cause: error,\n          data\n        });\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n\n  // Metadata keywords (not used as a function)\n  title: false,\n  description: false,\n  $comment: false,\n  examples: false,\n  contentMediaType: false,\n  contentEncoding: false,\n\n  // Not supported Open API keywords\n  discriminator: false,\n  nullable: false\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return defineError(\"Array items are not allowed\", { data });\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            return defineError(\"Array item is not allowed\", {\n              item: i,\n              data: data[i]\n            });\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          return defineError(\"Array item is invalid\", {\n            item: i,\n            cause: error,\n            data: data[i]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  elements(schema, data, defineError) {\n    if (!Array.isArray(data) || !isCompiledSchema(schema.elements)) {\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.elements.$validate(data[i]);\n      if (error) {\n        return defineError(\"Array item is invalid\", {\n          item: i,\n          cause: error,\n          data: data[i]\n        });\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return defineError(\"Array is too short\", { data });\n  },\n\n  maxItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return defineError(\"Array is too long\", { data });\n  },\n\n  additionalItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return defineError(\"Array is too long\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return defineError(\"Array items are not unique\", { data: item });\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return defineError(\"Array must contain at least one item\", { data });\n        }\n        return;\n      }\n\n      return defineError(\"Array must not contain any items\", { data });\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return defineError(\"Array must contain at least one item\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return defineError(\"Value is shorter than the minimum length\", { data });\n  },\n\n  maxLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return defineError(\"Value is longer than the maximum length\", { data });\n  },\n\n  pattern(schema, data, defineError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return defineError(\"Invalid regular expression\", { data });\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the pattern\", { data });\n  },\n\n  format(schema, data, defineError, instance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = instance.getFormat(schema.format);\n    if (formatValidate === false) {\n      return;\n    }\n\n    if (formatValidate) {\n      if (formatValidate(data)) {\n        return;\n      }\n\n      return defineError(\"Value does not match the format\", { data });\n    }\n\n    return defineError(\"Format is not supported\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\nimport { areCloseEnough } from \"../utils\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return defineError(\"Value is less than the minimum\", { data });\n    }\n\n    return;\n  },\n\n  maximum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return defineError(\"Value is greater than the maximum\", { data });\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return defineError(\"Value is not a multiple of the multipleOf\", { data });\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return defineError(\"Value is less than or equal to the exclusiveMinimum\");\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return defineError(\n        \"Value is greater than or equal to the exclusiveMaximum\",\n        { data }\n      );\n    }\n\n    return;\n  }\n};\n","import { deepEqual, isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  enum(schema, data, defineError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not one of the allowed values\", { data });\n  },\n\n  allOf(schema, data, defineError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return defineError(\"Value is not valid\", { cause: error, data });\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return defineError(\"Value is not valid\", { data });\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return defineError(\"Value is not valid\", { data });\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, defineError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  oneOf(schema, data, defineError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  const(schema, data, defineError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  if(schema, data, defineError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (isCompiledSchema(schema.then)) {\n          return schema.then.$validate(data);\n        }\n      } else if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    if (!isCompiledSchema(schema.if)) {\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (isCompiledSchema(schema.then)) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, defineError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return defineError(\"Value is not valid\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return defineError(\"Value is not valid\", { cause: error, data });\n        }\n        return;\n      }\n      return defineError(\"Value is not valid\", { data });\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  }\n};\n","import {\n  DefineErrorFunction,\n  ValidationError,\n  deepClone,\n  getDefinedErrorFunctionForKey,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    defineError: DefineErrorFunction,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  private types: Record<string, TypeFunction | false> = {};\n  private formats: Record<string, FormatFunction | false> = {};\n  private keywords: Record<string, KeywordFunction | false> = {};\n  private immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      if (validator) {\n        this.addType(type, validator);\n      }\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction, overwrite = false) {\n    if (this.types[name] && !overwrite) {\n      throw new ValidationError(`Type \"${name}\" already exists`);\n    }\n    this.types[name] = validator;\n  }\n\n  getType(type: string): TypeFunction | false {\n    return this.types[type];\n  }\n\n  addFormat(name: string, validator: FormatFunction, overwrite = false) {\n    if (this.formats[name] && !overwrite) {\n      throw new ValidationError(`Format \"${name}\" already exists`);\n    }\n    this.formats[name] = validator;\n  }\n\n  getFormat(format: string): FormatFunction | false {\n    return this.formats[format];\n  }\n\n  addKeyword(name: string, validator: KeywordFunction, overwrite = false) {\n    if (this.keywords[name] && !overwrite) {\n      throw new ValidationError(`Keyword \"${name}\" already exists`);\n    }\n    this.keywords[name] = validator;\n  }\n\n  getKeyword(keyword: string): KeywordFunction | false {\n    return this.keywords[keyword];\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = { ...schema } as CompiledSchema;\n    const defineTypeError = getDefinedErrorFunctionForKey(\"type\", schema);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.getType(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw defineTypeError(\"Invalid type for schema\", { data: schema.type });\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (typeValidation(data)) {\n              return;\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      }\n    }\n\n    for (const key of Object.keys(schema)) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.getKeyword(key);\n      if (keywordValidator) {\n        const defineError = getDefinedErrorFunctionForKey(key, schema[key]);\n        const executeKeywordValidator = (data: any) =>\n          (keywordValidator as KeywordFunction)(\n            compiledSchema,\n            data,\n            defineError,\n            this\n          );\n\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              const keywordError = executeKeywordValidator(data);\n              if (keywordError) {\n                return keywordError;\n              }\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            executeKeywordValidator\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (subKey in this.keywords) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}