//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","message","item","keyword","cause","path","data","schema","_getCause","pointer","this","getCause","getDefinedErrorFunctionForKey","key","KeywordError","getNamedFunction","options","deepEqual","obj","other","Array","isArray","length","i","keys","Object","isObject","deepClone","result","constructor","name","isCompiledSchema","subSchema","fn","defineProperty","value","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","timestamp","int8","unit8","int16","unit16","int32","unit32","float32","float64","keywords","required","defineError","hasOwnProperty","properties","error","$validate","schemaProp","default","values","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","match","pattern","patterns","propertyNames","dependencies","dependency","then","else","$ref","definitions","$id","$schema","title","description","$comment","examples","contentMediaType","contentEncoding","discriminator","nullable","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","elements","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","minimum","instance","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","enum","enumItem","allOf","Boolean","anyOf","oneOf","validCount","const","if","not","types","Map","immutable","type","validator","addType","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","defineTypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","executeKeywordValidator","prevValidator","keywordError","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  message: string;\n  item: string | number;\n  keyword: string;\n  cause: ValidationError;\n  path: string = \"\";\n  data?: any;\n  schema?: CompiledSchema;\n\n  private _getCause(pointer = \"#\") {\n    const path =\n      pointer +\n      \"/\" +\n      this.keyword +\n      (typeof this.item !== \"undefined\" ? \"/\" + this.item : \"\");\n\n    if (!this.cause) {\n      this.path = path;\n      return this;\n    }\n\n    return this.cause._getCause(path);\n  }\n\n  getCause() {\n    return this._getCause();\n  }\n}\n\nexport interface DefineErrorOptions {\n  item?: any; // Final item in the path\n  cause?: ValidationError; // Cause of the error\n  data?: any; // Data that caused the error\n}\n\nexport interface DefineErrorFunction {\n  (message: string, options?: DefineErrorOptions): ValidationError;\n}\n\nexport function getDefinedErrorFunctionForKey(\n  key: string,\n  schema: CompiledSchema\n) {\n  const KeywordError = new ValidationError(`Invalid ${key}`);\n  KeywordError.keyword = key;\n  KeywordError.schema = schema;\n\n  const defineError: DefineErrorFunction = (message, options = {}) => {\n    KeywordError.message = message;\n    KeywordError.item = options.item;\n    KeywordError.cause = options.cause;\n    KeywordError.data = options.data;\n    return KeywordError;\n  };\n\n  return getNamedFunction<DefineErrorFunction>(\n    `defineError_${key}`,\n    defineError\n  );\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  // Is class instance of any kind\n  if (obj && obj.constructor && obj.constructor.name !== \"Object\") {\n    return obj;\n  }\n\n  if (isObject(obj)) {\n    const result = {\n      ...obj\n    };\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction | false> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  },\n\n  // Not implemented yet\n  timestamp: false,\n  int8: false,\n  unit8: false,\n  int16: false,\n  unit16: false,\n  int32: false,\n  unit32: false,\n  float32: false,\n  float64: false\n\n\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return defineError(\"Required property is missing\", {\n          item: key,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key of Object.keys(schema.properties)) {\n      if (!data.hasOwnProperty(key)) {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          return defineError(\"Property is not allowed\", {\n            item: key,\n            data: data[key]\n          });\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          return defineError(\"Property is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  values(schema, data, defineError) {\n    if (!isObject(data) || !isCompiledSchema(schema.values)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    for (const key of keys) {\n      const error = schema.values.$validate(data[key]);\n      if (error) {\n        return defineError(\"Property is invalid\", {\n          item: key,\n          cause: error,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return defineError(\"Too many properties\", { data });\n  },\n\n  minProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return defineError(\"Too few properties\", { data });\n  },\n\n  additionalProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return defineError(\"Additional properties are not allowed\", {\n          item: key,\n          data: data[key]\n        });\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          return defineError(\"Additional properties are invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              return defineError(\"Property is not allowed\", {\n                item: key,\n                data: data[key]\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              return defineError(\"Property is invalid\", {\n                item: key,\n                cause: error,\n                data: data[key]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return defineError(\"Properties are not allowed\", { data });\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          return defineError(\"Property name is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  dependencies(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return defineError(\"Dependency is not satisfied\", {\n              item: i,\n              data: dependency[i]\n            });\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return defineError(\"Dependency is not satisfied\", {\n          cause: error,\n          data\n        });\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n\n  // Metadata keywords (not used as a function)\n  title: false,\n  description: false,\n  $comment: false,\n  examples: false,\n  contentMediaType: false,\n  contentEncoding: false,\n\n  // Not supported Open API keywords\n  discriminator: false,\n  nullable: false\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return defineError(\"Array items are not allowed\", { data });\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            return defineError(\"Array item is not allowed\", {\n              item: i,\n              data: data[i]\n            });\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          return defineError(\"Array item is invalid\", {\n            item: i,\n            cause: error,\n            data: data[i]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  elements(schema, data, defineError) {\n    if (!Array.isArray(data) || !isCompiledSchema(schema.elements)) {\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.elements.$validate(data[i]);\n      if (error) {\n        return defineError(\"Array item is invalid\", {\n          item: i,\n          cause: error,\n          data: data[i]\n        });\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return defineError(\"Array is too short\", { data });\n  },\n\n  maxItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return defineError(\"Array is too long\", { data });\n  },\n\n  additionalItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return defineError(\"Array is too long\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return defineError(\"Array items are not unique\", { data: item });\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return defineError(\"Array must contain at least one item\", { data });\n        }\n        return;\n      }\n\n      return defineError(\"Array must not contain any items\", { data });\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return defineError(\"Array must contain at least one item\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return defineError(\"Value is shorter than the minimum length\", { data });\n  },\n\n  maxLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return defineError(\"Value is longer than the maximum length\", { data });\n  },\n\n  pattern(schema, data, defineError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return defineError(\"Invalid regular expression\", { data });\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the pattern\", { data });\n  },\n\n  format(schema, data, defineError, formatInstance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return;\n    }\n\n    if (typeof formatValidate === \"function\") {\n      if (formatValidate(data)) {\n        return;\n      }\n\n      return defineError(\"Value does not match the format\", { data });\n    }\n\n    return defineError(\"Format is not supported\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\nimport { areCloseEnough } from \"../utils\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return defineError(\"Value is less than the minimum\", { data });\n    }\n\n    return;\n  },\n\n  maximum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return defineError(\"Value is greater than the maximum\", { data });\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return defineError(\"Value is not a multiple of the multipleOf\", { data });\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return defineError(\"Value is less than or equal to the exclusiveMinimum\");\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return defineError(\n        \"Value is greater than or equal to the exclusiveMaximum\",\n        { data }\n      );\n    }\n\n    return;\n  }\n};\n","import { deepEqual, isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  enum(schema, data, defineError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not one of the allowed values\", { data });\n  },\n\n  allOf(schema, data, defineError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return defineError(\"Value is not valid\", { cause: error, data });\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return defineError(\"Value is not valid\", { data });\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return defineError(\"Value is not valid\", { data });\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, defineError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  oneOf(schema, data, defineError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  const(schema, data, defineError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  if(schema, data, defineError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (isCompiledSchema(schema.then)) {\n          return schema.then.$validate(data);\n        }\n      } else if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    if (!isCompiledSchema(schema.if)) {\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (isCompiledSchema(schema.then)) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, defineError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return defineError(\"Value is not valid\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return defineError(\"Value is not valid\", { cause: error, data });\n        }\n        return;\n      }\n      return defineError(\"Value is not valid\", { data });\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  }\n};\n","import {\n  DefineErrorFunction,\n  ValidationError,\n  deepClone,\n  getDefinedErrorFunctionForKey,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    defineError: DefineErrorFunction,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, TypeFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, KeywordFunction | false>();\n  immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      if (validator) {\n        this.addType(type, validator);\n      }\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: KeywordFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = { ...schema } as CompiledSchema;\n    const defineTypeError = getDefinedErrorFunctionForKey(\"type\", schema);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.types.get(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw defineTypeError(\"Invalid type for schema\", { data: schema.type });\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (typeValidation(data)) {\n              return;\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      }\n    }\n\n    for (const key of Object.keys(schema)) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        const defineError = getDefinedErrorFunctionForKey(key, schema[key]);\n        const executeKeywordValidator = (data: any) =>\n          (keywordValidator as KeywordFunction)(\n            compiledSchema,\n            data,\n            defineError,\n            this\n          );\n\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              const keywordError = executeKeywordValidator(data);\n              if (keywordError) {\n                return keywordError;\n              }\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            executeKeywordValidator\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (this.keywords.has(subKey)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}