//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","item","constructor","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","deepClone","result","isCompiledSchema","subSchema","getNamedFunction","fn","defineProperty","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","keywords","required","schema","KeywordError","hasOwnProperty","properties","$validate","schemaProp","default","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","match","pattern","patterns","propertyNames","then","else","$ref","definitions","$id","$schema","title","$comment","contentMediaType","contentEncoding","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","error","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","oneOf","validCount","dependencies","dependency","const","if","not","types","Map","immutable","type","validator","addType","keyword","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","isSchemaLike","validate","map","t","trim","typeValidations","push","TypeError","typeValidation","keywordValidator","prevValidator","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","export class ValidationError extends Error {\n  name: string;\n  pointer: string;\n  message: string;\n  value: any;\n  code: string;\n  item: string | number;\n\n  constructor(message: string, pointer?: string) {\n    super(message);\n    this.pointer = pointer;\n  }\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  if (isObject(obj)) {\n    const result = {};\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): boolean {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  }\n};\n","import { ArrayKeywords } from './keywords/array-keywords';\nimport { NumberKeywords } from './keywords/number-keywords';\nimport { ObjectKeywords } from './keywords/object-keywords';\nimport { OtherKeywords } from './keywords/other-keywords';\nimport { StringKeywords } from './keywords/string-keywords';\nimport { ValidatorFunction } from './index';\n\nexport const keywords: Record<string, ValidatorFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords,\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ObjectKeywords: Record<string, ValidatorFunction | false> = {\n  // Object\n  required(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        KeywordError.item = key;\n        throw KeywordError;\n      }\n    }\n\n    return data;\n  },\n\n  properties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n\n    const keys = Object.keys(schema.properties);\n    for (const key of keys) {\n      if (typeof data[key] === \"undefined\") {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          KeywordError.item = key;\n          throw KeywordError;\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        data[key] = schema.properties[key].$validate(data[key]);\n      }\n    }\n\n    return data;\n  },\n\n  maxProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  minProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  additionalProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        KeywordError.item = key;\n        throw KeywordError;\n      }\n\n      if (isCompiled) {\n        data[key] = schema.additionalProperties.$validate(data[key]);\n      }\n    }\n\n    return data;\n  },\n\n  patternProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              KeywordError.item = key;\n              throw KeywordError;\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            data[key] = schema.patternProperties[pattern].$validate(data[key]);\n          }\n        }\n      }\n    }\n\n    return data;\n  },\n\n  propertyNames(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        throw KeywordError;\n      }\n    }\n\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        schema.propertyNames.$validate(key);\n      }\n    }\n\n    return data;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n  title: false,\n  $comment: false,\n  contentMediaType: false,\n  contentEncoding: false\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\n  items(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return data;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        throw KeywordError;\n      }\n\n      return data;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        if (typeof schemaItems[i] === \"boolean\") {\n          if (schemaItems[i] === false && typeof data[i] !== \"undefined\") {\n            KeywordError.message = \"Array item is not allowed\";\n            KeywordError.item = i;\n            throw KeywordError;\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItems[i])) {\n          data[i] = schemaItems[i].$validate(data[i]);\n        }\n      }\n\n      return data;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        data[i] = schemaItems.$validate(data[i]);\n      }\n    }\n\n    return data;\n  },\n\n  minItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  maxItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  additionalItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return data;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        throw KeywordError;\n      }\n      return data;\n    }\n\n    if (isCompiledSchema(schema.additionalItems)) {\n      for (let i = schema.items.length; i < data.length; i++) {\n        data[i] = schema.additionalItems.$validate(data[i]);\n      }\n      return data;\n    }\n\n    return data;\n  },\n\n  uniqueItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return data;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        throw KeywordError;\n      } else {\n        unique.add(itemStr);\n      }\n    }\n\n    return data;\n  },\n\n  contains(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return data;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          throw KeywordError;\n        }\n        return data;\n      }\n\n      throw KeywordError;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      try {\n        data[i] = schema.contains.$validate(data[i]);\n        return data;\n      } catch (error) {\n        continue;\n      }\n    }\n\n    throw KeywordError;\n  }\n};\n","import { ValidationError, deepEqual } from \"../utils\";\n\nimport { ValidatorFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, ValidatorFunction> = {\n  minLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  maxLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  pattern(schema, data, KeywordError) {\n    if (typeof data !== \"string\") {\n      return data;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      throw KeywordError;\n    }\n\n    if (patternRegexp.test(data)) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  format(schema, data, KeywordError, formatInstance) {\n    if (typeof data !== \"string\") {\n      return data;\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return data;\n    }\n\n    if (typeof formatValidate === \"function\") {\n      if (formatValidate(data)) {\n        return data;\n      }\n\n      throw KeywordError;\n    }\n\n    throw KeywordError;\n  },\n\n  enum(schema, data, KeywordError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return data;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return data;\n        }\n      }\n    }\n\n    throw KeywordError;\n  }\n};\n","import { ValidationError, areCloseEnough } from \"../utils\";\n\nimport { ValidatorFunction } from \"../index\";\n\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\n  minimum(schema, data, KeywordError) {\n    if (typeof data !== \"number\") {\n      return data;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      throw KeywordError;\n    }\n\n    return data;\n  },\n\n  maximum(schema, data, KeywordError) {\n    if (typeof data !== \"number\") {\n      return data;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      throw KeywordError;\n    }\n\n    return data;\n  },\n\n  multipleOf(schema, data, KeywordError) {\n    if (typeof data !== \"number\") {\n      return data;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return data;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      throw KeywordError;\n    }\n\n    return data;\n  },\n\n  exclusiveMinimum(schema, data, KeywordError) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return data;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      throw KeywordError;\n    }\n\n    return data;\n  },\n\n  exclusiveMaximum(schema, data, KeywordError) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return data;\n    }\n\n    if (data >= schema.exclusiveMaximum - 1e-15) {\n      throw KeywordError;\n    }\n\n    return data;\n  }\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport {\n  ValidationError,\n  deepEqual,\n  isCompiledSchema,\n  isObject\n} from \"../utils\";\n\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\n  nullable(schema, data, KeywordError) {\n    if (schema.nullable && data !== null) {\n      throw KeywordError;\n    }\n\n    return data;\n  },\n\n  allOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          data = schema.allOf[i].$validate(data);\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          throw KeywordError;\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        throw KeywordError;\n      }\n    }\n\n    return data;\n  },\n\n  anyOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        try {\n          if (\"$validate\" in schema.anyOf[i]) {\n            data = schema.anyOf[i].$validate(data);\n          }\n          return data;\n        } catch (error) {\n          continue;\n        }\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return data;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return data;\n        }\n      }\n    }\n\n    throw KeywordError;\n  },\n\n  oneOf(schema, data, KeywordError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i] === false) {\n          validCount++;\n          continue;\n        }\n        try {\n          data = schema.oneOf[i].$validate(data);\n          validCount++;\n        } catch (error) {\n          continue;\n        }\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return data;\n    }\n\n    throw KeywordError;\n  },\n\n  dependencies(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return data;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            KeywordError.item = i;\n            throw KeywordError;\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        throw KeywordError;\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        throw KeywordError;\n      }\n\n      data = dependency.$validate(data);\n    }\n\n    return data;\n  },\n\n  const(schema, data, KeywordError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return data;\n    }\n    throw KeywordError;\n  },\n\n  if(schema, data, KeywordError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return data;\n    }\n\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (schema.then) {\n          return schema.then.$validate(data);\n        }\n      } else if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return data;\n    }\n\n    try {\n      data = schema.if.$validate(data);\n      if (schema.then) {\n        try {\n          return schema.then.$validate(data);\n        } catch (error) {\n          KeywordError.message = `Value must match then schema if it matches if schema`;\n          throw KeywordError;\n        }\n      }\n    } catch (error) {\n      if (\n        error instanceof ValidationError === false ||\n        error.message === \"Value must match then schema if it matches if schema\"\n      ) {\n        throw error;\n      }\n      if (schema.else) {\n        try {\n          return schema.else.$validate(data);\n        } catch (error) {\n          KeywordError.message = `Value must match else schema if it does not match if schema`;\n          throw KeywordError;\n        }\n      }\n    }\n\n    return data;\n  },\n\n  not(schema, data, KeywordError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        throw KeywordError;\n      }\n      return data;\n    }\n\n    try {\n      data = schema.not.$validate(data);\n    } catch (error) {\n      if (error instanceof ValidationError) {\n        return data;\n      }\n    }\n\n    throw KeywordError;\n  }\n};\n","import {\n  ValidationError,\n  deepClone,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = any;\n\nexport interface ValidatorFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    error: ValidationError,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): Result;\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, TypeFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, ValidatorFunction | false>();\n  immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      this.addType(type, validator);\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as ValidatorFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: ValidatorFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema, \"#\");\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\", \"#\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        (data) => data\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      if (this.immutable) {\n        data = deepClone(data);\n      }\n      return compiledSchema.$validate(data);\n    };\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(\n    schema: Partial<CompiledSchema> | any,\n    pointer\n  ): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [\n            { type: \"string\" },\n            { type: \"number\" },\n            { type: \"boolean\" },\n            { type: \"array\" },\n            { type: \"object\" },\n            { type: \"null\" }\n          ]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = {} as CompiledSchema;\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      const typeValidations = [];\n      let name = \"\";\n      for (const type of types) {\n        const validator = this.types.get(type);\n        if (validator) {\n          typeValidations.push(validator);\n          name += (name ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n      const TypeError = new ValidationError(`Invalid type`, pointer);\n\n      if (typeValidations.length === 0) {\n        throw TypeError;\n      }\n\n      if (typeValidations.length === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          name,\n          (data) => {\n            if (typeValidation(data)) {\n              return data;\n            }\n            throw TypeError;\n          }\n        );\n      } else {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          name,\n          (data) => {\n            for (const validator of typeValidations) {\n              if (validator(data)) {\n                return data;\n              }\n            }\n            throw TypeError;\n          }\n        );\n      }\n    }\n\n    for (let key in schema) {\n      if (key === \"type\") {\n        continue;\n      }\n\n      let keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        const KeywordError = new ValidationError(`Invalid ${key}`, pointer);\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          const name = `${prevValidator.name}_AND_${keywordValidator.name}`;\n\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            name,\n            (data) => {\n              data = prevValidator(data);\n              return (keywordValidator as ValidatorFunction)(\n                compiledSchema,\n                data,\n                KeywordError,\n                this\n              );\n            }\n          );\n        } else {\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            keywordValidator.name,\n            (data) => {\n              return (keywordValidator as ValidatorFunction)(\n                compiledSchema,\n                data,\n                KeywordError,\n                this\n              );\n            }\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(\n          schema[key],\n          `${pointer}/${key}`\n        );\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (this.keywords.has(subKey)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}