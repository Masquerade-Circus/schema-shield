//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["ValidationError","Error","name","pointer","message","value","code","constructor","options","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","RegExps","uri","email","ipv4","ipv6","hostname","notImplementedFormat","Formats","test","time","date","duration","uuid","iri","regex","Types","object","schema","valid","errors","array","string","number","integer","Number","isInteger","boolean","null","keywords","required","hasOwnProperty","push","properties","schemaShieldInstance","finalData","default","validator","validatorResult","maxProperties","minProperties","additionalProperties","patternProperties","match","pattern","RegExp","items","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Set","item","itemStr","sort","sorted","JSON","stringify","has","add","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","join","minimum","exclusiveMinimum","maximum","exclusiveMaximum","multipleOf","quotient","areMultiples","Math","abs","round","nullable","oneOf","validCount","validationResult","Boolean","allOf","anyOf","dependencies","dependency","types","Map","type","addType","keyword","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","schemaShield","validate","split","map","t","trim","validators","filter","typeErrorsResult","validateTypes","validateKeywords","handleArraySchema","handleObjectSchema","subSchema","index","subKey","subSubKey","schemaValidator","schemaResult","keywordResult","keywordValidator"],"sources":["../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["import { SchemaShield, ValidationErrorProps } from \"./index\";\n\nexport class ValidationError extends Error {\n  name: string;\n  pointer: string;\n  message: string;\n  value: any;\n  code: string;\n\n  constructor(\n    message: string,\n    options: ValidationErrorProps = {\n      pointer: \"\",\n      value: null,\n      code: \"\"\n    }\n  ) {\n    super(message);\n    this.name = \"ValidationError\";\n    this.pointer = options.pointer;\n    this.message = message;\n    this.value = options.value;\n    this.code = options.code;\n  }\n}\n\nexport const defaultValidator = (schema, data, pointer) => {\n  return [\n    new ValidationError(\"No validator for this schema\", {\n      pointer,\n      value: data,\n      code: \"NO_VALIDATOR\"\n    })\n  ];\n};\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n","import { FormatFunction, ValidationError, ValidatorFunction } from \"./utils\";\n\nconst RegExps = {\n  \"date-time\":\n    /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(Z|[+-]\\d{2}:\\d{2})$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n  ipv6: /^(?:(?:[0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4}|(?=(?:[0-9a-fA-F]{0,4}:){0,7}[0-9a-fA-F]{0,4}(?![:.\\w]))(([0-9a-fA-F]{1,4}:){1,7}|:)((:[0-9a-fA-F]{1,4}){1,7}|:))$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*$/\n};\n\nfunction notImplementedFormat(data: any) {\n  throw new ValidationError(\n    `Format \"${data}\" is not implemented yet. Please open an issue on GitHub.`\n  );\n\n  return false;\n}\n\nexport const Formats: Record<string, FormatFunction> = {\n  [\"date-time\"](data) {\n    return RegExps[\"date-time\"].test(data);\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    return RegExps.email.test(data);\n  },\n  ipv4(data) {\n    return RegExps.ipv4.test(data);\n  },\n  ipv6(data) {\n    return RegExps.ipv6.test(data);\n  },\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n\n  // Not supported yet\n  time: notImplementedFormat,\n  date: notImplementedFormat,\n  duration: notImplementedFormat,\n  \"idn-email\": notImplementedFormat,\n  \"idn-hostname\": notImplementedFormat,\n  uuid: notImplementedFormat,\n  \"uri-reference\": notImplementedFormat,\n  iri: notImplementedFormat,\n  \"iri-reference\": notImplementedFormat,\n  \"uri-template\": notImplementedFormat,\n  \"json-pointer\": notImplementedFormat,\n  \"relative-json-pointer\": notImplementedFormat,\n  regex: notImplementedFormat\n};\n","import { ValidationError } from \"./utils\";\nimport { ValidatorFunction } from \"./index\";\n\nexport const Types: Record<string, ValidatorFunction> = {\n  object(schema, data, pointer) {\n    if (typeof data === \"object\" && data !== null && !Array.isArray(data)) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not an object\", {\n          pointer,\n          value: data,\n          code: \"NOT_AN_OBJECT\"\n        })\n      ],\n      data\n    };\n  },\n  array(schema, data, pointer) {\n    if (Array.isArray(data)) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    if (typeof data === \"object\" && data !== null && \"length\" in data) {\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\n      const keys = Object.keys(data);\n      if (keys.length > 0 && (keys[0] !== \"0\" || keys.length !== data.length)) {\n        return {\n          valid: false,\n          errors: [\n            new ValidationError(\"Data is not an array\", {\n              pointer,\n              value: data,\n              code: \"NOT_AN_ARRAY\"\n            })\n          ],\n          data\n        };\n      }\n\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not an array\", {\n          pointer,\n          value: data,\n          code: \"NOT_AN_ARRAY\"\n        })\n      ],\n      data\n    };\n  },\n  string(schema, data, pointer) {\n    if (typeof data === \"string\") {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not a string\", {\n          pointer,\n          value: data,\n          code: \"NOT_A_STRING\"\n        })\n      ],\n      data\n    };\n  },\n  number(schema, data, pointer) {\n    if (typeof data === \"number\") {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not a number\", {\n          pointer,\n          value: data,\n          code: \"NOT_A_NUMBER\"\n        })\n      ],\n      data\n    };\n  },\n  integer(schema, data, pointer) {\n    if (typeof data === \"number\" && Number.isInteger(data)) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not an integer\", {\n          pointer,\n          value: data,\n          code: \"NOT_AN_INTEGER\"\n        })\n      ],\n      data\n    };\n  },\n  boolean(schema, data, pointer) {\n    if (typeof data === \"boolean\") {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not a boolean\", {\n          pointer,\n          value: data,\n          code: \"NOT_A_BOOLEAN\"\n        })\n      ],\n      data\n    };\n  },\n  null(schema, data, pointer) {\n    if (data === null) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Data is not null\", {\n          pointer,\n          value: data,\n          code: \"NOT_NULL\"\n        })\n      ],\n      data\n    };\n  }\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\nimport { ValidatorFunction } from \"./index\";\n\nexport const keywords: Record<string, ValidatorFunction> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport { ValidationError, isObject } from \"../utils\";\n\nexport const ObjectKeywords: Record<string, ValidatorFunction> = {\n  // Object\n  required(schema, data, pointer) {\n    if (!isObject(data)) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    const errors = [];\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        errors.push(\n          new ValidationError(\"Missing required property\", {\n            pointer: `${pointer}/${key}`,\n            value: data,\n            code: \"MISSING_REQUIRED_PROPERTY\"\n          })\n        );\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data };\n  },\n\n  properties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = { ...data };\n    for (let key in schema.properties) {\n      if (!data.hasOwnProperty(key) || typeof data[key] === \"undefined\") {\n        if (\n          isObject(schema.properties[key]) &&\n          \"default\" in schema.properties[key]\n        ) {\n          finalData[key] = schema.properties[key].default;\n        }\n\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          errors.push(\n            new ValidationError(\"Property is not allowed\", {\n              pointer: `${pointer}/${key}`,\n              value: data[key],\n              code: \"PROPERTY_NOT_ALLOWED\"\n            })\n          );\n        }\n        continue;\n      }\n\n      const { validator } = schema.properties[key] as CompiledSchema;\n      if (!validator) {\n        continue;\n      }\n\n      const validatorResult = validator(\n        schema.properties[key],\n        finalData[key],\n        `${pointer}/${key}`,\n        schemaShieldInstance\n      );\n\n      finalData[key] = validatorResult.data;\n\n      if (!validatorResult.valid) {\n        errors.push(...validatorResult.errors);\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  },\n\n  maxProperties(schema, data, pointer) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Object has too many properties\", {\n          pointer,\n          value: data,\n          code: \"OBJECT_TOO_MANY_PROPERTIES\"\n        })\n      ],\n      data\n    };\n  },\n\n  minProperties(schema, data, pointer) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Object has too few properties\", {\n          pointer,\n          value: data,\n          code: \"OBJECT_TOO_FEW_PROPERTIES\"\n        })\n      ],\n      data\n    };\n  },\n\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = { ...data };\n    for (let key in data) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (let pattern in schema.patternProperties) {\n          if (new RegExp(pattern).test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        errors.push(\n          new ValidationError(\"Additional property not allowed\", {\n            pointer: `${pointer}/${key}`,\n            value: data,\n            code: \"ADDITIONAL_PROPERTY_NOT_ALLOWED\"\n          })\n        );\n        continue;\n      }\n\n      const { validator } = schema.additionalProperties as CompiledSchema;\n      if (!validator) {\n        continue;\n      }\n\n      const validatorResult = validator(\n        schema.additionalProperties,\n        finalData[key],\n        `${pointer}/${key}`,\n        schemaShieldInstance\n      );\n\n      finalData[key] = validatorResult.data;\n\n      if (!validatorResult.valid) {\n        errors.push(...validatorResult.errors);\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  },\n\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = { ...data };\n    for (let pattern in schema.patternProperties) {\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (let key in finalData) {\n            if (new RegExp(pattern).test(key)) {\n              errors.push(\n                new ValidationError(\"Property is not allowed\", {\n                  pointer: `${pointer}/${key}`,\n                  value: data[key],\n                  code: \"PROPERTY_NOT_ALLOWED\"\n                })\n              );\n            }\n          }\n        }\n        continue;\n      }\n\n      const { validator } = schema.patternProperties[pattern] as CompiledSchema;\n      if (!validator) {\n        continue;\n      }\n\n      for (let key in finalData) {\n        if (new RegExp(pattern).test(key)) {\n          const validatorResult = validator(\n            schema.patternProperties[pattern],\n            finalData[key],\n            `${pointer}/${key}`,\n            schemaShieldInstance\n          );\n\n          finalData[key] = validatorResult.data;\n\n          if (!validatorResult.valid) {\n            errors.push(...validatorResult.errors);\n          }\n        }\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  }\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport { ValidationError, isObject } from \"../utils\";\n\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\n  items(schema, data, pointer, schemaShieldInstance) {\n    if (!Array.isArray(data)) {\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = [...data];\n    if (Array.isArray(schema.items)) {\n      for (let i = 0; i < schema.items.length; i++) {\n        if (typeof schema.items[i] === \"boolean\") {\n          if (schema.items[i] === false && typeof data[i] !== \"undefined\") {\n            errors.push(\n              new ValidationError(\"Array item is not allowed\", {\n                pointer: `${pointer}/${i}`,\n                value: data[i],\n                code: \"ARRAY_ITEM_NOT_ALLOWED\"\n              })\n            );\n          }\n          continue;\n        }\n\n        const { validator } = schema.items[i] as CompiledSchema;\n        if (!validator) {\n          continue;\n        }\n        const validatorResult = validator(\n          schema.items[i],\n          finalData[i],\n          `${pointer}/${i}`,\n          schemaShieldInstance\n        );\n\n        finalData[i] = validatorResult.data;\n\n        if (!validatorResult.valid) {\n          errors.push(...validatorResult.errors);\n        }\n      }\n    } else if (typeof schema.items === \"boolean\") {\n      if (schema.items === false && data.length > 0) {\n        errors.push(\n          new ValidationError(\"Array is not allowed\", {\n            pointer,\n            value: data,\n            code: \"ARRAY_NOT_ALLOWED\"\n          })\n        );\n      }\n    } else {\n      const { validator } = schema.items as CompiledSchema;\n      if (!validator) {\n        return { valid: true, errors: [], data };\n      }\n\n      for (let i = 0; i < finalData.length; i++) {\n        const validatorErrors = validator(\n          schema.items,\n          finalData[i],\n          `${pointer}/${i}`,\n          schemaShieldInstance\n        );\n\n        finalData[i] = validatorErrors.data;\n\n        if (!validatorErrors.valid) {\n          errors.push(...validatorErrors.errors);\n        }\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  },\n\n  minItems(schema, data, pointer) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Array is too short\", {\n          pointer,\n          value: data,\n          code: \"ARRAY_TOO_SHORT\"\n        })\n      ],\n      data\n    };\n  },\n\n  maxItems(schema, data, pointer) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"Array is too long\", {\n          pointer,\n          value: data,\n          code: \"ARRAY_TOO_LONG\"\n        })\n      ],\n      data\n    };\n  },\n\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return { valid: true, errors: [], data };\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return {\n          valid: false,\n          errors: [\n            new ValidationError(\"Array has too many items\", {\n              pointer,\n              value: data,\n              code: \"ARRAY_TOO_MANY_ITEMS\"\n            })\n          ],\n          data\n        };\n      }\n\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = [...data];\n    if (typeof schema.additionalItems === \"object\") {\n      for (let i = schema.items.length; i < finalData.length; i++) {\n        const { validator } = schema.additionalItems as CompiledSchema;\n        const validatorResult = validator(\n          schema.additionalItems,\n          finalData[i],\n          `${pointer}/${i}`,\n          schemaShieldInstance\n        );\n        if (!validatorResult.valid) {\n          errors.push(...validatorResult.errors);\n        }\n        finalData[i] = validatorResult.data;\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  },\n\n  uniqueItems(schema, data, pointer) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return { valid: true, errors: [], data };\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr = item;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `\"${item}\"`;\n\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        const keys = Object.keys(item).sort();\n        const sorted = {};\n        for (let i = 0; i < keys.length; i++) {\n          sorted[keys[i]] = item[keys[i]];\n        }\n        itemStr = JSON.stringify(sorted);\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return {\n          valid: false,\n          errors: [\n            new ValidationError(\"Array items are not unique\", {\n              pointer,\n              value: data,\n              code: \"ARRAY_ITEMS_NOT_UNIQUE\"\n            })\n          ],\n          data\n        };\n      } else {\n        unique.add(itemStr);\n      }\n    }\n\n    return { valid: true, errors: [], data };\n  }\n};\n","import { ValidationError, deepEqual } from \"../utils\";\n\nimport { ValidatorFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, ValidatorFunction> = {\n  minLength(schema, data, pointer) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"String is too short\", {\n          pointer,\n          value: data,\n          code: \"STRING_TOO_SHORT\"\n        })\n      ],\n      data\n    };\n  },\n\n  maxLength(schema, data, pointer) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return { valid: true, errors: [], data };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(\"String is too long\", {\n          pointer,\n          value: data,\n          code: \"STRING_TOO_LONG\"\n        })\n      ],\n      data\n    };\n  },\n\n  pattern(schema, data, pointer) {\n    if (typeof data !== \"string\") {\n      return { valid: true, errors: [], data };\n    }\n\n    const patternRegexp =\n      typeof schema.pattern === \"string\"\n        ? new RegExp(schema.pattern)\n        : schema.pattern;\n\n    if (patternRegexp instanceof RegExp === false) {\n      return {\n        valid: false,\n        errors: [\n          new ValidationError(\"Pattern is not a valid regular expression\", {\n            pointer,\n            value: data,\n            code: \"PATTERN_IS_NOT_REGEXP\"\n          })\n        ],\n        data\n      };\n    }\n\n    const valid = patternRegexp.test(data);\n\n    return {\n      valid,\n      errors: valid\n        ? []\n        : [\n            new ValidationError(\"String does not match pattern\", {\n              pointer,\n              value: data,\n              code: \"STRING_DOES_NOT_MATCH_PATTERN\"\n            })\n          ],\n      data\n    };\n  },\n\n  format(schema, data, pointer, formatInstance) {\n    if (typeof data !== \"string\") {\n      return { valid: true, errors: [], data };\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (!formatValidate) {\n      return {\n        valid: false,\n        errors: [\n          new ValidationError(`Unknown format ${schema.format}`, {\n            pointer,\n            value: data,\n            code: \"UNKNOWN_FORMAT\"\n          })\n        ],\n        data\n      };\n    }\n\n    const valid = formatValidate(data);\n\n    return {\n      valid,\n      errors: valid\n        ? []\n        : [\n            new ValidationError(\n              `String does not match format ${schema.format}`,\n              {\n                pointer,\n                value: data,\n                code: \"STRING_DOES_NOT_MATCH_FORMAT\"\n              }\n            )\n          ],\n      data\n    };\n  },\n\n  enum(schema, data, pointer) {\n    // Simple equality check\n    for (let i = 0; i < schema.enum.length; i++) {\n      if (schema.enum[i] === data) {\n        return { valid: true, errors: [], data };\n      }\n    }\n\n    // If is an array check for a deep equality\n    if (Array.isArray(data)) {\n      for (let i = 0; i < schema.enum.length; i++) {\n        if (Array.isArray(schema.enum[i])) {\n          if (deepEqual(schema.enum[i], data)) {\n            return { valid: true, errors: [], data };\n          }\n        }\n      }\n    }\n\n    // If is an object check for a deep equality\n    if (typeof data === \"object\" && data !== null) {\n      for (let i = 0; i < schema.enum.length; i++) {\n        if (typeof schema.enum[i] === \"object\" && schema.enum[i] !== null) {\n          if (deepEqual(schema.enum[i], data)) {\n            return { valid: true, errors: [], data };\n          }\n        }\n      }\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(`Value must be one of ${schema.enum.join(\", \")}`, {\n          pointer,\n          value: data,\n          code: \"VALUE_NOT_IN_ENUM\"\n        })\n      ],\n      data\n    };\n  }\n};\n","import { ValidationError } from \"../utils\";\nimport { ValidatorFunction } from \"../index\";\n\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\n  minimum(schema, data, pointer) {\n    if (typeof data !== \"number\") {\n      return { valid: true, errors: [], data };\n    }\n\n    const min = schema.exclusiveMinimum\n      ? schema.minimum + 1e-15\n      : schema.minimum;\n\n    const valid = data >= min;\n\n    return {\n      valid,\n      errors: valid\n        ? []\n        : [\n            new ValidationError(\"Number is too small\", {\n              pointer,\n              value: data,\n              code: \"NUMBER_TOO_SMALL\"\n            })\n          ],\n      data\n    };\n  },\n\n  maximum(schema, data, pointer) {\n    if (typeof data !== \"number\") {\n      return { valid: true, errors: [], data };\n    }\n\n    const max = schema.exclusiveMaximum\n      ? schema.maximum - 1e-15\n      : schema.maximum;\n\n    const valid = data <= max;\n\n    return {\n      valid,\n      errors: valid\n        ? []\n        : [\n            new ValidationError(\"Number is too large\", {\n              pointer,\n              value: data,\n              code: \"NUMBER_TOO_LARGE\"\n            })\n          ],\n      data\n    };\n  },\n\n  multipleOf(schema, data, pointer) {\n    if (typeof data !== \"number\") {\n      return { valid: true, errors: [], data };\n    }\n\n    const quotient = data / schema.multipleOf;\n    const areMultiples = Math.abs(quotient - Math.round(quotient)) < 1e-15;\n\n    return {\n      valid: areMultiples,\n      errors: areMultiples\n        ? []\n        : [\n            new ValidationError(\"Number is not a multiple of\", {\n              pointer,\n              value: data,\n              code: \"NUMBER_NOT_MULTIPLE_OF\"\n            })\n          ],\n      data\n    };\n  }\n};\n","import { CompiledSchema, ValidatorFunction } from \"../index\";\nimport { ValidationError, isObject } from \"../utils\";\n\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\n  nullable(schema, data, pointer) {\n    if (schema.nullable && data !== null) {\n      return {\n        valid: false,\n        errors: [\n          new ValidationError(\"Value must be null to be empty\", {\n            pointer,\n            value: data,\n            code: \"VALUE_NOT_NULL\"\n          })\n        ],\n        data\n      };\n    }\n\n    return { valid: true, errors: [], data };\n  },\n\n  oneOf(schema, data, pointer, schemaShieldInstance) {\n    const errors = [];\n    let validCount = 0;\n    let finalData = data;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        const { validator } = schema.oneOf[i] as CompiledSchema;\n        if (!validator) {\n          validCount++;\n          continue;\n        }\n        const validationResult = validator(\n          schema.oneOf[i],\n          finalData,\n          pointer,\n          schemaShieldInstance\n        );\n        if (validationResult.valid) {\n          validCount++;\n        } else {\n          errors.push(...validationResult.errors);\n        }\n        finalData = validationResult.data;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return { valid: true, errors: [], data: finalData };\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(`Value must match exactly one schema in oneOf`, {\n          pointer,\n          value: data,\n          code: \"VALUE_DOES_NOT_MATCH_ONE_OF\"\n        })\n      ],\n      data: finalData\n    };\n  },\n\n  allOf(schema, data, pointer, schemaShieldInstance) {\n    const errors = [];\n    let finalData = data;\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        const { validator } = schema.allOf[i] as CompiledSchema;\n        if (!validator) {\n          continue;\n        }\n\n        const validatorResult = validator(\n          schema.allOf[i],\n          finalData,\n          pointer,\n          schemaShieldInstance\n        );\n\n        if (!validatorResult.valid) {\n          errors.push(...validatorResult.errors);\n        }\n\n        finalData = validatorResult.data;\n      } else {\n        if (typeof schema.allOf[i] === \"boolean\") {\n          if (Boolean(data) !== schema.allOf[i]) {\n            errors.push(\n              new ValidationError(`Value must match all schemas in allOf`, {\n                pointer,\n                value: data,\n                code: \"VALUE_DOES_NOT_MATCH_ALL_OF\"\n              })\n            );\n          }\n          continue;\n        }\n\n        if (data !== schema.allOf[i]) {\n          errors.push(\n            new ValidationError(`Value must match all schemas in allOf`, {\n              pointer,\n              value: data,\n              code: \"VALUE_DOES_NOT_MATCH_ALL_OF\"\n            })\n          );\n        }\n      }\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  },\n\n  anyOf(schema, data, pointer, schemaShieldInstance) {\n    let finalData = data;\n\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        const { validator } = schema.anyOf[i] as CompiledSchema;\n        if (!validator) {\n          return { valid: true, errors: [], data };\n        }\n        const validationResult = validator(\n          schema.anyOf[i],\n          finalData,\n          pointer,\n          schemaShieldInstance\n        );\n        finalData = validationResult.data;\n        if (validationResult.valid) {\n          return { valid: true, errors: [], data: finalData };\n        }\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return { valid: true, errors: [], data: finalData };\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return { valid: true, errors: [], data: finalData };\n        }\n      }\n    }\n\n    return {\n      valid: false,\n      errors: [\n        new ValidationError(`Value must match at least one schema in anyOf`, {\n          pointer,\n          value: data,\n          code: \"VALUE_DOES_NOT_MATCH_ANY_OF\"\n        })\n      ],\n      data\n    };\n  },\n\n  dependencies(schema, data, pointer, schemaShieldInstance) {\n    if (!isObject(data)) {\n      return { valid: true, errors: [], data };\n    }\n\n    const errors = [];\n    let finalData = data;\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            errors.push(\n              new ValidationError(`Dependency ${dependency[i]} is missing`, {\n                pointer,\n                value: data,\n                code: \"DEPENDENCY_MISSING\"\n              })\n            );\n          }\n        }\n        continue;\n      }\n\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        errors.push(\n          new ValidationError(`Dependency ${key} is missing`, {\n            pointer,\n            value: data,\n            code: \"DEPENDENCY_MISSING\"\n          })\n        );\n        continue;\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        errors.push(\n          new ValidationError(`Dependency ${dependency} is missing`, {\n            pointer,\n            value: data,\n            code: \"DEPENDENCY_MISSING\"\n          })\n        );\n        continue;\n      }\n\n      const { validator } = dependency as CompiledSchema;\n      if (!validator) {\n        continue;\n      }\n\n      const validatorResult = validator(\n        dependency,\n        finalData,\n        pointer,\n        schemaShieldInstance\n      );\n      if (!validatorResult.valid) {\n        errors.push(...validatorResult.errors);\n      }\n      finalData = validatorResult.data;\n    }\n\n    return { valid: errors.length === 0, errors, data: finalData };\n  }\n};\n","import { ValidationError, isObject } from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport interface ValidationErrorProps {\n  pointer: string;\n  value: any;\n  code: string;\n}\n\nexport interface Result {\n  valid: boolean;\n  errors: ValidationError[];\n  data: any;\n}\n\nexport interface ValidatorFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    pointer: string,\n    schemaShieldInstance: SchemaShield\n  ): Result;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface CompiledSchema {\n  pointer: string;\n  validator?: ValidatorFunction;\n  type?: string;\n  validators?: ValidatorFunction[];\n  keywords?: Record<string, ValidatorFunction>;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): Result;\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, ValidatorFunction>();\n  formats = new Map<string, FormatFunction>();\n  keywords = new Map<string, ValidatorFunction>();\n\n  constructor() {\n    for (const type in Types) {\n      this.addType(type, Types[type]);\n    }\n\n    for (const keyword in keywords) {\n      this.addKeyword(keyword, keywords[keyword]);\n    }\n\n    for (const format in Formats) {\n      this.addFormat(format, Formats[format]);\n    }\n  }\n\n  addType(name: string, validator: ValidatorFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: ValidatorFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema, \"#\");\n    const schemaShield = this;\n\n    function validate(data: any) {\n      return compiledSchema.validator(compiledSchema, data, \"#\", schemaShield);\n    }\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(\n    schema: Partial<CompiledSchema>,\n    pointer\n  ): CompiledSchema {\n    if (typeof schema !== \"object\" || schema === null) {\n      throw new ValidationError(\"Schema is not an object\", {\n        pointer,\n        value: schema,\n        code: \"SCHEMA_NOT_OBJECT\"\n      });\n    }\n\n    const compiledSchema = {\n      ...schema,\n      pointer\n    };\n\n    if (\"type\" in compiledSchema) {\n      const types = Array.isArray(compiledSchema.type)\n        ? compiledSchema.type\n        : compiledSchema.type.split(\",\").map((t) => t.trim());\n\n      compiledSchema.validators = types\n        .filter((type) => this.types.has(type))\n        .map((type) => this.types.get(type));\n    }\n\n    // Compile schema type\n    const validator: ValidatorFunction = (\n      schema: any,\n      data: any,\n      pointer: string\n    ) => {\n      if (typeof data === \"undefined\") {\n        if (pointer === \"#\") {\n          return {\n            valid: false,\n            errors: [\n              new ValidationError(\"Data is undefined\", {\n                pointer,\n                value: data,\n                code: \"DATA_UNDEFINED\"\n              })\n            ],\n            data\n          };\n        }\n      }\n\n      let finalData = data;\n      const typeErrorsResult = this.validateTypes(schema, finalData, pointer);\n      if (typeErrorsResult.valid === false) {\n        return typeErrorsResult;\n      }\n      finalData = typeErrorsResult.data;\n\n      return this.validateKeywords(schema, finalData, pointer);\n    };\n\n    compiledSchema.validator = validator;\n\n    // Recursively compile sub schemas\n    for (let key in schema) {\n      // Skip type as it is already compiled\n      if (key === \"type\") {\n        continue;\n      }\n\n      if (this.keywords.has(key)) {\n        const validator = this.keywords.get(key);\n        compiledSchema.keywords = compiledSchema.keywords || {};\n        compiledSchema.keywords[key] = validator;\n      }\n\n      if (Array.isArray(schema[key])) {\n        this.handleArraySchema(key, schema, pointer, compiledSchema);\n        continue;\n      }\n\n      if (isObject(schema[key])) {\n        this.handleObjectSchema(key, schema, pointer, compiledSchema);\n        continue;\n      }\n    }\n\n    return compiledSchema;\n  }\n\n  private handleArraySchema(\n    key: string,\n    schema: any,\n    pointer: string,\n    compiledSchema: any\n  ) {\n    compiledSchema[key] = schema[key].map((subSchema, index) => {\n      if (typeof subSchema === \"object\" && subSchema !== null) {\n        if (\"type\" in subSchema) {\n          return this.compileSchema(subSchema, `${pointer}/${key}/${index}`);\n        }\n\n        for (let subKey in subSchema) {\n          if (this.keywords.has(subKey)) {\n            return this.compileSchema(subSchema, `${pointer}/${key}/${index}`);\n          }\n        }\n      }\n      return subSchema;\n    });\n  }\n\n  private handleObjectSchema(\n    key: string,\n    schema: any,\n    pointer: string,\n    compiledSchema: any\n  ) {\n    if (\"type\" in schema[key]) {\n      compiledSchema[key] = this.compileSchema(\n        schema[key],\n        `${pointer}/${key}`\n      );\n      return;\n    }\n\n    for (let subKey in schema[key]) {\n      compiledSchema[key] = compiledSchema[key] || {};\n\n      if (this.keywords.has(subKey)) {\n        compiledSchema[key][subKey] = this.compileSchema(\n          schema[key][subKey],\n          `${pointer}/${subKey}`\n        );\n        continue;\n      }\n\n      if (typeof schema[key][subKey] === \"object\") {\n        if (\"type\" in schema[key][subKey]) {\n          compiledSchema[key][subKey] = this.compileSchema(\n            schema[key][subKey],\n            `${pointer}/${key}/${subKey}`\n          );\n          continue;\n        }\n\n        for (let subSubKey in schema[key][subKey]) {\n          if (this.keywords.has(subSubKey)) {\n            compiledSchema[key][subKey] = this.compileSchema(\n              schema[key][subKey],\n              `${pointer}/${key}/${subKey}`\n            );\n            continue;\n          }\n        }\n      }\n    }\n  }\n\n  private validateTypes(schema: CompiledSchema, data, pointer): Result {\n    if (\n      typeof data === \"undefined\" ||\n      !Array.isArray(schema.validators) ||\n      schema.validators.length === 0\n    ) {\n      return {\n        valid: true,\n        errors: [],\n        data\n      };\n    }\n\n    let errors = [];\n    let finalData = data;\n\n    for (let schemaValidator of schema.validators) {\n      const schemaResult = schemaValidator(schema, data, pointer, this);\n\n      finalData = schemaResult.data;\n\n      if (schemaResult.valid) {\n        return schemaResult;\n      }\n\n      errors = schemaResult.errors;\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      data: finalData\n    };\n  }\n\n  private validateKeywords(schema: CompiledSchema, data, pointer): Result {\n    const errors = [];\n    let finalData = data;\n\n    if (\"keywords\" in schema) {\n      for (let keyword in schema.keywords) {\n        const keywordValidator: ValidatorFunction = schema.keywords[keyword];\n        const keywordResult = keywordValidator(\n          schema,\n          finalData,\n          pointer,\n          this\n        );\n        finalData = keywordResult.data;\n        if (!keywordResult.valid) {\n          errors.push(...keywordResult.errors);\n        }\n      }\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n      data: finalData\n    };\n  }\n}\n"],"mappings":"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"}