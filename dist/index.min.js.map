//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","item","constructor","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","deepClone","result","isCompiledSchema","subSchema","getNamedFunction","fn","defineProperty","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","keywords","required","schema","KeywordError","hasOwnProperty","properties","error","$validate","schemaProp","default","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","match","pattern","patterns","propertyNames","then","else","$ref","definitions","$id","$schema","title","$comment","contentMediaType","contentEncoding","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","minimum","instance","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","oneOf","validCount","dependencies","dependency","const","if","not","types","Map","immutable","type","validator","addType","keyword","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","TypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","executeKeywordValidator","prevValidator","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  name: string;\n  pointer: string;\n  message: string;\n  value: any;\n  code: string;\n  item: string | number;\n\n  constructor(message: string, pointer?: string) {\n    super(message);\n    this.pointer = pointer;\n  }\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  if (isObject(obj)) {\n    const result = {};\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  }\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        KeywordError.item = key;\n        return KeywordError;\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(schema.properties);\n    for (const key of keys) {\n      if (typeof data[key] === \"undefined\") {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          KeywordError.item = key;\n          return KeywordError;\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          error.item = key;\n          return error;\n        }\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  minProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  additionalProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        KeywordError.item = key;\n        return KeywordError;\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          error.item = key;\n          return error;\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              KeywordError.item = key;\n              return KeywordError;\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              error.item = key;\n              return error;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return KeywordError;\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          error.item = key;\n          return error;\n        }\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n  title: false,\n  $comment: false,\n  contentMediaType: false,\n  contentEncoding: false\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return KeywordError;\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            KeywordError.message = \"Array item is not allowed\";\n            KeywordError.item = i;\n            return KeywordError;\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            error.item = i;\n            return error;\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          error.item = i;\n          return error;\n        }\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  maxItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  additionalItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return KeywordError;\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            error.item = i;\n            return error;\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return KeywordError;\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return KeywordError;\n        }\n        return;\n      }\n\n      return KeywordError;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return KeywordError;\n  }\n};\n","import { ValidationError, deepEqual } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  maxLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  pattern(schema, data, KeywordError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return KeywordError;\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  format(schema, data, KeywordError, formatInstance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return;\n    }\n\n    if (typeof formatValidate === \"function\") {\n      if (formatValidate(data)) {\n        return;\n      }\n\n      return KeywordError;\n    }\n\n    return KeywordError;\n  },\n\n  enum(schema, data, KeywordError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return KeywordError;\n  }\n};\n","import { ValidationError, areCloseEnough } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  maximum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return KeywordError;\n    }\n\n    return;\n  }\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport {\n  ValidationError,\n  deepEqual,\n  isCompiledSchema,\n  isObject\n} from \"../utils\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  nullable(schema, data, KeywordError) {\n    if (schema.nullable && data !== null) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  allOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return error;\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return KeywordError;\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return KeywordError;\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return KeywordError;\n  },\n\n  oneOf(schema, data, KeywordError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  dependencies(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            KeywordError.item = i;\n            return KeywordError;\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return KeywordError;\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return KeywordError;\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return error;\n      }\n    }\n\n    return;\n  },\n\n  const(schema, data, KeywordError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return KeywordError;\n  },\n\n  if(schema, data, KeywordError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (schema.then) {\n          return schema.then.$validate(data);\n        }\n      } else if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (schema.then) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, KeywordError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return KeywordError;\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return KeywordError;\n        }\n        return;\n      }\n      return KeywordError;\n    }\n\n    return KeywordError;\n  }\n};\n","import {\n  ValidationError,\n  deepClone,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    error: ValidationError,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, TypeFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, KeywordFunction | false>();\n  immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      this.addType(type, validator);\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: KeywordFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema, \"#\");\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\", \"#\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n      return {\n        data: clonedData,\n        error: error || null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(\n    schema: Partial<CompiledSchema> | any,\n    pointer\n  ): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = {} as CompiledSchema;\n    const TypeError = new ValidationError(`Invalid type`, pointer);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.types.get(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw TypeError;\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (typeValidation(data)) {\n              return;\n            }\n            return TypeError;\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return TypeError;\n          }\n        );\n      }\n    }\n\n    for (const key in schema) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        const KeywordError = new ValidationError(`Invalid ${key}`, pointer);\n        const executeKeywordValidator = (data: any) =>\n          (keywordValidator as KeywordFunction)(\n            compiledSchema,\n            data,\n            KeywordError,\n            this\n          );\n\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              return error ? error : executeKeywordValidator(data);\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            executeKeywordValidator\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(\n          schema[key],\n          `${pointer}/${key}`\n        );\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (this.keywords.has(subKey)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}