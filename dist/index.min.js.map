//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["ValidationError","Error","message","item","keyword","cause","schemaPath","instancePath","data","schema","_getCause","pointer","instancePointer","this","getCause","_getTree","tree","getTree","getPath","getDefinedErrorFunctionForKey","key","KeywordError","getNamedFunction","options","deepEqual","obj","other","Array","isArray","length","i","keys","Object","isObject","deepClone","result","constructor","name","isCompiledSchema","subSchema","fn","defineProperty","value","Formats","match","day","Number","yearStr","monthStr","hourStr","minuteStr","secondStr","timezoneSign","timezoneHourStr","timezoneMinuteStr","year","month","hour","minute","second","timezoneHour","timezoneMinute","uri","test","email","ipv4","ipv6","indexOf","hasIpv4","addressParts","split","ipv4Part","pop","isShortened","ipv6Part","join","isIpv6Valid","hasInvalidChar","hostname","date","isNaN","Date","getTime","regex","RegExp","e","time","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","timestamp","int8","unit8","int16","unit16","int32","unit32","float32","float64","keywords","required","defineError","hasOwnProperty","properties","error","$validate","schemaProp","default","values","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","pattern","patterns","propertyNames","dependencies","dependency","then","else","$ref","definitions","$id","$schema","title","description","$comment","examples","contentMediaType","contentEncoding","discriminator","nullable","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","elements","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","instance","formatValidate","getFormat","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","enum","enumItem","allOf","Boolean","anyOf","oneOf","validCount","const","if","not","types","formats","immutable","type","validator","addType","addKeyword","addFormat","overwrite","getType","getKeyword","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","defineTypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","prevValidator","subKey","index"],"sources":["../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["import { CompiledSchema } from \"./index\";\n\ninterface ErrorTree {\n  message: string;\n  keyword: string;\n  item?: string | number;\n  schemaPath: string;\n  instancePath: string;\n  data?: any;\n  cause?: ErrorTree;\n}\n\nexport class ValidationError extends Error {\n  message: string;\n  item?: string | number;\n  keyword: string;\n  cause?: ValidationError;\n  schemaPath: string = \"\";\n  instancePath: string = \"\";\n  data?: any;\n  schema?: CompiledSchema;\n\n  private _getCause(pointer = \"#\", instancePointer = \"#\"): ValidationError {\n    let schemaPath = `${pointer}/${this.keyword}`;\n    let instancePath = `${instancePointer}`;\n    if (typeof this.item !== \"undefined\") {\n      if (typeof this.item === \"string\" && this.item in this.schema) {\n        schemaPath += `/${this.item}`;\n      }\n      instancePath += `/${this.item}`;\n    }\n\n    this.instancePath = instancePath;\n    this.schemaPath = schemaPath;\n\n    // If there is no cause or the cause is not a ValidationError, return this\n    if (!this.cause || !(this.cause instanceof ValidationError)) {\n      return this;\n    }\n\n    return this.cause._getCause(schemaPath, instancePath);\n  }\n\n  getCause(): ValidationError {\n    return this._getCause();\n  }\n\n  private _getTree(): ErrorTree {\n    const tree: ErrorTree = {\n      message: this.message,\n      keyword: this.keyword,\n      item: this.item,\n      schemaPath: this.schemaPath,\n      instancePath: this.instancePath,\n      data: this.data\n    };\n\n    if (this.cause) {\n      tree.cause = this.cause._getTree();\n    }\n\n    return tree;\n  }\n\n  getTree(): ErrorTree {\n    this.getCause();\n    return this._getTree();\n  }\n\n  getPath() {\n    const cause = this.getCause();\n    return {\n      schemaPath: cause.schemaPath,\n      instancePath: cause.instancePath\n    };\n  }\n}\n\nexport interface DefineErrorOptions {\n  item?: any; // Final item in the schemaPath\n  cause?: ValidationError; // Cause of the error\n  data?: any; // Data that caused the error\n}\n\nexport interface DefineErrorFunction {\n  (message: string, options?: DefineErrorOptions): ValidationError;\n}\n\nexport function getDefinedErrorFunctionForKey(\n  key: string,\n  schema: CompiledSchema\n) {\n  const KeywordError = new ValidationError(`Invalid ${key}`);\n  KeywordError.keyword = key;\n  KeywordError.schema = schema;\n\n  const defineError: DefineErrorFunction = (message, options = {}) => {\n    KeywordError.message = message;\n    KeywordError.item = options.item;\n    KeywordError.cause = options.cause;\n    KeywordError.data = options.data;\n    return KeywordError;\n  };\n\n  return getNamedFunction<DefineErrorFunction>(\n    `defineError_${key}`,\n    defineError\n  );\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  // Is class instance of any kind\n  if (obj && obj.constructor && obj.constructor.name !== \"Object\") {\n    return obj;\n  }\n\n  if (isObject(obj)) {\n    const result = {\n      ...obj\n    };\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import { FormatFunction } from \"./index\";\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  [\"date-time\"](data) {\n    const match = data.match(\n      /^(\\d{4})-(0[0-9]|1[0-2])-(\\d{2})T(0[0-9]|1\\d|2[0-3]):([0-5]\\d):((?:[0-5]\\d|60))(?:.\\d+)?(?:([+-])(0[0-9]|1\\d|2[0-3]):([0-5]\\d)|Z)?$/i\n    );\n\n    if (!match) {\n      return false;\n    }\n\n    let day = Number(match[3]);\n\n    if (match[2] === \"02\" && day > 29) {\n      return false;\n    }\n\n    const [\n      ,\n      yearStr,\n      monthStr,\n      ,\n      hourStr,\n      minuteStr,\n      secondStr,\n      timezoneSign,\n      timezoneHourStr,\n      timezoneMinuteStr\n    ] = match;\n\n    let year = Number(yearStr);\n    let month = Number(monthStr);\n    let hour = Number(hourStr);\n    let minute = Number(minuteStr);\n    let second = Number(secondStr);\n\n    if (timezoneSign === \"-\" || timezoneSign === \"+\") {\n      const timezoneHour = Number(timezoneHourStr);\n      const timezoneMinute = Number(timezoneMinuteStr);\n\n      if (timezoneSign === \"-\") {\n        hour += timezoneHour;\n        minute += timezoneMinute;\n      } else if (timezoneSign === \"+\") {\n        hour -= timezoneHour;\n        minute -= timezoneMinute;\n      }\n\n      if (minute > 59) {\n        hour += 1;\n        minute -= 60;\n      } else if (minute < 0) {\n        hour -= 1;\n        minute += 60;\n      }\n\n      if (hour > 23) {\n        day += 1;\n        hour -= 24;\n      } else if (hour < 0) {\n        day -= 1;\n        hour += 24;\n      }\n\n      if (day > 31) {\n        month += 1;\n        day -= 31;\n      } else if (day < 1) {\n        month -= 1;\n        day += 31;\n      }\n\n      if (month > 12) {\n        year += 1;\n        month -= 12;\n      } else if (month < 1) {\n        year -= 1;\n        month += 12;\n      }\n\n      if (year < 0) {\n        return false;\n      }\n    }\n\n    const daysInMonth = [31, , 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    const maxDays =\n      month === 2\n        ? year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)\n          ? 29\n          : 28\n        : daysInMonth[month - 1];\n\n    if (day > maxDays) {\n      return false;\n    }\n\n    // Leap seconds\n    if (second === 60 && (minute !== 59 || hour !== 23)) {\n      return false;\n    }\n\n    return true;\n  },\n  uri(data) {\n    return /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/.test(data);\n  },\n  email(data) {\n    return /^(?!\\.)(?!.*\\.$)[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,20}(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,21}){0,2}@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,60}[a-z0-9])?){0,3}$/i.test(\n      data\n    );\n  },\n  ipv4(data) {\n    // Matches a string formed by 4 numbers between 0 and 255 separated by dots without leading zeros\n    // /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/\n    return /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n      data\n    );\n  },\n\n  // ipv6: isMyIpValid({ version: 6 }),\n  ipv6(data) {\n    if (data === \"::\") {\n      return true;\n    }\n\n    if (\n      data.indexOf(\":\") === -1 ||\n      /(?:\\s+|:::+|^\\w{5,}|\\w{5}$|^:{1}\\w|\\w:{1}$)/.test(data)\n    ) {\n      return false;\n    }\n\n    const hasIpv4 = data.indexOf(\".\") !== -1;\n    let addressParts = data;\n\n    if (hasIpv4) {\n      addressParts = data.split(\":\");\n      const ipv4Part = addressParts.pop();\n      if (\n        !/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n          ipv4Part\n        )\n      ) {\n        return false;\n      }\n    }\n\n    const isShortened = data.indexOf(\"::\") !== -1;\n    const ipv6Part = hasIpv4 ? addressParts.join(\":\") : data;\n\n    if (isShortened) {\n      if (ipv6Part.split(\"::\").length - 1 > 1) {\n        return false;\n      }\n\n      if (!/^[0-9a-fA-F:.]*$/.test(ipv6Part)) {\n        return false;\n      }\n\n      return /^(?:(?:(?:[0-9a-fA-F]{1,4}(?::|$)){1,6}))|(?:::(?:[0-9a-fA-F]{1,4})){0,5}$/.test(\n        ipv6Part\n      );\n    }\n\n    const isIpv6Valid =\n      /^(?:(?:[0-9a-fA-F]{1,4}:){7}(?:[0-9a-fA-F]{1,4}|:))$/.test(ipv6Part);\n\n    const hasInvalidChar = /(?:[0-9a-fA-F]{5,}|\\D[0-9a-fA-F]{3}:)/.test(\n      ipv6Part\n    );\n\n    if (hasIpv4) {\n      return isIpv6Valid || !hasInvalidChar;\n    }\n\n    return isIpv6Valid && !hasInvalidChar;\n  },\n\n  hostname(data) {\n    return /^[a-z0-9][a-z0-9-]{0,62}(?:\\.[a-z0-9][a-z0-9-]{0,62})*[a-z0-9]$/i.test(\n      data\n    );\n  },\n  date(data) {\n    if (/^(\\d{4})-(\\d{2})-(\\d{2})$/.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return /^\\/(?:[^~]|~0|~1)*$/.test(data);\n  },\n  \"relative-json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/.test(data);\n  },\n  time(data) {\n    return /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/.test(\n      data\n    );\n  },\n  \"uri-reference\"(data) {\n    if (/\\\\/.test(data)) {\n      return false;\n    }\n\n    return /^(([^:/?#]+):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#((?![^#]*\\\\)[^#]*))?/i.test(\n      data\n    );\n  },\n  \"uri-template\"(data) {\n    return /^(?:(?:https?:\\/\\/[\\w.-]+)?\\/?)?[\\w- ;,.\\/?%&=]*(?:\\{[\\w-]+(?::\\d+)?\\}[\\w- ;,.\\/?%&=]*)*\\/?$/.test(\n      data\n    );\n  },\n\n  // Not supported yet\n  duration: false,\n  uuid: false,\n  \"idn-email\": false,\n  \"idn-hostname\": false,\n  iri: false,\n  \"iri-reference\": false\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction | false> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  },\n\n  // Not implemented yet\n  timestamp: false,\n  int8: false,\n  unit8: false,\n  int16: false,\n  unit16: false,\n  int32: false,\n  unit32: false,\n  float32: false,\n  float64: false\n\n\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return defineError(\"Required property is missing\", {\n          item: key,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key of Object.keys(schema.properties)) {\n      if (!data.hasOwnProperty(key)) {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          return defineError(\"Property is not allowed\", {\n            item: key,\n            data: data[key]\n          });\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          return defineError(\"Property is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  values(schema, data, defineError) {\n    if (!isObject(data) || !isCompiledSchema(schema.values)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    for (const key of keys) {\n      const error = schema.values.$validate(data[key]);\n      if (error) {\n        return defineError(\"Property is invalid\", {\n          item: key,\n          cause: error,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return defineError(\"Too many properties\", { data });\n  },\n\n  minProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return defineError(\"Too few properties\", { data });\n  },\n\n  additionalProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return defineError(\"Additional properties are not allowed\", {\n          item: key,\n          data: data[key]\n        });\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          return defineError(\"Additional properties are invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              return defineError(\"Property is not allowed\", {\n                item: key,\n                data: data[key]\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              return defineError(\"Property is invalid\", {\n                item: key,\n                cause: error,\n                data: data[key]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return defineError(\"Properties are not allowed\", { data });\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          return defineError(\"Property name is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  dependencies(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return defineError(\"Dependency is not satisfied\", {\n              item: i,\n              data: dependency[i]\n            });\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return defineError(\"Dependency is not satisfied\", {\n          cause: error,\n          data\n        });\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n\n  // Metadata keywords (not used as a function)\n  title: false,\n  description: false,\n  $comment: false,\n  examples: false,\n  contentMediaType: false,\n  contentEncoding: false,\n\n  // Not supported Open API keywords\n  discriminator: false,\n  nullable: false\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return defineError(\"Array items are not allowed\", { data });\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            return defineError(\"Array item is not allowed\", {\n              item: i,\n              data: data[i]\n            });\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          return defineError(\"Array item is invalid\", {\n            item: i,\n            cause: error,\n            data: data[i]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  elements(schema, data, defineError) {\n    if (!Array.isArray(data) || !isCompiledSchema(schema.elements)) {\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.elements.$validate(data[i]);\n      if (error) {\n        return defineError(\"Array item is invalid\", {\n          item: i,\n          cause: error,\n          data: data[i]\n        });\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return defineError(\"Array is too short\", { data });\n  },\n\n  maxItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return defineError(\"Array is too long\", { data });\n  },\n\n  additionalItems(schema, data, defineError) {\n    if (!schema.items || isObject(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return defineError(\"Array is too long\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return defineError(\"Array items are not unique\", { data: item });\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return defineError(\"Array must contain at least one item\", { data });\n        }\n        return;\n      }\n\n      return defineError(\"Array must not contain any items\", { data });\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return defineError(\"Array must contain at least one item\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return defineError(\"Value is shorter than the minimum length\", { data });\n  },\n\n  maxLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return defineError(\"Value is longer than the maximum length\", { data });\n  },\n\n  pattern(schema, data, defineError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return defineError(\"Invalid regular expression\", { data });\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the pattern\", { data });\n  },\n\n  // Take into account that if we receive a format that is not defined, we\n  // will not throw an error, we just ignore it.\n  format(schema, data, defineError, instance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = instance.getFormat(schema.format);\n    if (!formatValidate || formatValidate(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the format\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\nimport { areCloseEnough } from \"../utils\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return defineError(\"Value is less than the minimum\", { data });\n    }\n\n    return;\n  },\n\n  maximum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return defineError(\"Value is greater than the maximum\", { data });\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return defineError(\"Value is not a multiple of the multipleOf\", { data });\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return defineError(\"Value is less than or equal to the exclusiveMinimum\");\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return defineError(\n        \"Value is greater than or equal to the exclusiveMaximum\",\n        { data }\n      );\n    }\n\n    return;\n  }\n};\n","import { deepEqual, isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  enum(schema, data, defineError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not one of the allowed values\", { data });\n  },\n\n  allOf(schema, data, defineError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return defineError(\"Value is not valid\", { cause: error, data });\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return defineError(\"Value is not valid\", { data });\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return defineError(\"Value is not valid\", { data });\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, defineError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  oneOf(schema, data, defineError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  const(schema, data, defineError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  if(schema, data, defineError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (isCompiledSchema(schema.then)) {\n          return schema.then.$validate(data);\n        }\n      } else if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    if (!isCompiledSchema(schema.if)) {\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (isCompiledSchema(schema.then)) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, defineError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return defineError(\"Value is not valid\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return defineError(\"Value is not valid\", { cause: error, data });\n        }\n        return;\n      }\n      return defineError(\"Value is not valid\", { data });\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  }\n};\n","import {\n  DefineErrorFunction,\n  ValidationError,\n  deepClone,\n  getDefinedErrorFunctionForKey,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport { ValidationError } from \"./utils\";\n\nexport { deepClone } from \"./utils\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    defineError: DefineErrorFunction,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  private types: Record<string, TypeFunction | false> = {};\n  private formats: Record<string, FormatFunction | false> = {};\n  private keywords: Record<string, KeywordFunction | false> = {};\n  private immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      if (validator) {\n        this.addType(type, validator);\n      }\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction, overwrite = false) {\n    if (this.types[name] && !overwrite) {\n      throw new ValidationError(`Type \"${name}\" already exists`);\n    }\n    this.types[name] = validator;\n  }\n\n  getType(type: string): TypeFunction | false {\n    return this.types[type];\n  }\n\n  addFormat(name: string, validator: FormatFunction, overwrite = false) {\n    if (this.formats[name] && !overwrite) {\n      throw new ValidationError(`Format \"${name}\" already exists`);\n    }\n    this.formats[name] = validator;\n  }\n\n  getFormat(format: string): FormatFunction | false {\n    return this.formats[format];\n  }\n\n  addKeyword(name: string, validator: KeywordFunction, overwrite = false) {\n    if (this.keywords[name] && !overwrite) {\n      throw new ValidationError(`Keyword \"${name}\" already exists`);\n    }\n    this.keywords[name] = validator;\n  }\n\n  getKeyword(keyword: string): KeywordFunction | false {\n    return this.keywords[keyword];\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = deepClone(schema) as CompiledSchema;\n    const defineTypeError = getDefinedErrorFunctionForKey(\"type\", schema);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.getType(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw defineTypeError(\"Invalid type for schema\", { data: schema.type });\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (!typeValidation(data)) {\n              return defineTypeError(\"Invalid type\", { data });\n            }\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      }\n    }\n\n    for (const key of Object.keys(schema)) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.getKeyword(key);\n      if (keywordValidator) {\n        const defineError = getDefinedErrorFunctionForKey(key, schema[key]);\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              return (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                defineError,\n                this\n              );\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) =>\n              (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                defineError,\n                this\n              )\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        // If the key is properties go through each property and try to compile it as a schema\n        if (key === \"properties\") {\n          for (const subKey of Object.keys(schema[key])) {\n            compiledSchema[key][subKey] = this.compileSchema(\n              schema[key][subKey]\n            );\n          }\n          continue;\n        }\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (subKey in this.keywords) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}