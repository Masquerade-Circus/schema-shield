//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","constructor","options","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","notImplementedFormat","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","schema","valid","errors","array","string","number","integer","Number","isInteger","boolean","null","keywords","required","hasOwnProperty","push","properties","schemaShieldInstance","finalData","default","validator","validatorResult","maxProperties","minProperties","additionalProperties","patternProperties","match","pattern","patterns","propertyNames","items","schemaItems","schemaItemsLength","dataLength","itemsLength","Math","min","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Map","item","itemStr","sorted","fromEntries","entries","sort","a","b","localeCompare","JSON","stringify","has","set","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","join","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","areMultiples","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","validationResult","oneOf","validCount","dependencies","dependency","const","contains","if","then","thenValidator","thenResult","else","elseValidator","elseResult","ifValidator","not","types","forEach","type","addType","keyword","addKeyword","addFormat","compile","compiledSchema","compileSchema","validate","isSchemaLike","map","t","trim","validators","filter","typeErrorsResult","validateTypes","validateKeywords","handleSubSchema","subSchema","index","subKey","schemaValidator","schemaResult","keywordResult","keywordValidator","isSchemaOrKeywordPresent"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { SchemaShield, ValidationErrorProps } from './index';\r\n\r\nexport class ValidationError extends Error {\r\n  name: string;\r\n  pointer: string;\r\n  message: string;\r\n  value: any;\r\n  code: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    options: ValidationErrorProps = {\r\n      pointer: '',\r\n      value: null,\r\n      code: '',\r\n    }\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n    this.pointer = options.pointer;\r\n    this.message = message;\r\n    this.value = options.value;\r\n    this.code = options.code;\r\n  }\r\n}\r\n\r\nexport const defaultValidator = (schema, data, pointer) => {\r\n  return [\r\n    new ValidationError('No validator for this schema', {\r\n      pointer,\r\n      value: data,\r\n      code: 'NO_VALIDATOR',\r\n    }),\r\n  ];\r\n};\r\n\r\nexport function deepEqual(obj: Array<any> | Record<string, any>, other: Array<any> | Record<string, any>) {\r\n  if (Array.isArray(obj) && Array.isArray(other)) {\r\n    if (obj.length !== other.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < obj.length; i++) {\r\n      if (!deepEqual(obj[i], other[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof obj === 'object' && typeof other === 'object') {\r\n    if (obj === null || other === null) {\r\n      return obj === other;\r\n    }\r\n\r\n    const keys = Object.keys(obj);\r\n    if (keys.length !== Object.keys(other).length) {\r\n      return false;\r\n    }\r\n\r\n    for (const key of keys) {\r\n      if (!deepEqual(obj[key], other[key])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return obj === other;\r\n}\r\n\r\nexport function isObject(data) {\r\n  return typeof data === 'object' && data !== null && !Array.isArray(data);\r\n}\r\n\r\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\r\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\r\n}\r\n\r\nexport function getUTF16Length(str) {\r\n  let length = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const codePoint = str.codePointAt(i);\r\n    if (codePoint > 0xffff) {\r\n      i++;\r\n    }\r\n    length++;\r\n  }\r\n  return length;\r\n}\r\n\r\nexport function deepClone(obj: any): any {\r\n  if (Array.isArray(obj)) {\r\n    const result = [];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      result[i] = deepClone(obj[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  if (isObject(obj)) {\r\n    const result = {};\r\n    for (const key in obj) {\r\n      result[key] = deepClone(obj[key]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return obj;\r\n}\r\n","import isMyIpValid from 'is-my-ip-valid';\r\nimport { FormatFunction } from './index';\r\nimport { ValidationError } from './utils';\r\n\r\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\r\nconst RegExps = {\r\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\r\n  email:\r\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\r\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\r\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\r\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\r\n};\r\n\r\nfunction notImplementedFormat(data: any) {\r\n  throw new ValidationError(`Format \"${data}\" is not implemented yet. Please open an issue on GitHub.`);\r\n  return false;\r\n}\r\n\r\nexport const Formats: Record<string, FormatFunction> = {\r\n  ['date-time'](data) {\r\n    const upperCaseData = data.toUpperCase();\r\n    if (!RegExps['date-time'].test(upperCaseData)) {\r\n      return false;\r\n    }\r\n\r\n    const date = new Date(upperCaseData);\r\n    return !isNaN(date.getTime());\r\n  },\r\n  uri(data) {\r\n    return RegExps.uri.test(data);\r\n  },\r\n  email(data) {\r\n    if (!RegExps.email.test(data)) {\r\n      return false;\r\n    }\r\n\r\n    const [local, domain] = data.split('@');\r\n\r\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  ipv4: isMyIpValid({ version: 4 }),\r\n  ipv6: isMyIpValid({ version: 6 }),\r\n\r\n  hostname(data) {\r\n    return RegExps.hostname.test(data);\r\n  },\r\n  date(data) {\r\n    if (typeof data !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    if (RegExps.date.test(data) === false) {\r\n      return false;\r\n    }\r\n\r\n    return !isNaN(new Date(data).getTime());\r\n  },\r\n  regex(data) {\r\n    try {\r\n      new RegExp(data);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  'json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['json-pointer'].test(data);\r\n  },\r\n  'relative-json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['relative-json-pointer'].test(data);\r\n  },\r\n  time(data) {\r\n    return RegExps.time.test(data);\r\n  },\r\n\r\n  // Not supported yet\r\n\r\n  duration: notImplementedFormat,\r\n  'idn-email': notImplementedFormat,\r\n  'idn-hostname': notImplementedFormat,\r\n  uuid: notImplementedFormat,\r\n  'uri-reference': notImplementedFormat,\r\n  iri: notImplementedFormat,\r\n  'iri-reference': notImplementedFormat,\r\n  'uri-template': notImplementedFormat,\r\n};\r\n","import { isObject, ValidationError } from './utils';\r\nimport { ValidatorFunction } from './index';\r\n\r\nexport const Types: Record<string, ValidatorFunction> = {\r\n  object(schema, data, pointer) {\r\n    if (isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an object', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_OBJECT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  array(schema, data, pointer) {\r\n    if (Array.isArray(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null && 'length' in data) {\r\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\r\n      const keys = Object.keys(data);\r\n      if (keys.length > 0 && (keys[0] !== '0' || keys.length !== data.length)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Data is not an array', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NOT_AN_ARRAY',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an array', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_ARRAY',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  string(schema, data, pointer) {\r\n    if (typeof data === 'string') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a string', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_STRING',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  number(schema, data, pointer) {\r\n    if (typeof data === 'number') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a number', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_NUMBER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  integer(schema, data, pointer) {\r\n    if (typeof data === 'number' && Number.isInteger(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an integer', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_INTEGER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  boolean(schema, data, pointer) {\r\n    // Check if data is a boolean like value\r\n    if (typeof data === 'boolean') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a boolean', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_BOOLEAN',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  null(schema, data, pointer) {\r\n    if (data === null) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not null', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_NULL',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\r\nimport { NumberKeywords } from \"./keywords/number-keywords\";\r\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\r\nimport { OtherKeywords } from \"./keywords/other-keywords\";\r\nimport { StringKeywords } from \"./keywords/string-keywords\";\r\nimport { ValidatorFunction } from \"./index\";\r\n\r\nexport const keywords: Record<string, ValidatorFunction> = {\r\n  ...ObjectKeywords,\r\n  ...ArrayKeywords,\r\n  ...StringKeywords,\r\n  ...NumberKeywords,\r\n  ...OtherKeywords\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ObjectKeywords: Record<string, ValidatorFunction> = {\r\n  // Object\r\n  required(schema, data, pointer) {\r\n    if (!isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 0; i < schema.required.length; i++) {\r\n      const key = schema.required[i];\r\n      if (!data.hasOwnProperty(key)) {\r\n        errors.push(\r\n          new ValidationError('Missing required property', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'MISSING_REQUIRED_PROPERTY',\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data };\r\n  },\r\n\r\n  properties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    for (let key in schema.properties) {\r\n      if (!data.hasOwnProperty(key) || typeof data[key] === 'undefined') {\r\n        if (isObject(schema.properties[key]) && 'default' in schema.properties[key]) {\r\n          finalData[key] = schema.properties[key].default;\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      if (typeof schema.properties[key] === 'boolean') {\r\n        if (schema.properties[key] === false) {\r\n          errors.push(\r\n            new ValidationError('Property is not allowed', {\r\n              pointer: `${pointer}/${key}`,\r\n              value: data[key],\r\n              code: 'PROPERTY_NOT_ALLOWED',\r\n            })\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.properties[key] as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(schema.properties[key], finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  maxProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too many properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_MANY_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  minProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too few properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_FEW_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const keys = Object.keys(data);\r\n    for (const key of keys) {\r\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      if (schema.patternProperties) {\r\n        let match = false;\r\n        for (const pattern in schema.patternProperties) {\r\n          if (new RegExp(pattern, 'u').test(key)) {\r\n            match = true;\r\n            break;\r\n          }\r\n        }\r\n        if (match) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (schema.additionalProperties === false) {\r\n        errors.push(\r\n          new ValidationError('Additional property not allowed', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'ADDITIONAL_PROPERTY_NOT_ALLOWED',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.additionalProperties as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(schema.additionalProperties, finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const patterns = Object.keys(schema.patternProperties);\r\n    for (const pattern of patterns) {\r\n      const regex = new RegExp(pattern, 'u');\r\n\r\n      if (typeof schema.patternProperties[pattern] === 'boolean') {\r\n        if (schema.patternProperties[pattern] === false) {\r\n          for (const key in finalData) {\r\n            if (regex.test(key)) {\r\n              errors.push(\r\n                new ValidationError('Property is not allowed', {\r\n                  pointer: `${pointer}/${key}`,\r\n                  value: data[key],\r\n                  code: 'PROPERTY_NOT_ALLOWED',\r\n                })\r\n              );\r\n            }\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const { validator } = schema.patternProperties[pattern] as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const keys = Object.keys(finalData);\r\n      for (const key of keys) {\r\n        if (regex.test(key)) {\r\n          const validatorResult = validator(schema.patternProperties[pattern], finalData[key], `${pointer}/${key}`, schemaShieldInstance);\r\n\r\n          finalData[key] = validatorResult.data;\r\n\r\n          if (!validatorResult.valid) {\r\n            errors.push(...validatorResult.errors);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  propertyNames(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.propertyNames === 'boolean') {\r\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Property names are not allowed', {\r\n              pointer,\r\n              value: data,\r\n              code: 'PROPERTY_NAMES_NOT_ALLOWED',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const { validator } = schema.propertyNames as CompiledSchema;\r\n    if (!validator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    for (let key in finalData) {\r\n      const validatorResult = validator(schema.propertyNames, key, pointer, schemaShieldInstance);\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\r\n  items(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    const finalData = [...data];\r\n    const schemaItems = schema.items;\r\n    const schemaItemsLength = Array.isArray(schemaItems) ? schemaItems.length : 0;\r\n    const dataLength = data.length;\r\n\r\n    if (Array.isArray(schemaItems)) {\r\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\r\n      for (let i = 0; i < itemsLength; i++) {\r\n        if (typeof schemaItems[i] === 'boolean') {\r\n          if (schemaItems[i] === false && typeof data[i] !== 'undefined') {\r\n            errors.push(\r\n              new ValidationError('Array item is not allowed', {\r\n                pointer: `${pointer}/${i}`,\r\n                value: data[i],\r\n                code: 'ARRAY_ITEM_NOT_ALLOWED',\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        const { validator } = schemaItems[i] as CompiledSchema;\r\n        if (!validator) {\r\n          continue;\r\n        }\r\n        const validatorResult = validator(schemaItems[i], finalData[i], `${pointer}/${i}`, schemaShieldInstance);\r\n\r\n        finalData[i] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n      }\r\n    } else if (typeof schemaItems === 'boolean') {\r\n      if (schemaItems === false && dataLength > 0) {\r\n        errors.push(\r\n          new ValidationError('Array is not allowed', {\r\n            pointer,\r\n            value: data,\r\n            code: 'ARRAY_NOT_ALLOWED',\r\n          })\r\n        );\r\n      }\r\n    } else {\r\n      const { validator } = schemaItems as CompiledSchema;\r\n      if (!validator) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n\r\n      for (let i = 0; i < dataLength; i++) {\r\n        const validatorErrors = validator(schemaItems, finalData[i], `${pointer}/${i}`, schemaShieldInstance);\r\n\r\n        finalData[i] = validatorErrors.data;\r\n\r\n        if (!validatorErrors.valid) {\r\n          errors.push(...validatorErrors.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  minItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Array is too short', {\r\n          pointer,\r\n          value: data,\r\n          code: 'ARRAY_TOO_SHORT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Array is too long', {\r\n          pointer,\r\n          value: data,\r\n          code: 'ARRAY_TOO_LONG',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (schema.additionalItems === false) {\r\n      if (data.length > schema.items.length) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Array has too many items', {\r\n              pointer,\r\n              value: data,\r\n              code: 'ARRAY_TOO_MANY_ITEMS',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = [...data];\r\n    if (typeof schema.additionalItems === 'object') {\r\n      for (let i = schema.items.length; i < finalData.length; i++) {\r\n        const { validator } = schema.additionalItems as CompiledSchema;\r\n        const validatorResult = validator(schema.additionalItems, finalData[i], `${pointer}/${i}`, schemaShieldInstance);\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n        finalData[i] = validatorResult.data;\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  uniqueItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || !schema.uniqueItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const unique = new Map();\r\n\r\n    for (const item of data) {\r\n      let itemStr;\r\n\r\n      // Change string to \"string\" to avoid false positives\r\n      if (typeof item === 'string') {\r\n        itemStr = `\"${item}\"`;\r\n\r\n        // Sort object keys to avoid false positives\r\n      } else if (isObject(item)) {\r\n        const sorted = Object.fromEntries(Object.entries(item).sort(([a], [b]) => a.localeCompare(b)));\r\n        itemStr = JSON.stringify(sorted);\r\n      } else if (Array.isArray(item)) {\r\n        itemStr = JSON.stringify(item);\r\n      } else {\r\n        itemStr = item;\r\n      }\r\n\r\n      if (unique.has(itemStr)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Array items are not unique', {\r\n              pointer,\r\n              value: data,\r\n              code: 'ARRAY_ITEMS_NOT_UNIQUE',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      } else {\r\n        unique.set(itemStr, true);\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n};\r\n","import { ValidationError, deepEqual } from '../utils';\r\n\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const StringKeywords: Record<string, ValidatorFunction> = {\r\n  minLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length >= schema.minLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too short', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_SHORT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length <= schema.maxLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too long', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_LONG',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  pattern(schema, data, pointer) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const patternRegexp = new RegExp(schema.pattern, 'u');\r\n\r\n    if (patternRegexp instanceof RegExp === false) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Pattern is not a valid regular expression', {\r\n            pointer,\r\n            value: data,\r\n            code: 'PATTERN_IS_NOT_REGEXP',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = patternRegexp.test(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('String does not match pattern', {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_PATTERN',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  format(schema, data, pointer, formatInstance) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const formatValidate = formatInstance.formats.get(schema.format);\r\n    if (!formatValidate) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Unknown format ${schema.format}`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'UNKNOWN_FORMAT',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = formatValidate(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError(`String does not match format ${schema.format}`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_FORMAT',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  enum(schema, data, pointer) {\r\n    // Check if data is an array or an object\r\n    const isArray = Array.isArray(data);\r\n    const isObject = typeof data === 'object' && data !== null;\r\n\r\n    for (let i = 0; i < schema.enum.length; i++) {\r\n      const enumItem = schema.enum[i];\r\n\r\n      // Simple equality check\r\n      if (enumItem === data) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n\r\n      // If data is an array or an object, check for deep equality\r\n      if ((isArray && Array.isArray(enumItem)) || (isObject && typeof enumItem === 'object' && enumItem !== null)) {\r\n        if (deepEqual(enumItem, data)) {\r\n          return { valid: true, errors: [], data };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be one of ${schema.enum.join(', ')}`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_IN_ENUM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { areCloseEnough, ValidationError } from '../utils';\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\r\n  minimum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    let min = schema.minimum;\r\n    if (typeof schema.exclusiveMinimum === 'number') {\r\n      min = schema.exclusiveMinimum + 1e-15;\r\n    } else if (schema.exclusiveMinimum === true) {\r\n      min += 1e-15;\r\n    }\r\n\r\n    const valid = data >= min;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maximum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    let max = schema.maximum;\r\n    if (typeof schema.exclusiveMaximum === 'number') {\r\n      max = schema.exclusiveMaximum - 1e-15;\r\n    } else if (schema.exclusiveMaximum === true) {\r\n      max -= 1e-15;\r\n    }\r\n\r\n    const valid = data <= max;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  multipleOf(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const quotient = data / schema.multipleOf;\r\n\r\n    // Detect overflow handling in JS\r\n    if (!isFinite(quotient)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const areMultiples = areCloseEnough(quotient, Math.round(quotient));\r\n\r\n    return {\r\n      valid: areMultiples,\r\n      errors: areMultiples\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is not a multiple of', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_NOT_MULTIPLE_OF',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMinimum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMinimum !== 'number' || 'minimum' in schema) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data > schema.exclusiveMinimum + 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMaximum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMaximum !== 'number' || 'maximum' in schema) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data < schema.exclusiveMaximum - 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject, deepEqual } from '../utils';\r\n\r\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\r\n  nullable(schema, data, pointer) {\r\n    if (schema.nullable && data !== null) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Value must be null to be empty', {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_NOT_NULL',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  allOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.allOf.length; i++) {\r\n      if (isObject(schema.allOf[i])) {\r\n        const { validator } = schema.allOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          continue;\r\n        }\r\n\r\n        const validatorResult = validator(schema.allOf[i], finalData, pointer, schemaShieldInstance);\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n\r\n        finalData = validatorResult.data;\r\n      } else {\r\n        if (typeof schema.allOf[i] === 'boolean') {\r\n          if (Boolean(data) !== schema.allOf[i]) {\r\n            errors.push(\r\n              new ValidationError(`Value must match all schemas in allOf`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data !== schema.allOf[i]) {\r\n          errors.push(\r\n            new ValidationError(`Value must match all schemas in allOf`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  anyOf(schema, data, pointer, schemaShieldInstance) {\r\n    let finalData = data;\r\n\r\n    for (let i = 0; i < schema.anyOf.length; i++) {\r\n      if (isObject(schema.anyOf[i])) {\r\n        const { validator } = schema.anyOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          return { valid: true, errors: [], data };\r\n        }\r\n        const validationResult = validator(schema.anyOf[i], finalData, pointer, schemaShieldInstance);\r\n        finalData = validationResult.data;\r\n        if (validationResult.valid) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      } else {\r\n        if (typeof schema.anyOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.anyOf[i]) {\r\n            return { valid: true, errors: [], data: finalData };\r\n          }\r\n        }\r\n\r\n        if (data === schema.anyOf[i]) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match at least one schema in anyOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ANY_OF',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  oneOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let validCount = 0;\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.oneOf.length; i++) {\r\n      if (isObject(schema.oneOf[i])) {\r\n        const { validator } = schema.oneOf[i] as CompiledSchema;\r\n        if (!validator) {\r\n          validCount++;\r\n          continue;\r\n        }\r\n        const validationResult = validator(schema.oneOf[i], finalData, pointer, schemaShieldInstance);\r\n        if (validationResult.valid) {\r\n          validCount++;\r\n        } else {\r\n          errors.push(...validationResult.errors);\r\n        }\r\n        finalData = validationResult.data;\r\n      } else {\r\n        if (typeof schema.oneOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.oneOf[i]) {\r\n            validCount++;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data === schema.oneOf[i]) {\r\n          validCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validCount === 1) {\r\n      return { valid: true, errors: [], data: finalData };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match exactly one schema in oneOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ONE_OF',\r\n        }),\r\n      ],\r\n      data: finalData,\r\n    };\r\n  },\r\n\r\n  dependencies(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (const key in schema.dependencies) {\r\n      if (key in data === false) {\r\n        continue;\r\n      }\r\n\r\n      const dependency = schema.dependencies[key];\r\n      if (Array.isArray(dependency)) {\r\n        for (let i = 0; i < dependency.length; i++) {\r\n          if (!(dependency[i] in data)) {\r\n            errors.push(\r\n              new ValidationError(`Dependency ${dependency[i]} is missing`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'DEPENDENCY_MISSING',\r\n              })\r\n            );\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'boolean') {\r\n        if (dependency) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${key} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'string') {\r\n        if (dependency in data) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${dependency} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const { validator } = dependency as CompiledSchema;\r\n      if (!validator) {\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = validator(dependency, finalData, pointer, schemaShieldInstance);\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n      finalData = validatorResult.data;\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  const(schema, data, pointer) {\r\n    if (\r\n      data === schema.const ||\r\n      (isObject(data) && isObject(schema.const) && deepEqual(data, schema.const)) ||\r\n      (Array.isArray(data) && Array.isArray(schema.const) && deepEqual(data, schema.const))\r\n    ) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be equal to const`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_EQUAL_TO_CONST',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  contains(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.contains === 'boolean') {\r\n      if (schema.contains) {\r\n        const valid = data.length > 0;\r\n        return {\r\n          valid,\r\n          errors: valid\r\n            ? []\r\n            : [\r\n                new ValidationError(`Value must contain at least one item`, {\r\n                  pointer,\r\n                  value: data,\r\n                  code: 'VALUE_DOES_NOT_CONTAIN_ITEM',\r\n                }),\r\n              ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not contain any items`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_CONTAINS_ITEM',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const { validator } = schema.contains as CompiledSchema;\r\n    if (!validator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const validatorResult = validator(schema.contains, data[i], `${pointer}/${i}`, schemaShieldInstance);\r\n      if (validatorResult.valid) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must contain at least one item that matches the contains schema`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_CONTAIN_MATCHING_ITEM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  if(schema, data, pointer, schemaShieldInstance) {\r\n    if ('then' in schema === false && 'else' in schema === false) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.if === 'boolean') {\r\n      if (schema.if) {\r\n        if (schema.then) {\r\n          const { validator: thenValidator } = schema.then as CompiledSchema;\r\n          if (thenValidator) {\r\n            const thenResult = thenValidator(schema.then, data, pointer, schemaShieldInstance);\r\n            if (!thenResult.valid) {\r\n              return thenResult;\r\n            }\r\n          }\r\n        }\r\n      } else if (schema.else) {\r\n        const { validator: elseValidator } = schema.else as CompiledSchema;\r\n        if (elseValidator) {\r\n          const elseResult = elseValidator(schema.else, data, pointer, schemaShieldInstance);\r\n          if (!elseResult.valid) {\r\n            return elseResult;\r\n          }\r\n        }\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const { validator: ifValidator } = schema.if as CompiledSchema;\r\n    if (!ifValidator) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const ifResult = ifValidator(schema.if, data, pointer, schemaShieldInstance);\r\n    if (ifResult.valid) {\r\n      if (schema.then) {\r\n        const { validator: thenValidator } = schema.then as CompiledSchema;\r\n        if (thenValidator) {\r\n          const thenResult = thenValidator(schema.then, data, pointer, schemaShieldInstance);\r\n          if (!thenResult.valid) {\r\n            return thenResult;\r\n          }\r\n        }\r\n      }\r\n    } else if (schema.else) {\r\n      const { validator: elseValidator } = schema.else as CompiledSchema;\r\n      if (elseValidator) {\r\n        const elseResult = elseValidator(schema.else, data, pointer, schemaShieldInstance);\r\n        if (!elseResult.valid) {\r\n          return elseResult;\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  not(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof schema.not === 'boolean') {\r\n      if (schema.not) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError(`Value must not be valid`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_IS_VALID',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const { validator } = schema.not as CompiledSchema;\r\n    if (!validator) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not be valid`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_IS_VALID',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const validatorResult = validator(schema.not, data, pointer, schemaShieldInstance);\r\n    if (validatorResult.valid) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not be valid`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_IS_VALID',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n};\r\n","import { ValidationError, isObject } from './utils';\r\n\r\nimport { Formats } from './formats';\r\nimport { Types } from './types';\r\nimport { keywords } from './keywords';\r\n\r\nexport interface ValidationErrorProps {\r\n  pointer: string;\r\n  value: any;\r\n  code: string;\r\n}\r\n\r\nexport interface Result {\r\n  valid: boolean;\r\n  errors: ValidationError[];\r\n  data: any;\r\n}\r\n\r\nexport interface ValidatorFunction {\r\n  (schema: CompiledSchema, data: any, pointer: string, schemaShieldInstance: SchemaShield): Result;\r\n}\r\n\r\nexport interface FormatFunction {\r\n  (data: any): boolean;\r\n}\r\n\r\nexport interface CompiledSchema {\r\n  pointer: string;\r\n  validator?: ValidatorFunction;\r\n  type?: string;\r\n  validators?: ValidatorFunction[];\r\n  keywords?: Record<string, ValidatorFunction>;\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Validator {\r\n  (data: any): Result;\r\n  compiledSchema: CompiledSchema;\r\n}\r\n\r\nexport class SchemaShield {\r\n  types = new Map<string, ValidatorFunction>();\r\n  formats = new Map<string, FormatFunction>();\r\n  keywords = new Map<string, ValidatorFunction>();\r\n\r\n  constructor() {\r\n    Object.keys(Types).forEach((type) => {\r\n      this.addType(type, Types[type]);\r\n    });\r\n\r\n    Object.keys(keywords).forEach((keyword) => {\r\n      this.addKeyword(keyword, keywords[keyword]);\r\n    });\r\n\r\n    Object.keys(Formats).forEach((format) => {\r\n      this.addFormat(format, Formats[format]);\r\n    });\r\n  }\r\n\r\n  addType(name: string, validator: ValidatorFunction) {\r\n    this.types.set(name, validator);\r\n  }\r\n\r\n  addFormat(name: string, validator: FormatFunction) {\r\n    this.formats.set(name, validator);\r\n  }\r\n\r\n  addKeyword(name: string, validator: ValidatorFunction) {\r\n    this.keywords.set(name, validator);\r\n  }\r\n\r\n  compile(schema: any): Validator {\r\n    const compiledSchema = this.compileSchema(schema, '#');\r\n\r\n    const validate: Validator = (data: any) => {\r\n      return compiledSchema.validator(compiledSchema, data, '#', this);\r\n    };\r\n\r\n    validate.compiledSchema = compiledSchema;\r\n\r\n    return validate;\r\n  }\r\n\r\n  private compileSchema(schema: Partial<CompiledSchema> | any, pointer): CompiledSchema {\r\n    if (!this.isSchemaLike(schema)) {\r\n      if (schema === true) {\r\n        schema = {\r\n          anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }, { type: 'array' }, { type: 'object' }, { type: 'null' }],\r\n        };\r\n      }\r\n\r\n      if (schema === false) {\r\n        schema = {\r\n          oneOf: [],\r\n        };\r\n      }\r\n    }\r\n\r\n    const compiledSchema = {\r\n      ...schema,\r\n      pointer,\r\n    };\r\n\r\n    if ('type' in compiledSchema) {\r\n      const types = Array.isArray(compiledSchema.type) ? compiledSchema.type : compiledSchema.type.split(',').map((t) => t.trim());\r\n\r\n      compiledSchema.validators = types.map((type) => this.types.get(type)).filter((validator) => validator !== undefined);\r\n    }\r\n\r\n    // Compile schema type\r\n    const validator: ValidatorFunction = (schema: any, data: any, pointer: string) => {\r\n      if (typeof data === 'undefined') {\r\n        if (pointer === '#') {\r\n          return {\r\n            valid: false,\r\n            errors: [\r\n              new ValidationError('Data is undefined', {\r\n                pointer,\r\n                value: data,\r\n                code: 'DATA_UNDEFINED',\r\n              }),\r\n            ],\r\n            data,\r\n          };\r\n        }\r\n      }\r\n\r\n      let finalData = data;\r\n      const typeErrorsResult = this.validateTypes(schema, finalData, pointer);\r\n      if (typeErrorsResult.valid === false) {\r\n        return typeErrorsResult;\r\n      }\r\n      finalData = typeErrorsResult.data;\r\n\r\n      return this.validateKeywords(schema, finalData, pointer);\r\n    };\r\n\r\n    compiledSchema.validator = validator;\r\n\r\n    // Recursively compile sub schemas\r\n    for (let key in schema) {\r\n      // Skip type as it is already compiled\r\n      if (key === 'type') {\r\n        continue;\r\n      }\r\n\r\n      if (this.keywords.has(key)) {\r\n        const validator = this.keywords.get(key);\r\n        compiledSchema.keywords = compiledSchema.keywords || {};\r\n        compiledSchema.keywords[key] = validator;\r\n      }\r\n\r\n      this.handleSubSchema(key, schema, pointer, compiledSchema);\r\n    }\r\n\r\n    return compiledSchema;\r\n  }\r\n\r\n  private handleSubSchema(key: string, schema: any, pointer: string, compiledSchema: any) {\r\n    if (Array.isArray(schema[key])) {\r\n      compiledSchema[key] = schema[key].map((subSchema, index) => {\r\n        if (this.isSchemaLike(subSchema)) {\r\n          return this.compileSchema(subSchema, `${pointer}/${key}/${index}`);\r\n        }\r\n        return subSchema;\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (isObject(schema[key])) {\r\n      if (this.isSchemaLike(schema[key]) && key !== 'properties') {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        return;\r\n      }\r\n\r\n      for (let subKey in schema[key]) {\r\n        if (this.isSchemaLike(schema[key][subKey])) {\r\n          compiledSchema[key] = compiledSchema[key] || {};\r\n\r\n          compiledSchema[key][subKey] = this.compileSchema(schema[key][subKey], `${pointer}/${key}/${subKey}`);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateTypes(schema: CompiledSchema, data, pointer): Result {\r\n    if (typeof data === 'undefined' || !Array.isArray(schema.validators) || schema.validators.length === 0) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    let errors = [];\r\n    let finalData = data;\r\n\r\n    for (let schemaValidator of schema.validators) {\r\n      const schemaResult = schemaValidator(schema, data, pointer, this);\r\n\r\n      finalData = schemaResult.data;\r\n\r\n      if (schemaResult.valid) {\r\n        return schemaResult;\r\n      }\r\n\r\n      errors = schemaResult.errors;\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data: finalData,\r\n    };\r\n  }\r\n\r\n  private validateKeywords(schema: CompiledSchema, data, pointer): Result {\r\n    const errors = [];\r\n    let finalData = data;\r\n\r\n    if ('keywords' in schema) {\r\n      for (let keyword in schema.keywords) {\r\n        const keywordValidator: ValidatorFunction = schema.keywords[keyword];\r\n        const keywordResult = keywordValidator(schema, finalData, pointer, this);\r\n        finalData = keywordResult.data;\r\n        if (!keywordResult.valid) {\r\n          errors.push(...keywordResult.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data: finalData,\r\n    };\r\n  }\r\n\r\n  private isSchemaOrKeywordPresent(subSchema: any): boolean {\r\n    if ('type' in subSchema) {\r\n      return true;\r\n    }\r\n\r\n    for (let subKey in subSchema) {\r\n      if (this.keywords.has(subKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private isSchemaLike(subSchema: any): boolean {\r\n    return isObject(subSchema) && this.isSchemaOrKeywordPresent(subSchema);\r\n  }\r\n}\r\n"],"mappings":"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"}