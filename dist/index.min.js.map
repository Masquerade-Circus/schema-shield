//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","message","item","keyword","cause","path","data","schema","_getCause","pointer","this","getCause","getDefinedErrorFunctionForKey","key","KeywordError","getNamedFunction","options","deepEqual","obj","other","Array","isArray","length","i","keys","Object","isObject","deepClone","result","constructor","name","isCompiledSchema","subSchema","fn","defineProperty","value","import_is_my_ip_valid","__toESM","RegExps","time","uri","hostname","date","daysInMonth","Formats","match","day","Number","yearStr","monthStr","hourStr","minuteStr","secondStr","timezoneSign","timezoneHourStr","timezoneMinuteStr","year","month","hour","minute","second","timezoneHour","timezoneMinute","test","email","ipv4","isMyIpValid","version","ipv6","isNaN","Date","getTime","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","timestamp","int8","unit8","int16","unit16","int32","unit32","float32","float64","keywords","required","defineError","hasOwnProperty","properties","error","$validate","schemaProp","default","values","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","pattern","patterns","propertyNames","dependencies","dependency","then","else","$ref","definitions","$id","$schema","title","description","$comment","examples","contentMediaType","contentEncoding","discriminator","nullable","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","elements","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","instance","formatValidate","getFormat","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","enum","enumItem","allOf","Boolean","anyOf","oneOf","validCount","const","if","not","types","formats","immutable","type","validator","addType","addKeyword","addFormat","overwrite","getType","getKeyword","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","defineTypeError","typeValidations","methodName","split","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","executeKeywordValidator","prevValidator","keywordError","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  message: string;\n  item: string | number;\n  keyword: string;\n  cause: ValidationError;\n  path: string = \"\";\n  data?: any;\n  schema?: CompiledSchema;\n\n  private _getCause(pointer = \"#\") {\n    const path =\n      pointer +\n      \"/\" +\n      this.keyword +\n      (typeof this.item !== \"undefined\" ? \"/\" + this.item : \"\");\n\n    if (!this.cause) {\n      this.path = path;\n      return this;\n    }\n\n    return this.cause._getCause(path);\n  }\n\n  getCause() {\n    return this._getCause();\n  }\n}\n\nexport interface DefineErrorOptions {\n  item?: any; // Final item in the path\n  cause?: ValidationError; // Cause of the error\n  data?: any; // Data that caused the error\n}\n\nexport interface DefineErrorFunction {\n  (message: string, options?: DefineErrorOptions): ValidationError;\n}\n\nexport function getDefinedErrorFunctionForKey(\n  key: string,\n  schema: CompiledSchema\n) {\n  const KeywordError = new ValidationError(`Invalid ${key}`);\n  KeywordError.keyword = key;\n  KeywordError.schema = schema;\n\n  const defineError: DefineErrorFunction = (message, options = {}) => {\n    KeywordError.message = message;\n    KeywordError.item = options.item;\n    KeywordError.cause = options.cause;\n    KeywordError.data = options.data;\n    return KeywordError;\n  };\n\n  return getNamedFunction<DefineErrorFunction>(\n    `defineError_${key}`,\n    defineError\n  );\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  // Is class instance of any kind\n  if (obj && obj.constructor && obj.constructor.name !== \"Object\") {\n    return obj;\n  }\n\n  if (isObject(obj)) {\n    const result = {\n      ...obj\n    };\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import { FormatFunction } from \"./index\";\nimport { ValidationError } from \"./utils\";\nimport isMyIpValid from \"is-my-ip-valid\";\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  hostname:\n    /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  \"json-pointer\": /^\\/(?:[^~]|~0|~1)*$/,\n  \"relative-json-pointer\": /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\n};\n\nconst daysInMonth = [31, , 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  [\"date-time\"](data) {\n    const match = data.match(\n      /^(\\d{4})-(0[0-9]|1[0-2])-(\\d{2})T(0[0-9]|1\\d|2[0-3]):([0-5]\\d):((?:[0-5]\\d|60))(?:.\\d+)?(?:([+-])(0[0-9]|1\\d|2[0-3]):([0-5]\\d)|Z)?$/i\n    );\n\n    if (!match) {\n      return false;\n    }\n\n    let day = Number(match[3]);\n\n    if (match[2] === \"02\" && day > 29) {\n      return false;\n    }\n\n    const [\n      ,\n      yearStr,\n      monthStr,\n      ,\n      hourStr,\n      minuteStr,\n      secondStr,\n      timezoneSign,\n      timezoneHourStr,\n      timezoneMinuteStr\n    ] = match;\n\n    let year = Number(yearStr);\n    let month = Number(monthStr);\n    let hour = Number(hourStr);\n    let minute = Number(minuteStr);\n    let second = Number(secondStr);\n\n    if (timezoneSign === \"-\" || timezoneSign === \"+\") {\n      const timezoneHour = Number(timezoneHourStr);\n      const timezoneMinute = Number(timezoneMinuteStr);\n\n      if (timezoneSign === \"-\") {\n        hour += timezoneHour;\n        minute += timezoneMinute;\n      } else if (timezoneSign === \"+\") {\n        hour -= timezoneHour;\n        minute -= timezoneMinute;\n      }\n\n      if (minute > 59) {\n        hour += 1;\n        minute -= 60;\n      } else if (minute < 0) {\n        hour -= 1;\n        minute += 60;\n      }\n\n      if (hour > 23) {\n        day += 1;\n        hour -= 24;\n      } else if (hour < 0) {\n        day -= 1;\n        hour += 24;\n      }\n\n      if (day > 31) {\n        month += 1;\n        day -= 31;\n      } else if (day < 1) {\n        month -= 1;\n        day += 31;\n      }\n\n      if (month > 12) {\n        year += 1;\n        month -= 12;\n      } else if (month < 1) {\n        year -= 1;\n        month += 12;\n      }\n\n      if (year < 0) {\n        return false;\n      }\n    }\n\n    const maxDays =\n      month === 2\n        ? year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)\n          ? 29\n          : 28\n        : daysInMonth[month - 1];\n\n    if (day > maxDays) {\n      return false;\n    }\n\n    // Leap seconds\n    if (second === 60 && (minute !== 59 || hour !== 23)) {\n      return false;\n    }\n\n    return true;\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    return /^(?!\\.)(?!.*\\.$)[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,20}(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,21}){0,2}@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,60}[a-z0-9])?){0,3}$/i.test(\n      data\n    );\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== \"string\") {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"json-pointer\"].test(data);\n  },\n  \"relative-json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"relative-json-pointer\"].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  \"idn-email\": false,\n  \"idn-hostname\": false,\n  uuid: false,\n  \"uri-reference\": false,\n  iri: false,\n  \"iri-reference\": false,\n  \"uri-template\": false\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction | false> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  },\n\n  // Not implemented yet\n  timestamp: false,\n  int8: false,\n  unit8: false,\n  int16: false,\n  unit16: false,\n  int32: false,\n  unit32: false,\n  float32: false,\n  float64: false\n\n\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return defineError(\"Required property is missing\", {\n          item: key,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key of Object.keys(schema.properties)) {\n      if (!data.hasOwnProperty(key)) {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          return defineError(\"Property is not allowed\", {\n            item: key,\n            data: data[key]\n          });\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          return defineError(\"Property is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  values(schema, data, defineError) {\n    if (!isObject(data) || !isCompiledSchema(schema.values)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    for (const key of keys) {\n      const error = schema.values.$validate(data[key]);\n      if (error) {\n        return defineError(\"Property is invalid\", {\n          item: key,\n          cause: error,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return defineError(\"Too many properties\", { data });\n  },\n\n  minProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return defineError(\"Too few properties\", { data });\n  },\n\n  additionalProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return defineError(\"Additional properties are not allowed\", {\n          item: key,\n          data: data[key]\n        });\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          return defineError(\"Additional properties are invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              return defineError(\"Property is not allowed\", {\n                item: key,\n                data: data[key]\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              return defineError(\"Property is invalid\", {\n                item: key,\n                cause: error,\n                data: data[key]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return defineError(\"Properties are not allowed\", { data });\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          return defineError(\"Property name is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  dependencies(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return defineError(\"Dependency is not satisfied\", {\n              item: i,\n              data: dependency[i]\n            });\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return defineError(\"Dependency is not satisfied\", {\n          cause: error,\n          data\n        });\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n\n  // Metadata keywords (not used as a function)\n  title: false,\n  description: false,\n  $comment: false,\n  examples: false,\n  contentMediaType: false,\n  contentEncoding: false,\n\n  // Not supported Open API keywords\n  discriminator: false,\n  nullable: false\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return defineError(\"Array items are not allowed\", { data });\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            return defineError(\"Array item is not allowed\", {\n              item: i,\n              data: data[i]\n            });\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          return defineError(\"Array item is invalid\", {\n            item: i,\n            cause: error,\n            data: data[i]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  elements(schema, data, defineError) {\n    if (!Array.isArray(data) || !isCompiledSchema(schema.elements)) {\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.elements.$validate(data[i]);\n      if (error) {\n        return defineError(\"Array item is invalid\", {\n          item: i,\n          cause: error,\n          data: data[i]\n        });\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return defineError(\"Array is too short\", { data });\n  },\n\n  maxItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return defineError(\"Array is too long\", { data });\n  },\n\n  additionalItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return defineError(\"Array is too long\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return defineError(\"Array items are not unique\", { data: item });\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return defineError(\"Array must contain at least one item\", { data });\n        }\n        return;\n      }\n\n      return defineError(\"Array must not contain any items\", { data });\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return defineError(\"Array must contain at least one item\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return defineError(\"Value is shorter than the minimum length\", { data });\n  },\n\n  maxLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return defineError(\"Value is longer than the maximum length\", { data });\n  },\n\n  pattern(schema, data, defineError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return defineError(\"Invalid regular expression\", { data });\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the pattern\", { data });\n  },\n\n  format(schema, data, defineError, instance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = instance.getFormat(schema.format);\n    if (formatValidate === false) {\n      return;\n    }\n\n    if (formatValidate) {\n      if (formatValidate(data)) {\n        return;\n      }\n\n      return defineError(\"Value does not match the format\", { data });\n    }\n\n    return defineError(\"Format is not supported\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\nimport { areCloseEnough } from \"../utils\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return defineError(\"Value is less than the minimum\", { data });\n    }\n\n    return;\n  },\n\n  maximum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return defineError(\"Value is greater than the maximum\", { data });\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return defineError(\"Value is not a multiple of the multipleOf\", { data });\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return defineError(\"Value is less than or equal to the exclusiveMinimum\");\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return defineError(\n        \"Value is greater than or equal to the exclusiveMaximum\",\n        { data }\n      );\n    }\n\n    return;\n  }\n};\n","import { deepEqual, isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  enum(schema, data, defineError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not one of the allowed values\", { data });\n  },\n\n  allOf(schema, data, defineError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return defineError(\"Value is not valid\", { cause: error, data });\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return defineError(\"Value is not valid\", { data });\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return defineError(\"Value is not valid\", { data });\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, defineError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  oneOf(schema, data, defineError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  const(schema, data, defineError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  if(schema, data, defineError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (isCompiledSchema(schema.then)) {\n          return schema.then.$validate(data);\n        }\n      } else if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    if (!isCompiledSchema(schema.if)) {\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (isCompiledSchema(schema.then)) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, defineError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return defineError(\"Value is not valid\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return defineError(\"Value is not valid\", { cause: error, data });\n        }\n        return;\n      }\n      return defineError(\"Value is not valid\", { data });\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  }\n};\n","import {\n  DefineErrorFunction,\n  ValidationError,\n  deepClone,\n  getDefinedErrorFunctionForKey,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    defineError: DefineErrorFunction,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  private types: Record<string, TypeFunction | false> = {};\n  private formats: Record<string, FormatFunction | false> = {};\n  private keywords: Record<string, KeywordFunction | false> = {};\n  private immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      if (validator) {\n        this.addType(type, validator);\n      }\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction, overwrite = false) {\n    if (this.types[name] && !overwrite) {\n      throw new ValidationError(`Type \"${name}\" already exists`);\n    }\n    this.types[name] = validator;\n  }\n\n  getType(type: string): TypeFunction | false {\n    return this.types[type];\n  }\n\n  addFormat(name: string, validator: FormatFunction, overwrite = false) {\n    if (this.formats[name] && !overwrite) {\n      throw new ValidationError(`Format \"${name}\" already exists`);\n    }\n    this.formats[name] = validator;\n  }\n\n  getFormat(format: string): FormatFunction | false {\n    return this.formats[format];\n  }\n\n  addKeyword(name: string, validator: KeywordFunction, overwrite = false) {\n    if (this.keywords[name] && !overwrite) {\n      throw new ValidationError(`Keyword \"${name}\" already exists`);\n    }\n    this.keywords[name] = validator;\n  }\n\n  getKeyword(keyword: string): KeywordFunction | false {\n    return this.keywords[keyword];\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = { ...schema } as CompiledSchema;\n    const defineTypeError = getDefinedErrorFunctionForKey(\"type\", schema);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.getType(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw defineTypeError(\"Invalid type for schema\", { data: schema.type });\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (typeValidation(data)) {\n              return;\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      }\n    }\n\n    for (const key of Object.keys(schema)) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.getKeyword(key);\n      if (keywordValidator) {\n        const defineError = getDefinedErrorFunctionForKey(key, schema[key]);\n        const executeKeywordValidator = (data: any) =>\n          (keywordValidator as KeywordFunction)(\n            compiledSchema,\n            data,\n            defineError,\n            this\n          );\n\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              const keywordError = executeKeywordValidator(data);\n              if (keywordError) {\n                return keywordError;\n              }\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            executeKeywordValidator\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (subKey in this.keywords) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}