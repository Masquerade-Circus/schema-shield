//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["ValidationError","Error","message","item","keyword","cause","path","data","schema","_getCause","pointer","this","getCause","getDefinedErrorFunctionForKey","key","KeywordError","getNamedFunction","options","deepEqual","obj","other","Array","isArray","length","i","keys","Object","isObject","deepClone","result","constructor","name","isCompiledSchema","subSchema","fn","defineProperty","value","RegExps","time","uri","date","daysInMonth","Formats","match","day","Number","yearStr","monthStr","hourStr","minuteStr","secondStr","timezoneSign","timezoneHourStr","timezoneMinuteStr","year","month","hour","minute","second","timezoneHour","timezoneMinute","test","email","ipv4","ipv6","address","indexOf","hasIpv4","addressParts","split","ipv4Part","pop","isShortened","ipv6Part","join","isIpv6Valid","hasInvalidChar","hostname","isNaN","Date","getTime","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","timestamp","int8","unit8","int16","unit16","int32","unit32","float32","float64","keywords","required","defineError","hasOwnProperty","properties","error","$validate","schemaProp","default","values","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","pattern","patterns","propertyNames","dependencies","dependency","then","else","$ref","definitions","$id","$schema","title","description","$comment","examples","contentMediaType","contentEncoding","discriminator","nullable","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","elements","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","instance","formatValidate","getFormat","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","enum","enumItem","allOf","Boolean","anyOf","oneOf","validCount","const","if","not","types","formats","immutable","type","validator","addType","addKeyword","addFormat","overwrite","getType","getKeyword","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","defineTypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","prevValidator","index","subKey"],"sources":["../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  message: string;\n  item: string | number;\n  keyword: string;\n  cause: ValidationError;\n  path: string = \"\";\n  data?: any;\n  schema?: CompiledSchema;\n\n  private _getCause(pointer = \"#\") {\n    const path =\n      pointer +\n      \"/\" +\n      this.keyword +\n      (typeof this.item !== \"undefined\" ? \"/\" + this.item : \"\");\n\n    if (!this.cause) {\n      this.path = path;\n      return this;\n    }\n\n    return this.cause._getCause(path);\n  }\n\n  getCause() {\n    return this._getCause();\n  }\n}\n\nexport interface DefineErrorOptions {\n  item?: any; // Final item in the path\n  cause?: ValidationError; // Cause of the error\n  data?: any; // Data that caused the error\n}\n\nexport interface DefineErrorFunction {\n  (message: string, options?: DefineErrorOptions): ValidationError;\n}\n\nexport function getDefinedErrorFunctionForKey(\n  key: string,\n  schema: CompiledSchema\n) {\n  const KeywordError = new ValidationError(`Invalid ${key}`);\n  KeywordError.keyword = key;\n  KeywordError.schema = schema;\n\n  const defineError: DefineErrorFunction = (message, options = {}) => {\n    KeywordError.message = message;\n    KeywordError.item = options.item;\n    KeywordError.cause = options.cause;\n    KeywordError.data = options.data;\n    return KeywordError;\n  };\n\n  return getNamedFunction<DefineErrorFunction>(\n    `defineError_${key}`,\n    defineError\n  );\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  // Is class instance of any kind\n  if (obj && obj.constructor && obj.constructor.name !== \"Object\") {\n    return obj;\n  }\n\n  if (isObject(obj)) {\n    const result = {\n      ...obj\n    };\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import { FormatFunction } from \"./index\";\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  \"json-pointer\": /^\\/(?:[^~]|~0|~1)*$/,\n  \"relative-json-pointer\": /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/\n};\n\nconst daysInMonth = [31, , 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  [\"date-time\"](data) {\n    const match = data.match(\n      /^(\\d{4})-(0[0-9]|1[0-2])-(\\d{2})T(0[0-9]|1\\d|2[0-3]):([0-5]\\d):((?:[0-5]\\d|60))(?:.\\d+)?(?:([+-])(0[0-9]|1\\d|2[0-3]):([0-5]\\d)|Z)?$/i\n    );\n\n    if (!match) {\n      return false;\n    }\n\n    let day = Number(match[3]);\n\n    if (match[2] === \"02\" && day > 29) {\n      return false;\n    }\n\n    const [\n      ,\n      yearStr,\n      monthStr,\n      ,\n      hourStr,\n      minuteStr,\n      secondStr,\n      timezoneSign,\n      timezoneHourStr,\n      timezoneMinuteStr\n    ] = match;\n\n    let year = Number(yearStr);\n    let month = Number(monthStr);\n    let hour = Number(hourStr);\n    let minute = Number(minuteStr);\n    let second = Number(secondStr);\n\n    if (timezoneSign === \"-\" || timezoneSign === \"+\") {\n      const timezoneHour = Number(timezoneHourStr);\n      const timezoneMinute = Number(timezoneMinuteStr);\n\n      if (timezoneSign === \"-\") {\n        hour += timezoneHour;\n        minute += timezoneMinute;\n      } else if (timezoneSign === \"+\") {\n        hour -= timezoneHour;\n        minute -= timezoneMinute;\n      }\n\n      if (minute > 59) {\n        hour += 1;\n        minute -= 60;\n      } else if (minute < 0) {\n        hour -= 1;\n        minute += 60;\n      }\n\n      if (hour > 23) {\n        day += 1;\n        hour -= 24;\n      } else if (hour < 0) {\n        day -= 1;\n        hour += 24;\n      }\n\n      if (day > 31) {\n        month += 1;\n        day -= 31;\n      } else if (day < 1) {\n        month -= 1;\n        day += 31;\n      }\n\n      if (month > 12) {\n        year += 1;\n        month -= 12;\n      } else if (month < 1) {\n        year -= 1;\n        month += 12;\n      }\n\n      if (year < 0) {\n        return false;\n      }\n    }\n\n    const maxDays =\n      month === 2\n        ? year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0)\n          ? 29\n          : 28\n        : daysInMonth[month - 1];\n\n    if (day > maxDays) {\n      return false;\n    }\n\n    // Leap seconds\n    if (second === 60 && (minute !== 59 || hour !== 23)) {\n      return false;\n    }\n\n    return true;\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    return /^(?!\\.)(?!.*\\.$)[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,20}(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]{1,21}){0,2}@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\\.[a-z0-9](?:[a-z0-9-]{0,60}[a-z0-9])?){0,3}$/i.test(\n      data\n    );\n  },\n  ipv4(data) {\n    // Matches a string formed by 4 numbers between 0 and 255 separated by dots without leading zeros\n    // /^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/\n    return /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n      data\n    );\n  },\n\n  // ipv6: isMyIpValid({ version: 6 }),\n  ipv6(address) {\n    if (address === \"::\") {\n      return true;\n    }\n\n    if (\n      address.indexOf(\":\") === -1 ||\n      /(?:\\s+|:::+|^\\w{5,}|\\w{5}$|^:{1}\\w|\\w:{1}$)/.test(address)\n    ) {\n      return false;\n    }\n\n    const hasIpv4 = address.indexOf(\".\") !== -1;\n    let addressParts = address;\n\n    if (hasIpv4) {\n      addressParts = address.split(\":\");\n      const ipv4Part = addressParts.pop();\n      if (\n        !/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])$/.test(\n          ipv4Part\n        )\n      ) {\n        return false;\n      }\n    }\n\n    const isShortened = address.indexOf(\"::\") !== -1;\n    const ipv6Part = hasIpv4 ? addressParts.join(\":\") : address;\n\n    if (isShortened) {\n      if (ipv6Part.split(\"::\").length - 1 > 1) {\n        return false;\n      }\n\n      if (!/^[0-9a-fA-F:.]*$/.test(ipv6Part)) {\n        return false;\n      }\n\n      return /^(?:(?:(?:[0-9a-fA-F]{1,4}(?::|$)){1,6}))|(?:::(?:[0-9a-fA-F]{1,4})){0,5}$/.test(\n        ipv6Part\n      );\n    }\n\n    const isIpv6Valid =\n      /^(?:(?:[0-9a-fA-F]{1,4}:){7}(?:[0-9a-fA-F]{1,4}|:))$/.test(ipv6Part);\n\n    const hasInvalidChar = /(?:[0-9a-fA-F]{5,}|\\D[0-9a-fA-F]{3}:)/.test(\n      ipv6Part\n    );\n\n    if (hasIpv4) {\n      return isIpv6Valid || !hasInvalidChar;\n    }\n\n    return isIpv6Valid && !hasInvalidChar;\n  },\n\n  hostname(data) {\n    return /^[a-z0-9][a-z0-9-]{0,62}(?:\\.[a-z0-9][a-z0-9-]{0,62})*[a-z0-9]$/i.test(\n      data\n    );\n  },\n  date(data) {\n    if (typeof data !== \"string\") {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  \"json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"json-pointer\"].test(data);\n  },\n  \"relative-json-pointer\"(data) {\n    if (data === \"\") {\n      return true;\n    }\n\n    return RegExps[\"relative-json-pointer\"].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  \"idn-email\": false,\n  \"idn-hostname\": false,\n  uuid: false,\n  \"uri-reference\": false,\n  iri: false,\n  \"iri-reference\": false,\n  \"uri-template\": false\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction | false> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  },\n\n  // Not implemented yet\n  timestamp: false,\n  int8: false,\n  unit8: false,\n  int16: false,\n  unit16: false,\n  int32: false,\n  unit32: false,\n  float32: false,\n  float64: false\n\n\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        return defineError(\"Required property is missing\", {\n          item: key,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key of Object.keys(schema.properties)) {\n      if (!data.hasOwnProperty(key)) {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          return defineError(\"Property is not allowed\", {\n            item: key,\n            data: data[key]\n          });\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          return defineError(\"Property is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  values(schema, data, defineError) {\n    if (!isObject(data) || !isCompiledSchema(schema.values)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    for (const key of keys) {\n      const error = schema.values.$validate(data[key]);\n      if (error) {\n        return defineError(\"Property is invalid\", {\n          item: key,\n          cause: error,\n          data: data[key]\n        });\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return defineError(\"Too many properties\", { data });\n  },\n\n  minProperties(schema, data, defineError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return defineError(\"Too few properties\", { data });\n  },\n\n  additionalProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        return defineError(\"Additional properties are not allowed\", {\n          item: key,\n          data: data[key]\n        });\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          return defineError(\"Additional properties are invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              return defineError(\"Property is not allowed\", {\n                item: key,\n                data: data[key]\n              });\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              return defineError(\"Property is invalid\", {\n                item: key,\n                cause: error,\n                data: data[key]\n              });\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return defineError(\"Properties are not allowed\", { data });\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          return defineError(\"Property name is invalid\", {\n            item: key,\n            cause: error,\n            data: data[key]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  dependencies(schema, data, defineError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            return defineError(\"Dependency is not satisfied\", {\n              item: i,\n              data: dependency[i]\n            });\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return defineError(\"Dependency is not satisfied\", { data: dependency });\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        return defineError(\"Dependency is not satisfied\", {\n          cause: error,\n          data\n        });\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n\n  // Metadata keywords (not used as a function)\n  title: false,\n  description: false,\n  $comment: false,\n  examples: false,\n  contentMediaType: false,\n  contentEncoding: false,\n\n  // Not supported Open API keywords\n  discriminator: false,\n  nullable: false\n};\n","import { isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return defineError(\"Array items are not allowed\", { data });\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            return defineError(\"Array item is not allowed\", {\n              item: i,\n              data: data[i]\n            });\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          return defineError(\"Array item is invalid\", {\n            item: i,\n            cause: error,\n            data: data[i]\n          });\n        }\n      }\n    }\n\n    return;\n  },\n\n  elements(schema, data, defineError) {\n    if (!Array.isArray(data) || !isCompiledSchema(schema.elements)) {\n      return;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.elements.$validate(data[i]);\n      if (error) {\n        return defineError(\"Array item is invalid\", {\n          item: i,\n          cause: error,\n          data: data[i]\n        });\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return defineError(\"Array is too short\", { data });\n  },\n\n  maxItems(schema, data, defineError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return defineError(\"Array is too long\", { data });\n  },\n\n  additionalItems(schema, data, defineError) {\n    if (!schema.items || isObject(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return defineError(\"Array is too long\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            return defineError(\"Array item is invalid\", {\n              item: i,\n              cause: error,\n              data: data[i]\n            });\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, defineError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return defineError(\"Array items are not unique\", { data: item });\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, defineError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return defineError(\"Array must contain at least one item\", { data });\n        }\n        return;\n      }\n\n      return defineError(\"Array must not contain any items\", { data });\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return defineError(\"Array must contain at least one item\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return defineError(\"Value is shorter than the minimum length\", { data });\n  },\n\n  maxLength(schema, data, defineError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return defineError(\"Value is longer than the maximum length\", { data });\n  },\n\n  pattern(schema, data, defineError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return defineError(\"Invalid regular expression\", { data });\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the pattern\", { data });\n  },\n\n  // Take into account that if we receive a format that is not defined, we\n  // will not throw an error, we just ignore it.\n  format(schema, data, defineError, instance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = instance.getFormat(schema.format);\n    if (!formatValidate || formatValidate(data)) {\n      return;\n    }\n\n    return defineError(\"Value does not match the format\", { data });\n  }\n};\n","import { KeywordFunction } from \"../index\";\nimport { areCloseEnough } from \"../utils\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return defineError(\"Value is less than the minimum\", { data });\n    }\n\n    return;\n  },\n\n  maximum(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return defineError(\"Value is greater than the maximum\", { data });\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, defineError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return defineError(\"Value is not a multiple of the multipleOf\", { data });\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return defineError(\"Value is less than or equal to the exclusiveMinimum\");\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, defineError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return defineError(\n        \"Value is greater than or equal to the exclusiveMaximum\",\n        { data }\n      );\n    }\n\n    return;\n  }\n};\n","import { deepEqual, isCompiledSchema, isObject } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  enum(schema, data, defineError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not one of the allowed values\", { data });\n  },\n\n  allOf(schema, data, defineError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            return defineError(\"Value is not valid\", { cause: error, data });\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return defineError(\"Value is not valid\", { data });\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return defineError(\"Value is not valid\", { data });\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, defineError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  oneOf(schema, data, defineError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  const(schema, data, defineError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return defineError(\"Value is not valid\", { data });\n  },\n\n  if(schema, data, defineError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (isCompiledSchema(schema.then)) {\n          return schema.then.$validate(data);\n        }\n      } else if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    if (!isCompiledSchema(schema.if)) {\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (isCompiledSchema(schema.then)) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (isCompiledSchema(schema.else)) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, defineError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return defineError(\"Value is not valid\", { data });\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return defineError(\"Value is not valid\", { cause: error, data });\n        }\n        return;\n      }\n      return defineError(\"Value is not valid\", { data });\n    }\n\n    return defineError(\"Value is not valid\", { data });\n  }\n};\n","import {\n  DefineErrorFunction,\n  ValidationError,\n  deepClone,\n  getDefinedErrorFunctionForKey,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    defineError: DefineErrorFunction,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  private types: Record<string, TypeFunction | false> = {};\n  private formats: Record<string, FormatFunction | false> = {};\n  private keywords: Record<string, KeywordFunction | false> = {};\n  private immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      if (validator) {\n        this.addType(type, validator);\n      }\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction, overwrite = false) {\n    if (this.types[name] && !overwrite) {\n      throw new ValidationError(`Type \"${name}\" already exists`);\n    }\n    this.types[name] = validator;\n  }\n\n  getType(type: string): TypeFunction | false {\n    return this.types[type];\n  }\n\n  addFormat(name: string, validator: FormatFunction, overwrite = false) {\n    if (this.formats[name] && !overwrite) {\n      throw new ValidationError(`Format \"${name}\" already exists`);\n    }\n    this.formats[name] = validator;\n  }\n\n  getFormat(format: string): FormatFunction | false {\n    return this.formats[format];\n  }\n\n  addKeyword(name: string, validator: KeywordFunction, overwrite = false) {\n    if (this.keywords[name] && !overwrite) {\n      throw new ValidationError(`Keyword \"${name}\" already exists`);\n    }\n    this.keywords[name] = validator;\n  }\n\n  getKeyword(keyword: string): KeywordFunction | false {\n    return this.keywords[keyword];\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = { ...schema } as CompiledSchema;\n    const defineTypeError = getDefinedErrorFunctionForKey(\"type\", schema);\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.getType(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw defineTypeError(\"Invalid type for schema\", { data: schema.type });\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (!typeValidation(data)) {\n              return defineTypeError(\"Invalid type\", { data });\n            }\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return defineTypeError(\"Invalid type\", { data });\n          }\n        );\n      }\n    }\n\n    for (const key of Object.keys(schema)) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.getKeyword(key);\n      if (keywordValidator) {\n        const defineError = getDefinedErrorFunctionForKey(key, schema[key]);\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              return (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                defineError,\n                this\n              );\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) =>\n              (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                defineError,\n                this\n              )\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (subKey in this.keywords) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}