//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","item","constructor","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","deepClone","result","isCompiledSchema","subSchema","getNamedFunction","fn","defineProperty","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","keywords","required","schema","KeywordError","hasOwnProperty","properties","valid","error","$validate","schemaProp","default","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","match","pattern","patterns","propertyNames","then","else","$ref","definitions","$id","$schema","title","$comment","contentMediaType","contentEncoding","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","minItems","_","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","minimum","instance","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","nullable","allOf","isValid","Boolean","anyOf","oneOf","validCount","dependencies","dependency","const","if","not","types","Map","immutable","type","validator","addType","keyword","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","isSchemaLike","validate","map","t","trim","typeValidations","push","TypeError","typeValidation","keywordValidator","prevValidator","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { CompiledSchema } from \"./index\";\n\nexport class ValidationError extends Error {\n  name: string;\n  pointer: string;\n  message: string;\n  value: any;\n  code: string;\n  item: string | number;\n\n  constructor(message: string, pointer?: string) {\n    super(message);\n    this.pointer = pointer;\n  }\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  if (isObject(obj)) {\n    const result = {};\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  }\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        KeywordError.item = key;\n        return [false, KeywordError];\n      }\n    }\n\n    return [true, null];\n  },\n\n  properties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n\n    const keys = Object.keys(schema.properties);\n    for (const key of keys) {\n      if (typeof data[key] === \"undefined\") {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          KeywordError.item = key;\n          return [false, KeywordError];\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const [valid, error] = schema.properties[key].$validate(data[key]);\n        if (!valid) {\n          KeywordError.item = key;\n          return [false, KeywordError];\n        }\n      }\n    }\n\n    return [true, null];\n  },\n\n  maxProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  minProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  additionalProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        KeywordError.item = key;\n        return [false, KeywordError];\n      }\n\n      if (isCompiled) {\n        const [valid, error] = schema.additionalProperties.$validate(data[key]);\n        if (!valid) {\n          KeywordError.item = key;\n          return [false, KeywordError];\n        }\n      }\n    }\n\n    return [true, null];\n  },\n\n  patternProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              KeywordError.item = key;\n              return [false, KeywordError];\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const [valid, error] = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (!valid) {\n              KeywordError.item = key;\n              return [false, KeywordError];\n            }\n          }\n        }\n      }\n    }\n\n    return [true, null];\n  },\n\n  propertyNames(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return [false, KeywordError];\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const [valid, error] = schema.propertyNames.$validate(key);\n        if (!valid) {\n          KeywordError.item = key;\n          return [false, KeywordError];\n        }\n      }\n    }\n\n    return [true, null];\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n  title: false,\n  $comment: false,\n  contentMediaType: false,\n  contentEncoding: false\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return [true, null];\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return [false, KeywordError];\n      }\n\n      return [true, null];\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            KeywordError.message = \"Array item is not allowed\";\n            KeywordError.item = i;\n            return [false, KeywordError];\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const [valid, error] = schemaItem.$validate(data[i]);\n          if (!valid) {\n            KeywordError.message = error.message;\n            KeywordError.item = i;\n            return [false, KeywordError];\n          }\n        }\n      }\n\n      return [true, null];\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const [valid, error] = schemaItems.$validate(data[i]);\n        if (!valid) {\n          KeywordError.message = error.message;\n          KeywordError.item = i;\n          return [false, KeywordError];\n        }\n      }\n    }\n\n    return [true, null];\n  },\n\n  minItems(schema, data, KeywordError, _) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  maxItems(schema, data, KeywordError, _) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  additionalItems(schema, data, KeywordError, _) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return [true, null];\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return [false, KeywordError];\n      }\n      return [true, null];\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const [valid, error] = schema.additionalItems.$validate(data[i]);\n          if (!valid) {\n            KeywordError.message = error.message;\n            KeywordError.item = i;\n            return [false, KeywordError];\n          }\n        }\n        return [true, null];\n      }\n\n      return [true, null];\n    }\n\n    return [true, null];\n  },\n\n  uniqueItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return [true, null];\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return [false, KeywordError];\n      }\n      unique.add(itemStr);\n    }\n\n    return [true, null];\n  },\n\n  contains(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return [true, null];\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return [false, KeywordError];\n        }\n        return [true, null];\n      }\n\n      return [false, KeywordError];\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const [valid, error] = schema.contains.$validate(data[i]);\n      if (valid) {\n        return [true, null];\n      }\n      continue;\n    }\n\n    return [false, KeywordError];\n  }\n};\n","import { ValidationError, deepEqual } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  maxLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  pattern(schema, data, KeywordError) {\n    if (typeof data !== \"string\") {\n      return [true, null];\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return [false, KeywordError];\n    }\n\n    if (patternRegexp.test(data)) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  format(schema, data, KeywordError, formatInstance) {\n    if (typeof data !== \"string\") {\n      return [true, null];\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return [true, null];\n    }\n\n    if (typeof formatValidate === \"function\") {\n      if (formatValidate(data)) {\n        return [true, null];\n      }\n\n      return [false, KeywordError];\n    }\n\n    return [false, KeywordError];\n  },\n\n  enum(schema, data, KeywordError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return [true, null];\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return [true, null];\n        }\n      }\n    }\n\n    return [false, KeywordError];\n  }\n};\n","import { ValidationError, areCloseEnough } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return [true, null];\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  },\n\n  maximum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return [true, null];\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  },\n\n  multipleOf(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return [true, null];\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return [true, null];\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  },\n\n  exclusiveMinimum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return [true, null];\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  },\n\n  exclusiveMaximum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return [true, null];\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  }\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport {\n  ValidationError,\n  deepEqual,\n  isCompiledSchema,\n  isObject\n} from \"../utils\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  nullable(schema, data, KeywordError) {\n    if (schema.nullable && data !== null) {\n      return [false, KeywordError];\n    }\n\n    return [true, null];\n  },\n\n  allOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const [isValid, error] = schema.allOf[i].$validate(data);\n          if (!isValid) {\n            return [false, KeywordError];\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return [false, KeywordError];\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return [false, KeywordError];\n      }\n    }\n\n    return [true, null];\n  },\n\n  anyOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const [isValid, error] = schema.anyOf[i].$validate(data);\n          if (isValid) {\n            return [true, null];\n          }\n          continue;\n        }\n        return [true, null];\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return [true, null];\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return [true, null];\n        }\n      }\n    }\n\n    return [false, KeywordError];\n  },\n\n  oneOf(schema, data, KeywordError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const [isValid, error] = schema.oneOf[i].$validate(data);\n          if (isValid) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return [true, null];\n    }\n\n    return [false, KeywordError];\n  },\n\n  dependencies(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return [true, null];\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            KeywordError.item = i;\n            return [false, KeywordError];\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return [false, KeywordError];\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return [false, KeywordError];\n      }\n      const [isValid, error] = dependency.$validate(data);\n      if (!isValid) {\n        return [false, error];\n      }\n    }\n\n    return [true, null];\n  },\n\n  const(schema, data, KeywordError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return [true, null];\n    }\n    return [false, KeywordError];\n  },\n\n  if(schema, data, KeywordError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return [true, null];\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (schema.then) {\n          return schema.then.$validate(data);\n        }\n      } else if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return [true, null];\n    }\n\n    const [isValid, error] = schema.if.$validate(data);\n    if (isValid) {\n      if (schema.then) {\n        return schema.then.$validate(data);\n      }\n      return [true, null];\n    } else {\n      if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return [true, null];\n    }\n  },\n\n  not(schema, data, KeywordError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return [false, KeywordError];\n      }\n      return [true, null];\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const [valid, error] = schema.not.$validate(data);\n        if (valid) {\n          return [false, KeywordError];\n        }\n        return [true, null];\n      }\n      return [false, KeywordError];\n    }\n\n    return [false, KeywordError];\n  }\n};\n","import {\n  ValidationError,\n  deepClone,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = any;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    error: ValidationError,\n    instance: SchemaShield\n  ): [boolean, ValidationError];\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): [boolean, ValidationError];\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): [boolean, ValidationError];\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, TypeFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, KeywordFunction | false>();\n  immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      this.addType(type, validator);\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: KeywordFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema, \"#\");\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\", \"#\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        (data) => [true, null]\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      if (this.immutable) {\n        data = deepClone(data);\n      }\n      return compiledSchema.$validate(data);\n    };\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(\n    schema: Partial<CompiledSchema> | any,\n    pointer\n  ): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [\n            { type: \"string\" },\n            { type: \"number\" },\n            { type: \"boolean\" },\n            { type: \"array\" },\n            { type: \"object\" },\n            { type: \"null\" }\n          ]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = {} as CompiledSchema;\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      const typeValidations: TypeFunction[] = [];\n      let name = \"\";\n      for (const type of types) {\n        const validator = this.types.get(type);\n        if (validator) {\n          typeValidations.push(validator);\n          name += (name ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n      const TypeError = new ValidationError(`Invalid type`, pointer);\n\n      if (typeValidations.length === 0) {\n        throw TypeError;\n      }\n\n      if (typeValidations.length === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          name,\n          (data) => {\n            if (typeValidation(data)) {\n              return [true, null];\n            }\n            return [false, TypeError];\n          }\n        );\n      } else {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          name,\n          (data) => {\n            for (const validator of typeValidations) {\n              if (validator(data)) {\n                return [true, null];\n              }\n            }\n            return [false, TypeError];\n          }\n        );\n      }\n    }\n\n    for (let key in schema) {\n      if (key === \"type\") {\n        continue;\n      }\n\n      let keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        const KeywordError = new ValidationError(`Invalid ${key}`, pointer);\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          const name = `${prevValidator.name}_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            name,\n            (data) => {\n              let [valid, error] = prevValidator(data);\n              if (!valid) {\n                return [false, error];\n              }\n\n              return (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                KeywordError,\n                this\n              );\n            }\n          );\n        } else {\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            keywordValidator.name,\n            (data) => {\n              return (keywordValidator as KeywordFunction)(\n                compiledSchema,\n                data,\n                KeywordError,\n                this\n              );\n            }\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(\n          schema[key],\n          `${pointer}/${key}`\n        );\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (this.keywords.has(subKey)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"+KAAAA,G,EAAA,wCAAAC,EAAAC,GAAA,IAAIC,EAAkB,uCAElBC,EAAiB,mBACjBC,EAAiB,KACjBC,EAAS,OACTC,EAAkB,kBAClBC,EAAe,0CA4EnBN,EAAOD,QAAyB,gBAAI,CAClCE,EACAC,EACAC,EACAC,EACAC,EACAC,EACF,G,4ECvFaC,EAAN,cAA8BC,MACnCC,KACAC,QACAC,QACAC,MACAC,KACAC,KAEAC,YAAYJ,EAAiBD,GAC3BM,MAAML,GACNM,KAAKP,QAAUA,CACjB,GAGK,SAASQ,EACdC,EACAC,GAEA,GAAIC,MAAMC,QAAQH,IAAQE,MAAMC,QAAQF,GAAQ,CAC9C,GAAID,EAAII,SAAWH,EAAMG,OACvB,OAAO,EAGT,QAASC,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAC9B,IAAKN,EAAUC,EAAIK,GAAIJ,EAAMI,IAC3B,OAAO,EAIX,OAAO,CACT,CAEA,GAAmB,iBAARL,GAAqC,iBAAVC,EAAoB,CACxD,GAAY,OAARD,GAA0B,OAAVC,EAClB,OAAOD,IAAQC,EAGjB,MAAMK,EAAOC,OAAOD,KAAKN,GACzB,GAAIM,EAAKF,SAAWG,OAAOD,KAAKL,GAAOG,OACrC,OAAO,EAGT,UAAWI,KAAOF,EAChB,IAAKP,EAAUC,EAAIQ,GAAMP,EAAMO,IAC7B,OAAO,EAIX,OAAO,CACT,CAEA,OAAOR,IAAQC,CACjB,CAEO,SAASQ,EAASC,GACvB,MAAuB,iBAATA,GAA8B,OAATA,IAAkBR,MAAMC,QAAQO,EACrE,CAkBO,SAASC,EAAUX,GACxB,GAAIE,MAAMC,QAAQH,GAAM,CACtB,MAAMY,EAAS,GACf,QAASP,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAC9BO,EAAOP,GAAKM,EAAUX,EAAIK,IAE5B,OAAOO,CACT,CAEA,GAAIH,EAAST,GAAM,CACjB,MAAMY,EAAS,CAAC,EAChB,UAAWJ,KAAOR,EAChBY,EAAOJ,GAAOG,EAAUX,EAAIQ,IAE9B,OAAOI,CACT,CAEA,OAAOZ,CACT,CAEO,SAASa,EAAiBC,GAC/B,OAAOL,EAASK,IAAc,cAAeA,CAC/C,CAEO,SAASC,EAAoBzB,EAAc0B,GAChD,OAAOT,OAAOU,eAAeD,EAAI,OAAQ,CAAEvB,MAAOH,GACpD,CCtGA,IAAA4B,E,yQAAwBC,CAAAxC,KAKlByC,EAAU,CACd,YAAa,qFACbC,KAAM,6DACNC,IAAK,oCACLC,MACE,uIACFC,SAAU,+EACVC,KAAM,4BACN,eAAgB,sBAChB,wBAAyB,oCAGdC,EAAkD,CAC7D,YAAchB,GACZ,MAAMiB,EAAgBjB,EAAKkB,cAC3B,IAAKR,EAAQ,aAAaS,KAAKF,GAC7B,OAAO,EAGT,MAAMF,EAAO,IAAIK,KAAKH,GACtB,OAAQI,MAAMN,EAAKO,UACrB,EACAV,IAAIZ,GACKU,EAAQE,IAAIO,KAAKnB,GAE1Ba,MAAMb,GACJ,IAAKU,EAAQG,MAAMM,KAAKnB,GACtB,OAAO,EAGT,MAAOuB,EAAOC,GAAUxB,EAAKyB,MAAM,KAEnC,QAAIF,EAAM7B,OAAS,KAA8B,IAAxB6B,EAAMG,QAAQ,OAA6B,MAAbH,EAAM,IAA0C,MAA5BA,EAAMA,EAAM7B,OAAS,OAI5F8B,EAAO9B,OAAS,MAAgC,IAAzB8B,EAAOE,QAAQ,OAA8B,MAAdF,EAAO,IAA4C,MAA9BA,EAAOA,EAAO9B,OAAS,GAKxG,EACAiC,MAAA,EAAMnB,EAAAoB,SAAY,CAAEC,QAAS,IAC7BC,MAAA,EAAMtB,EAAAoB,SAAY,CAAEC,QAAS,IAE7Bf,SAASd,GACAU,EAAQI,SAASK,KAAKnB,GAE/Be,KAAKf,GACiB,iBAATA,KAIqB,IAA5BU,EAAQK,KAAKI,KAAKnB,KAIdqB,MAAM,IAAID,KAAKpB,GAAMsB,YAE/BS,MAAM/B,GACJ,IAEE,OADA,IAAIgC,OAAOhC,IACJ,CACT,OAASiC,GACP,OAAO,CACT,CACF,EACA,eAAejC,GACA,KAATA,GAIGU,EAAQ,gBAAgBS,KAAKnB,GAEtC,wBAAwBA,GACT,KAATA,GAIGU,EAAQ,yBAAyBS,KAAKnB,GAE/CW,KAAKX,GACIU,EAAQC,KAAKQ,KAAKnB,GAI3BkC,UAAU,EACV,aAAa,EACb,gBAAgB,EAChBC,MAAM,EACN,iBAAiB,EACjBC,KAAK,EACL,iBAAiB,EACjB,gBAAgB,GC/FLC,EAAsC,CACjDC,OAAOtC,GACED,EAASC,GAElBuC,MAAMvC,KACAR,MAAMC,QAAQO,IAKA,iBAATA,GACE,OAATA,GACA,WAAYA,GACZ,MAAOA,GACPH,OAAOD,KAAKI,GAAMN,OAAS,IAAMM,EAAKN,OAG1C8C,OAAOxC,GACkB,iBAATA,EAEhByC,OAAOzC,GACkB,iBAATA,EAEhB0C,QAAQ1C,GACiB,iBAATA,GAAqBA,EAAO,GAAM,EAElD2C,QAAQ3C,GACiB,kBAATA,EAEhB4C,KAAK5C,GACa,OAATA,GC1BE6C,EAAoD,ICJM,CAErEC,SAASC,EAAQ/C,EAAMgD,GACrB,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAGhB,QAASL,EAAI,EAAGA,EAAIoD,EAAOD,SAASpD,OAAQC,IAAK,CAC/C,MAAMG,EAAMiD,EAAOD,SAASnD,GAC5B,IAAKK,EAAKiD,eAAenD,GAEvB,OADAkD,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,EAEnB,CAEA,MAAO,EAAC,EAAM,KAChB,EAEAE,WAAWH,EAAQ/C,EAAMgD,GACvB,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAGhB,MAAMJ,EAAOC,OAAOD,KAAKmD,EAAOG,YAChC,UAAWpD,KAAOF,EAChB,QAAyB,IAAdI,EAAKF,IAQhB,GAAsC,kBAA3BiD,EAAOG,WAAWpD,IAQ7B,GAAI,cAAeiD,EAAOG,WAAWpD,GAAM,CACzC,MAAOqD,EAAOC,GAASL,EAAOG,WAAWpD,GAAKuD,UAAUrD,EAAKF,IAC7D,IAAKqD,EAEH,OADAH,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,EAEnB,OAbE,IAA+B,IAA3BD,EAAOG,WAAWpD,GAEpB,OADAkD,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,OAXnB,CACE,MAAMM,EAAaP,EAAOG,WAAWpD,GACjCC,EAASuD,IAAe,YAAaA,IACvCtD,EAAKF,GAAOwD,EAAWC,QAG3B,CAmBF,MAAO,EAAC,EAAM,KAChB,EAEAC,cAAA,CAAcT,EAAQ/C,EAAMgD,KACrBjD,EAASC,IAASH,OAAOD,KAAKI,GAAMN,QAAUqD,EAAOS,cACjD,EAAC,EAAM,MAGT,EAAC,EAAOR,GAGjBS,cAAA,CAAcV,EAAQ/C,EAAMgD,KACrBjD,EAASC,IAASH,OAAOD,KAAKI,GAAMN,QAAUqD,EAAOU,cACjD,EAAC,EAAM,MAGT,EAAC,EAAOT,GAGjBU,qBAAqBX,EAAQ/C,EAAMgD,GACjC,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAGhB,MAAMJ,EAAOC,OAAOD,KAAKI,GACnB2D,EAAaxD,EAAiB4C,EAAOW,sBAC3C,UAAW5D,KAAOF,EAChB,IAAImD,EAAOG,aAAcH,EAAOG,WAAWD,eAAenD,GAA1D,CAIA,GAAIiD,EAAOa,kBAAmB,CAC5B,IAAIC,GAAQ,EACZ,UAAWC,KAAWf,EAAOa,kBAC3B,GAAI,IAAI5B,OAAO8B,EAAS,KAAK3C,KAAKrB,GAAM,CACtC+D,GAAQ,EACR,KACF,CAEF,GAAIA,EACF,QAEJ,CAEA,IAAoC,IAAhCd,EAAOW,qBAET,OADAV,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,GAGjB,GAAIW,EAAY,CACd,MAAOR,EAAOC,GAASL,EAAOW,qBAAqBL,UAAUrD,EAAKF,IAClE,IAAKqD,EAEH,OADAH,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,EAEnB,CA1BA,CA6BF,MAAO,EAAC,EAAM,KAChB,EAEAY,kBAAkBb,EAAQ/C,EAAMgD,GAC9B,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAGhB,MAAM+D,EAAWlE,OAAOD,KAAKmD,EAAOa,mBACpC,UAAWE,KAAWC,EAAU,CAC9B,MAAMhC,EAAQ,IAAIC,OAAO8B,EAAS,KAClC,GAAiD,kBAAtCf,EAAOa,kBAAkBE,GAAwB,CAC1D,IAA0C,IAAtCf,EAAOa,kBAAkBE,GAC3B,UAAWhE,KAAOE,EAChB,GAAI+B,EAAMZ,KAAKrB,GAEb,OADAkD,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,GAIrB,QACF,CAEA,MAAMpD,EAAOC,OAAOD,KAAKI,GACzB,UAAWF,KAAOF,EAChB,GAAImC,EAAMZ,KAAKrB,IACT,cAAeiD,EAAOa,kBAAkBE,GAAU,CACpD,MAAOX,EAAOC,GAASL,EAAOa,kBAAkBE,GAAST,UACvDrD,EAAKF,IAEP,IAAKqD,EAEH,OADAH,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,EAEnB,CAGN,CAEA,MAAO,EAAC,EAAM,KAChB,EAEAgB,cAAcjB,EAAQ/C,EAAMgD,GAC1B,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAEhB,GAAoC,kBAAzB+C,EAAOiB,gBACa,IAAzBjB,EAAOiB,eAA2BnE,OAAOD,KAAKI,GAAMN,OAAS,EAC/D,MAAO,EAAC,EAAOsD,GAGnB,GAAI7C,EAAiB4C,EAAOiB,eAC1B,QAASlE,KAAOE,EAAM,CACpB,MAAOmD,EAAOC,GAASL,EAAOiB,cAAcX,UAAUvD,GACtD,IAAKqD,EAEH,OADAH,EAAa/D,KAAOa,EACb,EAAC,EAAOkD,EAEnB,CAGF,MAAO,EAAC,EAAM,KAChB,EAGAiB,MAAM,EACNC,MAAM,EACNX,SAAS,EAGTY,MAAM,EACNC,aAAa,EACbC,KAAK,EACLC,SAAS,EACTC,OAAO,EACPC,UAAU,EACVC,kBAAkB,EAClBC,iBAAiB,MCzL2C,CAC5DC,MAAM5B,EAAQ/C,EAAMgD,GAClB,IAAKxD,MAAMC,QAAQO,GACjB,MAAO,EAAC,EAAM,MAGhB,MAAM4E,EAAc7B,EAAO4B,MACrBE,EAAa7E,EAAKN,OAExB,GAA2B,kBAAhBkF,EACT,OAAoB,IAAhBA,GAAyBC,EAAa,EACjC,EAAC,EAAO7B,GAGV,EAAC,EAAM,MAGhB,GAAIxD,MAAMC,QAAQmF,GAAc,CAC9B,MAAME,EAAoBF,EAAYlF,OAChCqF,EAAcC,KAAKC,IAAIH,EAAmBD,GAChD,QAASlF,EAAI,EAAGA,EAAIoF,EAAapF,IAAK,CACpC,MAAMuF,EAAaN,EAAYjF,GAC/B,GAA0B,kBAAfuF,GASX,GAAI/E,EAAiB+E,GAAa,CAChC,MAAO/B,EAAOC,GAAS8B,EAAW7B,UAAUrD,EAAKL,IACjD,IAAKwD,EAGH,OAFAH,EAAalE,QAAUsE,EAAMtE,QAC7BkE,EAAa/D,KAAOU,EACb,EAAC,EAAOqD,EAEnB,OAfE,IAAmB,IAAfkC,QAA2C,IAAZlF,EAAKL,GAGtC,OAFAqD,EAAalE,QAAU,4BACvBkE,EAAa/D,KAAOU,EACb,EAAC,EAAOqD,EAarB,CAEA,MAAO,EAAC,EAAM,KAChB,CAEA,GAAI7C,EAAiByE,GACnB,QAASjF,EAAI,EAAGA,EAAIkF,EAAYlF,IAAK,CACnC,MAAOwD,EAAOC,GAASwB,EAAYvB,UAAUrD,EAAKL,IAClD,IAAKwD,EAGH,OAFAH,EAAalE,QAAUsE,EAAMtE,QAC7BkE,EAAa/D,KAAOU,EACb,EAAC,EAAOqD,EAEnB,CAGF,MAAO,EAAC,EAAM,KAChB,EAEAmC,SAAA,CAASpC,EAAQ/C,EAAMgD,EAAcoC,KAC9B5F,MAAMC,QAAQO,IAASA,EAAKN,QAAUqD,EAAOoC,SACzC,EAAC,EAAM,MAGT,EAAC,EAAOnC,GAGjBqC,SAAA,CAAStC,EAAQ/C,EAAMgD,EAAcoC,KAC9B5F,MAAMC,QAAQO,IAASA,EAAKN,QAAUqD,EAAOsC,SACzC,EAAC,EAAM,MAGT,EAAC,EAAOrC,GAGjBsC,gBAAgBvC,EAAQ/C,EAAMgD,EAAcoC,GAC1C,IAAK5F,MAAMC,QAAQO,KAAU+C,EAAO4B,QAAUnF,MAAMC,QAAQsD,EAAO4B,OACjE,MAAO,EAAC,EAAM,MAGhB,IAA+B,IAA3B5B,EAAOuC,gBACT,OAAItF,EAAKN,OAASqD,EAAO4B,MAAMjF,OACtB,EAAC,EAAOsD,GAEV,EAAC,EAAM,MAGhB,GAAIjD,EAASgD,EAAOuC,iBAAkB,CACpC,GAAInF,EAAiB4C,EAAOuC,iBAAkB,CAC5C,QAAS3F,EAAIoD,EAAO4B,MAAMjF,OAAQC,EAAIK,EAAKN,OAAQC,IAAK,CACtD,MAAOwD,EAAOC,GAASL,EAAOuC,gBAAgBjC,UAAUrD,EAAKL,IAC7D,IAAKwD,EAGH,OAFAH,EAAalE,QAAUsE,EAAMtE,QAC7BkE,EAAa/D,KAAOU,EACb,EAAC,EAAOqD,EAEnB,CACA,MAAO,EAAC,EAAM,KAChB,CAEA,MAAO,EAAC,EAAM,KAChB,CAEA,MAAO,EAAC,EAAM,KAChB,EAEAuC,YAAYxC,EAAQ/C,EAAMgD,GACxB,IAAKxD,MAAMC,QAAQO,KAAU+C,EAAOwC,YAClC,MAAO,EAAC,EAAM,MAGhB,MAAMC,EAAS,IAAIC,IAEnB,UAAWxG,KAAQe,EAAM,CACvB,IAAI0F,EAkBJ,GAdEA,EADkB,iBAATzG,EACC,KAAKA,IAENc,EAASd,GACR,KAAK0G,KAAKC,UAClB/F,OAAOgG,YACLhG,OAAOiG,QAAQ7G,GAAM8G,KAAK,EAAEC,IAAKC,KAAOD,EAAEE,cAAcD,QAGnDzG,MAAMC,QAAQR,GACb0G,KAAKC,UAAU3G,GAEfkH,OAAOlH,GAGfuG,EAAOY,IAAIV,GACb,MAAO,EAAC,EAAO1C,GAEjBwC,EAAOa,IAAIX,EACb,CAEA,MAAO,EAAC,EAAM,KAChB,EAEAY,SAASvD,EAAQ/C,EAAMgD,GACrB,IAAKxD,MAAMC,QAAQO,GACjB,MAAO,EAAC,EAAM,MAEhB,GAA+B,kBAApB+C,EAAOuD,SAChB,OAAIvD,EAAOuD,SACW,IAAhBtG,EAAKN,OACA,EAAC,EAAOsD,GAEV,EAAC,EAAM,MAGT,EAAC,EAAOA,GAGjB,QAASrD,EAAI,EAAGA,EAAIK,EAAKN,OAAQC,IAAK,CACpC,MAAOwD,EAAOC,GAASL,EAAOuD,SAASjD,UAAUrD,EAAKL,IACtD,GAAIwD,EACF,MAAO,EAAC,EAAM,KAGlB,CAEA,MAAO,EAAC,EAAOH,EACjB,MCnK6D,CAC7DuD,UAAA,CAAUxD,EAAQ/C,EAAMgD,IACF,iBAAThD,GAAqBA,EAAKN,QAAUqD,EAAOwD,UAC7C,EAAC,EAAM,MAGT,EAAC,EAAOvD,GAGjBwD,UAAA,CAAUzD,EAAQ/C,EAAMgD,IACF,iBAAThD,GAAqBA,EAAKN,QAAUqD,EAAOyD,UAC7C,EAAC,EAAM,MAGT,EAAC,EAAOxD,GAGjBc,QAAQf,EAAQ/C,EAAMgD,GACpB,GAAoB,iBAAThD,EACT,MAAO,EAAC,EAAM,MAGhB,MAAMyG,EAAgB,IAAIzE,OAAOe,EAAOe,QAAS,KAEjD,OAAI2C,aAAyBzE,SAAW,EAC/B,EAAC,EAAOgB,GAGbyD,EAActF,KAAKnB,GACd,EAAC,EAAM,MAGT,EAAC,EAAOgD,EACjB,EAEA0D,OAAO3D,EAAQ/C,EAAMgD,EAAc2D,GACjC,GAAoB,iBAAT3G,EACT,MAAO,EAAC,EAAM,MAGhB,MAAM4G,EAAiBD,EAAeE,QAAQC,IAAI/D,EAAO2D,QACzD,OAAuB,IAAnBE,GAI0B,mBAAnBA,GACLA,EAAe5G,GAJZ,EAAC,EAAM,MAWT,EAAC,EAAOgD,EACjB,EAEA+D,KAAKhE,EAAQ/C,EAAMgD,GAEjB,MAAMvD,EAAUD,MAAMC,QAAQO,GACxBD,EAA2B,iBAATC,GAA8B,OAATA,EAE7C,QAASL,EAAI,EAAGA,EAAIoD,EAAOgE,KAAKrH,OAAQC,IAAK,CAC3C,MAAMqH,EAAWjE,EAAOgE,KAAKpH,GAG7B,GAAIqH,IAAahH,EACf,MAAO,EAAC,EAAM,MAIhB,IACGP,GAAWD,MAAMC,QAAQuH,IACzBjH,GAAgC,iBAAbiH,GAAsC,OAAbA,IAEzC3H,EAAU2H,EAAUhH,GACtB,MAAO,EAAC,EAAM,KAGpB,CAEA,MAAO,EAAC,EAAOgD,EACjB,MCjF6D,CAC7DiE,QAAQlE,EAAQ/C,EAAMgD,EAAckE,GAClC,GAAoB,iBAATlH,EACT,MAAO,EAAC,EAAM,MAGhB,IAAIiF,EAAMlC,EAAOkE,QAOjB,MANuC,iBAA5BlE,EAAOoE,iBAChBlC,EAAMlC,EAAOoE,iBAAmB,OACK,IAA5BpE,EAAOoE,mBAChBlC,GAAO,OAGLjF,EAAOiF,EACF,EAAC,EAAOjC,GAGV,EAAC,EAAM,KAChB,EAEAoE,QAAQrE,EAAQ/C,EAAMgD,EAAckE,GAClC,GAAoB,iBAATlH,EACT,MAAO,EAAC,EAAM,MAGhB,IAAIqH,EAAMtE,EAAOqE,QAOjB,MANuC,iBAA5BrE,EAAOuE,iBAChBD,EAAMtE,EAAOuE,iBAAmB,OACK,IAA5BvE,EAAOuE,mBAChBD,GAAO,OAGLrH,EAAOqH,EACF,EAAC,EAAOrE,GAGV,EAAC,EAAM,KAChB,EAEAuE,WAAWxE,EAAQ/C,EAAMgD,EAAckE,GACrC,GAAoB,iBAATlH,EACT,MAAO,EAAC,EAAM,MAGhB,MAAMwH,EAAWxH,EAAO+C,EAAOwE,WAE/B,OAAKE,SAASD,GPUX,SAAwBxB,EAAGC,EAAGyB,EAAU,OAC7C,OAAO1C,KAAK2C,IAAI3B,EAAIC,IAAMyB,EAAU1C,KAAKqC,IAAIrC,KAAK2C,IAAI3B,GAAIhB,KAAK2C,IAAI1B,GACrE,CORS2B,CAAeJ,EAAUxC,KAAK6C,MAAML,IAIlC,EAAC,EAAM,MAHL,EAAC,EAAOxE,GAJR,EAAC,EAAM,KAQlB,EAEAmE,iBAAA,CAAiBpE,EAAQ/C,EAAMgD,EAAckE,IAEzB,iBAATlH,GAC4B,iBAA5B+C,EAAOoE,kBACd,YAAapE,EAEN,EAAC,EAAM,MAGZ/C,GAAQ+C,EAAOoE,iBAAmB,MAC7B,EAAC,EAAOnE,GAGV,EAAC,EAAM,MAGhBsE,iBAAA,CAAiBvE,EAAQ/C,EAAMgD,EAAckE,IAEzB,iBAATlH,GAC4B,iBAA5B+C,EAAOuE,kBACd,YAAavE,EAEN,EAAC,EAAM,MAGZ/C,GAAQ+C,EAAOuE,iBACV,EAAC,EAAOtE,GAGV,EAAC,EAAM,UClF4C,CAC5D8E,SAAA,CAAS/E,EAAQ/C,EAAMgD,IACjBD,EAAO+E,UAAqB,OAAT9H,EACd,EAAC,EAAOgD,GAGV,EAAC,EAAM,MAGhB+E,MAAMhF,EAAQ/C,EAAMgD,GAClB,QAASrD,EAAI,EAAGA,EAAIoD,EAAOgF,MAAMrI,OAAQC,IACvC,GAAII,EAASgD,EAAOgF,MAAMpI,KACxB,GAAI,cAAeoD,EAAOgF,MAAMpI,GAAI,CAClC,MAAOqI,EAAS5E,GAASL,EAAOgF,MAAMpI,GAAG0D,UAAUrD,GACnD,IAAKgI,EACH,MAAO,EAAC,EAAOhF,EAEnB,OAIF,GAA+B,kBAApBD,EAAOgF,MAAMpI,IAOxB,GAAIK,IAAS+C,EAAOgF,MAAMpI,GACxB,MAAO,EAAC,EAAOqD,QAPf,GAAIiF,QAAQjI,KAAU+C,EAAOgF,MAAMpI,GACjC,MAAO,EAAC,EAAOqD,GAUrB,MAAO,EAAC,EAAM,KAChB,EAEAkF,MAAMnF,EAAQ/C,EAAMgD,GAClB,QAASrD,EAAI,EAAGA,EAAIoD,EAAOmF,MAAMxI,OAAQC,IAAK,CAC5C,GAAII,EAASgD,EAAOmF,MAAMvI,IAAK,CAC7B,GAAI,cAAeoD,EAAOmF,MAAMvI,GAAI,CAClC,MAAOqI,EAAS5E,GAASL,EAAOmF,MAAMvI,GAAG0D,UAAUrD,GACnD,GAAIgI,EACF,MAAO,EAAC,EAAM,MAEhB,QACF,CACA,MAAO,EAAC,EAAM,KAChB,CACE,GAA+B,kBAApBjF,EAAOmF,MAAMvI,IAClBsI,QAAQjI,KAAU+C,EAAOmF,MAAMvI,GACjC,MAAO,EAAC,EAAM,MAIlB,GAAIK,IAAS+C,EAAOmF,MAAMvI,GACxB,MAAO,EAAC,EAAM,KAGpB,CAEA,MAAO,EAAC,EAAOqD,EACjB,EAEAmF,MAAMpF,EAAQ/C,EAAMgD,GAClB,IAAIoF,EAAa,EACjB,QAASzI,EAAI,EAAGA,EAAIoD,EAAOoF,MAAMzI,OAAQC,IACvC,GAAII,EAASgD,EAAOoF,MAAMxI,IAA1B,CACE,GAAI,cAAeoD,EAAOoF,MAAMxI,GAAI,CAClC,MAAOqI,EAAS5E,GAASL,EAAOoF,MAAMxI,GAAG0D,UAAUrD,GAC/CgI,GACFI,IAEF,QACF,CACAA,GAaF,KAViC,kBAApBrF,EAAOoF,MAAMxI,GAOpBK,IAAS+C,EAAOoF,MAAMxI,IACxByI,IAPIH,QAAQjI,KAAU+C,EAAOoF,MAAMxI,IACjCyI,IAWR,OAAmB,IAAfA,EACK,EAAC,EAAM,MAGT,EAAC,EAAOpF,EACjB,EAEAqF,aAAatF,EAAQ/C,EAAMgD,GACzB,IAAKjD,EAASC,GACZ,MAAO,EAAC,EAAM,MAGhB,UAAWF,KAAOiD,EAAOsF,aAAc,CACrC,GAAIvI,KAAOE,IAAS,EAClB,SAGF,MAAMsI,EAAavF,EAAOsF,aAAavI,GACvC,GAAIN,MAAMC,QAAQ6I,GAAa,CAC7B,QAAS3I,EAAI,EAAGA,EAAI2I,EAAW5I,OAAQC,IACrC,KAAM2I,EAAW3I,KAAMK,GAErB,OADAgD,EAAa/D,KAAOU,EACb,EAAC,EAAOqD,GAGnB,QACF,CACA,GAA0B,kBAAfsF,EAA0B,CACnC,GAAIA,EACF,SAEF,MAAO,EAAC,EAAOtF,EACjB,CAEA,GAA0B,iBAAfsF,EAAyB,CAClC,GAAIA,KAActI,EAChB,SAEF,MAAO,EAAC,EAAOgD,EACjB,CACA,MAAOgF,EAAS5E,GAASkF,EAAWjF,UAAUrD,GAC9C,IAAKgI,EACH,MAAO,EAAC,EAAO5E,EAEnB,CAEA,MAAO,EAAC,EAAM,KAChB,EAEAmF,MAAA,CAAMxF,EAAQ/C,EAAMgD,IAEhBhD,IAAS+C,EAAOwF,OACfxI,EAASC,IACRD,EAASgD,EAAOwF,QAChBlJ,EAAUW,EAAM+C,EAAOwF,QACxB/I,MAAMC,QAAQO,IACbR,MAAMC,QAAQsD,EAAOwF,QACrBlJ,EAAUW,EAAM+C,EAAOwF,OAElB,EAAC,EAAM,MAET,EAAC,EAAOvF,GAGjBwF,GAAGzF,EAAQ/C,EAAMgD,GACf,GAAI,SAAUD,IAAW,GAAS,SAAUA,IAAW,EACrD,MAAO,EAAC,EAAM,MAEhB,GAAyB,kBAAdA,EAAOyF,GAAkB,CAClC,GAAIzF,EAAOyF,IACT,GAAIzF,EAAOkB,KACT,OAAOlB,EAAOkB,KAAKZ,UAAUrD,QAEjC,GAAW+C,EAAOmB,KAChB,OAAOnB,EAAOmB,KAAKb,UAAUrD,GAE/B,MAAO,EAAC,EAAM,KAChB,CAEA,MAAOgI,EAAS5E,GAASL,EAAOyF,GAAGnF,UAAUrD,GAC7C,OAAIgI,EACEjF,EAAOkB,KACFlB,EAAOkB,KAAKZ,UAAUrD,GAExB,EAAC,EAAM,MAEV+C,EAAOmB,KACFnB,EAAOmB,KAAKb,UAAUrD,GAExB,EAAC,EAAM,KAElB,EAEAyI,IAAI1F,EAAQ/C,EAAMgD,GAChB,GAA0B,kBAAfD,EAAO0F,IAChB,OAAI1F,EAAO0F,IACF,EAAC,EAAOzF,GAEV,EAAC,EAAM,MAGhB,GAAIjD,EAASgD,EAAO0F,KAAM,CACxB,GAAI,cAAe1F,EAAO0F,IAAK,CAC7B,MAAOtF,EAAOC,GAASL,EAAO0F,IAAIpF,UAAUrD,GAC5C,OAAImD,EACK,EAAC,EAAOH,GAEV,EAAC,EAAM,KAChB,CACA,MAAO,EAAC,EAAOA,EACjB,CAEA,MAAO,EAAC,EAAOA,EACjB,I,gBCvKK,MACL0F,MAAQ,IAAIC,IACZ9B,QAAU,IAAI8B,IACd9F,SAAW,IAAI8F,IACfC,WAAY,EAEZ1J,aAAY0J,UACVA,GAAY,GAGV,CAAC,GACHxJ,KAAKwJ,UAAYA,EAEjB,UAAYC,EAAMC,KAAcjJ,OAAOiG,QAAQzD,GAC7CjD,KAAK2J,QAAQF,EAAMC,GAGrB,UAAYE,EAASF,KAAcjJ,OAAOiG,QAAQjD,GAChDzD,KAAK6J,WAAWD,EAASF,GAG3B,UAAYpC,EAAQoC,KAAcjJ,OAAOiG,QAAQ9E,GAC3C8H,GACF1J,KAAK8J,UAAUxC,EAAQoC,EAG7B,CAEAC,QAAQnK,EAAckK,GACpB1J,KAAKsJ,MAAMS,IAAIvK,EAAMkK,EACvB,CAEAI,UAAUtK,EAAckK,GACtB1J,KAAKyH,QAAQsC,IAAIvK,EAAMkK,EACzB,CAEAG,WAAWrK,EAAckK,GACvB1J,KAAKyD,SAASsG,IAAIvK,EAAMkK,EAC1B,CAEAM,QAAQrG,GACN,MAAMsG,EAAiBjK,KAAKkK,cAAcvG,EAAQ,KAClD,IAAKsG,EAAehG,UAAW,CAC7B,IAAkC,IAA9BjE,KAAKmK,aAAaxG,GACpB,MAAM,IAAIrE,EAAgB,iBAAkB,KAG9C2K,EAAehG,UAAYhD,EACzB,MACCL,GAAS,EAAC,EAAM,MAErB,CAEA,MAAMwJ,EAAuBxJ,IACvBZ,KAAKwJ,YACP5I,EAAOC,EAAUD,IAEZqJ,EAAehG,UAAUrD,IAIlC,OAFAwJ,EAASH,eAAiBA,EAEnBG,CACT,CAEQF,cACNvG,EACAlE,GAEKkB,EAASgD,KAEVA,GADa,IAAXA,EACO,CACPmF,MAAO,CACL,CAAEW,KAAM,UACR,CAAEA,KAAM,UACR,CAAEA,KAAM,WACR,CAAEA,KAAM,SACR,CAAEA,KAAM,UACR,CAAEA,KAAM,WAGQ,IAAX9F,EACA,CACPoF,MAAO,IAGA,CACPA,MAAO,CAACpF,KAKd,MAAMsG,EAAiC,CAAC,EAExC,GAAI,SAAUtG,EAAQ,CACpB,MAAM2F,EAAQlJ,MAAMC,QAAQsD,EAAO8F,MAC/B9F,EAAO8F,KACP9F,EAAO8F,KAAKpH,MAAM,KAAKgI,IAAKC,GAAMA,EAAEC,QAElCC,EAAkC,GACxC,IAAIhL,EAAO,GACX,UAAWiK,KAAQH,EAAO,CACxB,MAAMI,EAAY1J,KAAKsJ,MAAM5B,IAAI+B,GAC7BC,IACFc,EAAgBC,KAAKf,GACrBlK,IAASA,EAAO,OAAS,IAAMkK,EAAUlK,KAE7C,CACA,MAAMkL,EAAY,IAAIpL,EAAgB,eAAgBG,GAEtD,GAA+B,IAA3B+K,EAAgBlK,OAClB,MAAMoK,EAGR,GAA+B,IAA3BF,EAAgBlK,OAAc,CAChC,MAAMqK,EAAiBH,EAAgB,GACvCP,EAAehG,UAAYhD,EACzBzB,EACCoB,GACK+J,EAAe/J,GACV,EAAC,EAAM,MAET,EAAC,EAAO8J,GAGrB,MACET,EAAehG,UAAYhD,EACzBzB,EACCoB,IACC,UAAW8I,KAAac,EACtB,GAAId,EAAU9I,GACZ,MAAO,EAAC,EAAM,MAGlB,MAAO,EAAC,EAAO8J,EAAS,EAIhC,CAEA,QAAShK,KAAOiD,EAAQ,CACtB,GAAY,SAARjD,EACF,SAGF,IAAIkK,EAAmB5K,KAAKyD,SAASiE,IAAIhH,GACzC,GAAIkK,EAAkB,CACpB,MAAMhH,EAAe,IAAItE,EAAgB,WAAWoB,IAAOjB,GAC3D,GAAIwK,EAAehG,UAAW,CAC5B,MAAM4G,EAAgBZ,EAAehG,UAC/BzE,EAAO,GAAGqL,EAAcrL,YAAYoL,EAAiBpL,OAC3DyK,EAAehG,UAAYhD,EACzBzB,EACCoB,IACC,IAAKmD,EAAOC,GAAS6G,EAAcjK,GACnC,OAAKmD,EAIG6G,EACNX,EACArJ,EACAgD,EACA5D,MAPO,EAAC,EAAOgE,EAQjB,EAGN,MACEiG,EAAehG,UAAYhD,EACzB2J,EAAiBpL,KAChBoB,GACSgK,EACNX,EACArJ,EACAgD,EACA5D,MAKV,CAEIW,EAASgD,EAAOjD,IAClBuJ,EAAevJ,GAAOV,KAAKkK,cACzBvG,EAAOjD,GACP,GAAGjB,KAAWiB,KAKdN,MAAMC,QAAQsD,EAAOjD,IACvBuJ,EAAevJ,GAAOiD,EAAOjD,GAAK2J,IAAI,CAACrJ,EAAW8J,IAChD9K,KAAKmK,aAAanJ,GACdhB,KAAKkK,cAAclJ,EAAW,GAAGvB,KAAWiB,KAAOoK,KACnD9J,GAKRiJ,EAAevJ,GAAOiD,EAAOjD,EAC/B,CAEA,OAAOuJ,CACT,CAEAE,aAAanJ,GACX,GAAIL,EAASK,GAAY,CACvB,GAAI,SAAUA,EACZ,OAAO,EAGT,QAAS+J,KAAU/J,EACjB,GAAIhB,KAAKyD,SAASuD,IAAI+D,GACpB,OAAO,CAGb,CACA,OAAO,CACT,I"}