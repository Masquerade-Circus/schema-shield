//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","constructor","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","schema","valid","error","array","string","number","integer","Number","isInteger","boolean","null","keywords","required","hasOwnProperty","properties","schemaShieldInstance","finalData","prop","schemaProp","default","validatorResult","validate","maxProperties","minProperties","additionalProperties","isCompiledSchema","patternProperties","match","pattern","patterns","propertyNames","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Set","item","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","has","add","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","join","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","areMultiples","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","validationResult","oneOf","validCount","dependencies","dependency","const","contains","if","then","thenResult","else","elseResult","not","types","Map","type","addType","keyword","addKeyword","addFormat","validator","set","compile","compiledSchema","compileSchema","map","t","trim","filter","keywordValidator","validators","push","isSchemaLike","subSchema","index","typeValid","result","isSchemaOrKeywordPresent","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","export class ValidationError extends Error {\r\n  name: string;\r\n  pointer: string;\r\n  message: string;\r\n  value: any;\r\n  code: string;\r\n\r\n  constructor(message: string, pointer?: string) {\r\n    super(message);\r\n    this.pointer = pointer;\r\n  }\r\n}\r\n\r\nexport const defaultValidator = (schema, data, pointer) => {\r\n  return [new ValidationError('No validator for this schema', pointer)];\r\n};\r\n\r\nexport function deepEqual(obj: Array<any> | Record<string, any>, other: Array<any> | Record<string, any>) {\r\n  if (Array.isArray(obj) && Array.isArray(other)) {\r\n    if (obj.length !== other.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < obj.length; i++) {\r\n      if (!deepEqual(obj[i], other[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof obj === 'object' && typeof other === 'object') {\r\n    if (obj === null || other === null) {\r\n      return obj === other;\r\n    }\r\n\r\n    const keys = Object.keys(obj);\r\n    if (keys.length !== Object.keys(other).length) {\r\n      return false;\r\n    }\r\n\r\n    for (const key of keys) {\r\n      if (!deepEqual(obj[key], other[key])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return obj === other;\r\n}\r\n\r\nexport function isObject(data) {\r\n  return typeof data === 'object' && data !== null && !Array.isArray(data);\r\n}\r\n\r\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\r\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\r\n}\r\n\r\nexport function getUTF16Length(str) {\r\n  let length = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const codePoint = str.codePointAt(i);\r\n    if (codePoint > 0xffff) {\r\n      i++;\r\n    }\r\n    length++;\r\n  }\r\n  return length;\r\n}\r\n\r\nexport function deepClone(obj: any): any {\r\n  if (Array.isArray(obj)) {\r\n    const result = [];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      result[i] = deepClone(obj[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  if (isObject(obj)) {\r\n    const result = {};\r\n    for (const key in obj) {\r\n      result[key] = deepClone(obj[key]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return obj;\r\n}\r\n","import isMyIpValid from 'is-my-ip-valid';\r\nimport { FormatFunction } from './index';\r\nimport { ValidationError } from './utils';\r\n\r\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\r\nconst RegExps = {\r\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\r\n  email:\r\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\r\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\r\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\r\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\r\n};\r\n\r\nexport const Formats: Record<string, FormatFunction | false> = {\r\n  ['date-time'](data) {\r\n    const upperCaseData = data.toUpperCase();\r\n    if (!RegExps['date-time'].test(upperCaseData)) {\r\n      return false;\r\n    }\r\n\r\n    const date = new Date(upperCaseData);\r\n    return !isNaN(date.getTime());\r\n  },\r\n  uri(data) {\r\n    return RegExps.uri.test(data);\r\n  },\r\n  email(data) {\r\n    if (!RegExps.email.test(data)) {\r\n      return false;\r\n    }\r\n\r\n    const [local, domain] = data.split('@');\r\n\r\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  ipv4: isMyIpValid({ version: 4 }),\r\n  ipv6: isMyIpValid({ version: 6 }),\r\n\r\n  hostname(data) {\r\n    return RegExps.hostname.test(data);\r\n  },\r\n  date(data) {\r\n    if (typeof data !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    if (RegExps.date.test(data) === false) {\r\n      return false;\r\n    }\r\n\r\n    return !isNaN(new Date(data).getTime());\r\n  },\r\n  regex(data) {\r\n    try {\r\n      new RegExp(data);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  'json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['json-pointer'].test(data);\r\n  },\r\n  'relative-json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['relative-json-pointer'].test(data);\r\n  },\r\n  time(data) {\r\n    return RegExps.time.test(data);\r\n  },\r\n\r\n  // Not supported yet\r\n  duration: false,\r\n  'idn-email': false,\r\n  'idn-hostname': false,\r\n  uuid: false,\r\n  'uri-reference': false,\r\n  iri: false,\r\n  'iri-reference': false,\r\n  'uri-template': false,\r\n};\r\n","import { isObject, ValidationError } from './utils';\r\nimport { ValidatorFunction } from './index';\r\n\r\nexport const Types: Record<string, ValidatorFunction> = {\r\n  object(schema, data, pointer) {\r\n    if (isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not an object', pointer),\r\n      data,\r\n    };\r\n  },\r\n  array(schema, data, pointer) {\r\n    if (Array.isArray(data)) {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null && 'length' in data) {\r\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\r\n      const keys = Object.keys(data);\r\n      if (keys.length > 0 && (keys[0] !== '0' || keys.length !== data.length)) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Data is not an array', pointer),\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not an array', pointer),\r\n      data,\r\n    };\r\n  },\r\n  string(schema, data, pointer) {\r\n    if (typeof data === 'string') {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not a string', pointer),\r\n      data,\r\n    };\r\n  },\r\n  number(schema, data, pointer) {\r\n    if (typeof data === 'number') {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not a number', pointer),\r\n      data,\r\n    };\r\n  },\r\n  integer(schema, data, pointer) {\r\n    if (typeof data === 'number' && Number.isInteger(data)) {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not an integer', pointer),\r\n      data,\r\n    };\r\n  },\r\n  boolean(schema, data, pointer) {\r\n    // Check if data is a boolean like value\r\n    if (typeof data === 'boolean') {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not a boolean', pointer),\r\n      data,\r\n    };\r\n  },\r\n  null(schema, data, pointer) {\r\n    if (data === null) {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Data is not null', pointer),\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\r\nimport { NumberKeywords } from \"./keywords/number-keywords\";\r\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\r\nimport { OtherKeywords } from \"./keywords/other-keywords\";\r\nimport { StringKeywords } from \"./keywords/string-keywords\";\r\nimport { ValidatorFunction } from \"./index\";\r\n\r\nexport const keywords: Record<string, ValidatorFunction> = {\r\n  ...ObjectKeywords,\r\n  ...ArrayKeywords,\r\n  ...StringKeywords,\r\n  ...NumberKeywords,\r\n  ...OtherKeywords\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ObjectKeywords: Record<string, ValidatorFunction> = {\r\n  // Object\r\n  required(schema, data, pointer) {\r\n    if (!isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        error: null,\r\n        data,\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < schema.required.length; i++) {\r\n      const key = schema.required[i];\r\n      if (!data.hasOwnProperty(key)) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Property is required', `${pointer}/${key}`),\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n\r\n  properties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let finalData = { ...data };\r\n    const keys = Object.keys(schema.properties);\r\n    for (const key of keys) {\r\n      const prop = data[key];\r\n      if (typeof prop === 'undefined') {\r\n        const schemaProp = schema.properties[key];\r\n        if (isObject(schemaProp) && 'default' in schemaProp) {\r\n          finalData[key] = schemaProp.default;\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (typeof schema.properties[key] === 'boolean') {\r\n        if (schema.properties[key] === false) {\r\n          return {\r\n            valid: false,\r\n            error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\r\n            data,\r\n          };\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = schemaShieldInstance.validate(schema.properties[key], prop);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        return { valid: false, error: validatorResult.error, data: finalData };\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n\r\n  maxProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Object has too many properties', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  minProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Object has too few properties', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let finalData = { ...data };\r\n    const keys = Object.keys(data);\r\n    const isCompiledSchema = schemaShieldInstance.isCompiledSchema(schema.additionalProperties);\r\n    for (const key of keys) {\r\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      if (schema.patternProperties) {\r\n        let match = false;\r\n        for (const pattern in schema.patternProperties) {\r\n          if (new RegExp(pattern, 'u').test(key)) {\r\n            match = true;\r\n            break;\r\n          }\r\n        }\r\n        if (match) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (schema.additionalProperties === false) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\r\n          data,\r\n        };\r\n        continue;\r\n      }\r\n\r\n      if (isCompiledSchema) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.additionalProperties, finalData[key]);\r\n\r\n        finalData[key] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          return { valid: false, error: validatorResult.error, data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n\r\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let finalData = { ...data };\r\n    const patterns = Object.keys(schema.patternProperties);\r\n    for (const pattern of patterns) {\r\n      const regex = new RegExp(pattern, 'u');\r\n\r\n      if (typeof schema.patternProperties[pattern] === 'boolean') {\r\n        if (schema.patternProperties[pattern] === false) {\r\n          for (const key in finalData) {\r\n            if (regex.test(key)) {\r\n              return {\r\n                valid: false,\r\n                error: new ValidationError('Property is not allowed', `${pointer}/${key}`),\r\n                data: finalData,\r\n              };\r\n            }\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const keys = Object.keys(finalData);\r\n      for (const key of keys) {\r\n        if (regex.test(key)) {\r\n          const validatorResult = schemaShieldInstance.validate(schema.patternProperties[pattern], finalData[key]);\r\n\r\n          finalData[key] = validatorResult.data;\r\n\r\n          if (!validatorResult.valid) {\r\n            return { valid: false, error: validatorResult.error, data: finalData };\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n\r\n  propertyNames(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (typeof schema.propertyNames === 'boolean') {\r\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Property names are not allowed', pointer),\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    let finalData = { ...data };\r\n\r\n    if (schemaShieldInstance.isCompiledSchema(schema.propertyNames)) {\r\n      for (let key in finalData) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.propertyNames, key);\r\n\r\n        if (!validatorResult.valid) {\r\n          return { valid: false, error: validatorResult.error, data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\r\n  items(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const schemaItems = schema.items;\r\n    const dataLength = data.length;\r\n\r\n    if (typeof schemaItems === 'boolean') {\r\n      if (schemaItems === false && dataLength > 0) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Array is not allowed', pointer),\r\n          data,\r\n        };\r\n      }\r\n\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (Array.isArray(schemaItems)) {\r\n      const schemaItemsLength = schemaItems.length;\r\n      const finalData = [...data];\r\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\r\n      for (let i = 0; i < itemsLength; i++) {\r\n        if (typeof schemaItems[i] === 'boolean') {\r\n          if (schemaItems[i] === false && typeof finalData[i] !== 'undefined') {\r\n            return {\r\n              valid: false,\r\n              error: new ValidationError('Array item is not allowed', `${pointer}/${i}`),\r\n              data: finalData,\r\n            };\r\n          }\r\n          continue;\r\n        }\r\n\r\n        const validatorResult = schemaShieldInstance.validate(schemaItems[i], finalData[i]);\r\n\r\n        finalData[i] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          return { valid: false, error: validatorResult.error, data: finalData };\r\n        }\r\n      }\r\n\r\n      return { valid: true, error: null, data: finalData };\r\n    }\r\n\r\n    if (schemaShieldInstance.isCompiledSchema(schemaItems)) {\r\n      for (let i = 0; i < dataLength; i++) {\r\n        const validatorErrors = schemaShieldInstance.validate(schemaItems, data[i]);\r\n\r\n        data[i] = validatorErrors.data;\r\n\r\n        if (!validatorErrors.valid) {\r\n          return { valid: false, error: validatorErrors.error, data };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n\r\n  minItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Array is too short', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('Array is too long', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (schema.additionalItems === false) {\r\n      if (data.length > schema.items.length) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Array has too many items', pointer),\r\n          data,\r\n        };\r\n      }\r\n\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (schemaShieldInstance.isCompiledSchema(schema.additionalItems)) {\r\n      const finalData = [...data];\r\n      for (let i = schema.items.length; i < finalData.length; i++) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.additionalItems, finalData[i]);\r\n        if (!validatorResult.valid) {\r\n          return { valid: false, error: validatorResult.error, data: finalData };\r\n        }\r\n        finalData[i] = validatorResult.data;\r\n      }\r\n      return { valid: true, error: null, data: finalData };\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n\r\n  uniqueItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || !schema.uniqueItems) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const unique = new Set();\r\n\r\n    for (const item of data) {\r\n      let itemStr;\r\n\r\n      // Change string to \"string\" to avoid false positives\r\n      if (typeof item === 'string') {\r\n        itemStr = `s:${item}`;\r\n\r\n        // Sort object keys to avoid false positives\r\n      } else if (isObject(item)) {\r\n        itemStr = `o:${JSON.stringify(Object.fromEntries(Object.entries(item).sort(([a], [b]) => a.localeCompare(b))))}`;\r\n      } else {\r\n        itemStr = JSON.stringify(item);\r\n      }\r\n\r\n      if (unique.has(itemStr)) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError('Array items are not unique', pointer),\r\n          data,\r\n        };\r\n      } else {\r\n        unique.add(itemStr);\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n};\r\n","import { ValidationError, deepEqual } from '../utils';\r\n\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const StringKeywords: Record<string, ValidatorFunction> = {\r\n  minLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length >= schema.minLength) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('String is too short', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length <= schema.maxLength) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError('String is too long', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  pattern(schema, data, pointer) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const patternRegexp = new RegExp(schema.pattern, 'u');\r\n\r\n    if (patternRegexp instanceof RegExp === false) {\r\n      return {\r\n        valid: false,\r\n        error: new ValidationError('Pattern is not a valid regular expression', pointer),\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = patternRegexp.test(data);\r\n\r\n    return {\r\n      valid,\r\n      error: valid ? null : new ValidationError('String does not match pattern', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  format(schema, data, pointer, formatInstance) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const formatValidate = formatInstance.formats.get(schema.format);\r\n    if (formatValidate === false) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (typeof formatValidate === 'function') {\r\n      const valid = formatValidate(data);\r\n\r\n      return {\r\n        valid,\r\n        error: valid ? null : new ValidationError(`String does not match format ${schema.format}`, pointer),\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Unknown format ${schema.format}`, pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  enum(schema, data, pointer) {\r\n    // Check if data is an array or an object\r\n    const isArray = Array.isArray(data);\r\n    const isObject = typeof data === 'object' && data !== null;\r\n\r\n    for (let i = 0; i < schema.enum.length; i++) {\r\n      const enumItem = schema.enum[i];\r\n\r\n      // Simple equality check\r\n      if (enumItem === data) {\r\n        return { valid: true, error: null, data };\r\n      }\r\n\r\n      // If data is an array or an object, check for deep equality\r\n      if ((isArray && Array.isArray(enumItem)) || (isObject && typeof enumItem === 'object' && enumItem !== null)) {\r\n        if (deepEqual(enumItem, data)) {\r\n          return { valid: true, error: null, data };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Value must be one of ${schema.enum.join(', ')}`, pointer),\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { areCloseEnough, ValidationError } from '../utils';\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\r\n  minimum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let min = schema.minimum;\r\n    if (typeof schema.exclusiveMinimum === 'number') {\r\n      min = schema.exclusiveMinimum + 1e-15;\r\n    } else if (schema.exclusiveMinimum === true) {\r\n      min += 1e-15;\r\n    }\r\n\r\n    const valid = data >= min;\r\n\r\n    return {\r\n      valid,\r\n      error: valid ? null : new ValidationError('Number is too small', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  maximum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let max = schema.maximum;\r\n    if (typeof schema.exclusiveMaximum === 'number') {\r\n      max = schema.exclusiveMaximum - 1e-15;\r\n    } else if (schema.exclusiveMaximum === true) {\r\n      max -= 1e-15;\r\n    }\r\n\r\n    const valid = data <= max;\r\n\r\n    return {\r\n      valid,\r\n      error: valid ? null : new ValidationError('Number is too big', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  multipleOf(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const quotient = data / schema.multipleOf;\r\n\r\n    // Detect overflow handling in JS\r\n    if (!isFinite(quotient)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const areMultiples = areCloseEnough(quotient, Math.round(quotient));\r\n\r\n    return {\r\n      valid: areMultiples,\r\n      error: areMultiples ? null : new ValidationError('Number is not a multiple of', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMinimum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMinimum !== 'number' || 'minimum' in schema) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const valid = data > schema.exclusiveMinimum + 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      error: valid ? null : new ValidationError('Number is too small', pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMaximum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMaximum !== 'number' || 'maximum' in schema) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const valid = data < schema.exclusiveMaximum - 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      error: valid ? null : new ValidationError('Number is too big', pointer),\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject, deepEqual } from '../utils';\r\n\r\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\r\n  nullable(schema, data, pointer) {\r\n    if (schema.nullable && data !== null) {\r\n      return {\r\n        valid: false,\r\n        error: new ValidationError('Value must be null to be empty', pointer),\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n\r\n  allOf(schema, data, pointer, schemaShieldInstance) {\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.allOf.length; i++) {\r\n      if (isObject(schema.allOf[i])) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.allOf[i], finalData);\r\n\r\n        if (!validatorResult.valid) {\r\n          return { valid: false, error: validatorResult.error, data: finalData };\r\n        }\r\n\r\n        finalData = validatorResult.data;\r\n      } else {\r\n        if (typeof schema.allOf[i] === 'boolean') {\r\n          if (Boolean(data) !== schema.allOf[i]) {\r\n            return {\r\n              valid: false,\r\n              error: new ValidationError(`Value must match all schemas in allOf`, pointer),\r\n              data: finalData,\r\n            };\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data !== schema.allOf[i]) {\r\n          return {\r\n            valid: false,\r\n            error: new ValidationError(`Value must match all schemas in allOf`, pointer),\r\n            data: finalData,\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n\r\n  anyOf(schema, data, pointer, schemaShieldInstance) {\r\n    let finalData = data;\r\n\r\n    for (let i = 0; i < schema.anyOf.length; i++) {\r\n      if (isObject(schema.anyOf[i])) {\r\n        const validationResult = schemaShieldInstance.validate(schema.anyOf[i], finalData);\r\n        finalData = validationResult.data;\r\n        if (validationResult.valid) {\r\n          return { valid: true, error: null, data: finalData };\r\n        }\r\n      } else {\r\n        if (typeof schema.anyOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.anyOf[i]) {\r\n            return { valid: true, error: null, data: finalData };\r\n          }\r\n        }\r\n\r\n        if (data === schema.anyOf[i]) {\r\n          return { valid: true, error: null, data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Value must match at least one schema in anyOf`, pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  oneOf(schema, data, pointer, schemaShieldInstance) {\r\n    let validCount = 0;\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.oneOf.length; i++) {\r\n      if (isObject(schema.oneOf[i])) {\r\n        const validationResult = schemaShieldInstance.validate(schema.oneOf[i], finalData);\r\n        if (validationResult.valid) {\r\n          validCount++;\r\n        }\r\n        finalData = validationResult.data;\r\n      } else {\r\n        if (typeof schema.oneOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.oneOf[i]) {\r\n            validCount++;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data === schema.oneOf[i]) {\r\n          validCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validCount === 1) {\r\n      return { valid: true, error: null, data: finalData };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Value must match exactly one schema in oneOf`, pointer),\r\n      data: finalData,\r\n    };\r\n  },\r\n\r\n  dependencies(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    let finalData = data;\r\n    for (const key in schema.dependencies) {\r\n      if (key in data === false) {\r\n        continue;\r\n      }\r\n\r\n      const dependency = schema.dependencies[key];\r\n      if (Array.isArray(dependency)) {\r\n        for (let i = 0; i < dependency.length; i++) {\r\n          if (!(dependency[i] in data)) {\r\n            return {\r\n              valid: false,\r\n              error: new ValidationError(`Dependency ${dependency[i]} is missing`, pointer),\r\n              data: finalData,\r\n            };\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'boolean') {\r\n        if (dependency) {\r\n          continue;\r\n        }\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError(`Dependency ${key} is missing`, pointer),\r\n\r\n          data: finalData,\r\n        };\r\n      }\r\n\r\n      if (typeof dependency === 'string') {\r\n        if (dependency in data) {\r\n          continue;\r\n        }\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError(`Dependency ${dependency} is missing`, pointer),\r\n          data: finalData,\r\n        };\r\n      }\r\n\r\n      const validatorResult = schemaShieldInstance.validate(dependency, finalData);\r\n      if (!validatorResult.valid) {\r\n        return { valid: false, error: validatorResult.error, data: finalData };\r\n      }\r\n      finalData = validatorResult.data;\r\n    }\r\n\r\n    return { valid: true, error: null, data: finalData };\r\n  },\r\n\r\n  const(schema, data, pointer) {\r\n    if (\r\n      data === schema.const ||\r\n      (isObject(data) && isObject(schema.const) && deepEqual(data, schema.const)) ||\r\n      (Array.isArray(data) && Array.isArray(schema.const) && deepEqual(data, schema.const))\r\n    ) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Value must be equal to const`, pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  contains(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (typeof schema.contains === 'boolean') {\r\n      if (schema.contains) {\r\n        const valid = data.length > 0;\r\n        return {\r\n          valid,\r\n          error: valid ? null : new ValidationError(`Value must contain at least one item`, pointer),\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: false,\r\n        error: new ValidationError(`Value must not contain any items`, pointer),\r\n        data,\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const validatorResult = schemaShieldInstance.validate(schema.contains, data[i]);\r\n      if (validatorResult.valid) {\r\n        return { valid: true, error: null, data };\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      error: new ValidationError(`Value must contain at least one item that matches the contains schema`, pointer),\r\n      data,\r\n    };\r\n  },\r\n\r\n  if(schema, data, pointer, schemaShieldInstance) {\r\n    if ('then' in schema === false && 'else' in schema === false) {\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    if (typeof schema.if === 'boolean') {\r\n      if (schema.if) {\r\n        if (schema.then) {\r\n          const thenResult = schemaShieldInstance.validate(schema.then, data);\r\n          if (!thenResult.valid) {\r\n            return thenResult;\r\n          }\r\n        }\r\n      } else if (schema.else) {\r\n        const elseResult = schemaShieldInstance.validate(schema.else, data);\r\n        if (!elseResult.valid) {\r\n          return elseResult;\r\n        }\r\n      }\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const ifResult = schemaShieldInstance.validate(schema.if, data);\r\n    if (ifResult.valid) {\r\n      if (schema.then) {\r\n        const thenResult = schemaShieldInstance.validate(schema.then, data);\r\n        if (!thenResult.valid) {\r\n          return thenResult;\r\n        }\r\n      }\r\n    } else if (schema.else) {\r\n      const elseResult = schemaShieldInstance.validate(schema.else, data);\r\n      if (!elseResult.valid) {\r\n        return elseResult;\r\n      }\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n\r\n  not(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof schema.not === 'boolean') {\r\n      if (schema.not) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError(`Value must not be valid`, pointer),\r\n          data,\r\n        };\r\n      }\r\n      return { valid: true, error: null, data };\r\n    }\r\n\r\n    const validatorResult = schemaShieldInstance.validate(schema.not, data);\r\n    if (validatorResult.valid) {\r\n      return {\r\n        valid: false,\r\n        error: new ValidationError(`Value must not be valid`, pointer),\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, error: null, data };\r\n  },\r\n};\r\n","import { ValidationError, isObject } from './utils';\r\n\r\nimport { Formats } from './formats';\r\nimport { Types } from './types';\r\nimport { keywords } from './keywords';\r\n\r\nexport interface Result {\r\n  valid: boolean;\r\n  error: ValidationError | null;\r\n  data: any;\r\n}\r\n\r\nexport interface ValidatorFunction {\r\n  (schema: CompiledSchema, data: any, pointer: string, schemaShieldInstance: SchemaShield): Result;\r\n}\r\n\r\nexport interface FormatFunction {\r\n  (data: any): boolean;\r\n}\r\n\r\nexport interface CompiledSchema {\r\n  validators?: ValidatorFunction[];\r\n  types?: ValidatorFunction[];\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Validator {\r\n  (data: any): Result;\r\n  compiledSchema: CompiledSchema;\r\n}\r\n\r\nexport class SchemaShield {\r\n  types = new Map<string, ValidatorFunction | false>();\r\n  formats = new Map<string, FormatFunction | false>();\r\n  keywords = new Map<string, ValidatorFunction | false>();\r\n\r\n  constructor() {\r\n    for (const type of Object.keys(Types)) {\r\n      this.addType(type, Types[type]);\r\n    }\r\n\r\n    for (const keyword of Object.keys(keywords)) {\r\n      this.addKeyword(keyword, keywords[keyword]);\r\n    }\r\n\r\n    for (const format of Object.keys(Formats)) {\r\n      if (Formats[format]) {\r\n        this.addFormat(format, Formats[format] as FormatFunction);\r\n      }\r\n    }\r\n  }\r\n\r\n  addType(name: string, validator: ValidatorFunction) {\r\n    this.types.set(name, validator);\r\n  }\r\n\r\n  addFormat(name: string, validator: FormatFunction) {\r\n    this.formats.set(name, validator);\r\n  }\r\n\r\n  addKeyword(name: string, validator: ValidatorFunction) {\r\n    this.keywords.set(name, validator);\r\n  }\r\n\r\n  compile(schema: any): Validator {\r\n    const compiledSchema = this.compileSchema(schema, '#');\r\n\r\n    const validate: Validator = (data: any) => this.validate(compiledSchema, data);\r\n    validate.compiledSchema = compiledSchema;\r\n\r\n    return validate;\r\n  }\r\n\r\n  private compileSchema(schema: Partial<CompiledSchema> | any, pointer): CompiledSchema {\r\n    if (!isObject(schema)) {\r\n      if (schema === true) {\r\n        schema = {\r\n          anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }, { type: 'array' }, { type: 'object' }, { type: 'null' }],\r\n        };\r\n      } else if (schema === false) {\r\n        schema = {\r\n          oneOf: [],\r\n        };\r\n      } else {\r\n        schema = {\r\n          oneOf: [schema],\r\n        };\r\n      }\r\n    }\r\n\r\n    const compiledSchema: CompiledSchema = {};\r\n\r\n    if ('type' in schema) {\r\n      const types = Array.isArray(schema.type) ? schema.type : schema.type.split(',').map((t) => t.trim());\r\n\r\n      compiledSchema.types = types.map((type) => this.types.get(type)).filter((validator) => Boolean(validator));\r\n    }\r\n\r\n    for (let key in schema) {\r\n      if (key === 'type') {\r\n        continue;\r\n      }\r\n\r\n      let keywordValidator = this.keywords.get(key);\r\n      if (keywordValidator) {\r\n        compiledSchema.validators = compiledSchema.validators || [];\r\n        compiledSchema.validators.push(keywordValidator);\r\n      }\r\n\r\n      if (this.isSchemaLike(schema[key])) {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        continue;\r\n      }\r\n      if (Array.isArray(schema[key])) {\r\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\r\n          this.isSchemaLike(subSchema) ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`) : subSchema\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (isObject(schema[key])) {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        continue;\r\n      }\r\n\r\n      compiledSchema[key] = schema[key];\r\n    }\r\n\r\n    return compiledSchema;\r\n  }\r\n\r\n  validate(schema: CompiledSchema, data: any): Result {\r\n    if (schema.types) {\r\n      let typeValid = false;\r\n      for (let type of schema.types) {\r\n        const result = type(schema, data, schema.pointer, this);\r\n\r\n        if (result.valid) {\r\n          typeValid = true;\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!typeValid) {\r\n        return {\r\n          valid: false,\r\n          error: new ValidationError(`Invalid type`, schema.pointer),\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    if (schema.validators) {\r\n      for (let validator of schema.validators) {\r\n        const result = validator(schema, data, schema.pointer, this);\r\n\r\n        if (!result.valid) {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: true,\r\n      error: null,\r\n      data,\r\n    };\r\n  }\r\n\r\n  private isSchemaOrKeywordPresent(subSchema: any): boolean {\r\n    if ('type' in subSchema) {\r\n      return true;\r\n    }\r\n\r\n    for (let subKey in subSchema) {\r\n      if (this.keywords.has(subKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isSchemaLike(subSchema: any): boolean {\r\n    return isObject(subSchema) && this.isSchemaOrKeywordPresent(subSchema);\r\n  }\r\n\r\n  isCompiledSchema(subSchema: any): boolean {\r\n    return isObject(subSchema) && ('validators' in subSchema || 'types' in subSchema);\r\n  }\r\n}\r\n"],"mappings":"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"}