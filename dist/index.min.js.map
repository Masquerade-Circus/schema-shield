//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","message","item","keyword","cause","path","_getCause","pointer","this","getCause","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","deepClone","result","isCompiledSchema","subSchema","getNamedFunction","name","fn","defineProperty","value","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","array","string","number","integer","boolean","null","keywords","required","schema","KeywordError","hasOwnProperty","properties","error","$validate","schemaProp","default","maxProperties","minProperties","additionalProperties","isCompiled","patternProperties","match","pattern","patterns","propertyNames","then","else","$ref","definitions","$id","$schema","title","$comment","contentMediaType","contentEncoding","items","schemaItems","dataLength","schemaItemsLength","itemsLength","Math","min","schemaItem","minItems","maxItems","additionalItems","uniqueItems","unique","Set","itemStr","JSON","stringify","fromEntries","entries","sort","a","b","localeCompare","String","has","add","contains","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","minimum","instance","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","oneOf","validCount","dependencies","dependency","const","if","not","types","Map","immutable","constructor","type","validator","addType","addKeyword","addFormat","set","compile","compiledSchema","compileSchema","isSchemaLike","validate","clonedData","valid","TypeError","typeValidations","methodName","map","t","trim","push","typeValidationsLength","typeValidation","keywordValidator","executeKeywordValidator","prevValidator","keywordError","index","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { CompiledSchema } from \"./index\";\n\nfunction getError(error, pointer = \"#\") {\n  const path =\n    pointer + \"/\" + error.keyword + (\"item\" in error ? \"/\" + error.item : \"\");\n\n  if (!error.cause) {\n    error.path = path;\n    return error;\n  }\n\n  return getError(error.cause, path);\n}\n\nexport class ValidationError extends Error {\n  message: string;\n  item: string | number;\n  keyword: string;\n  cause: ValidationError;\n  path: string = \"\";\n\n  private _getCause(pointer = \"#\") {\n    const path =\n      pointer + \"/\" + this.keyword + (\"item\" in this ? \"/\" + this.item : \"\");\n\n    if (!this.cause) {\n      this.path = path;\n      return this;\n    }\n\n    return this.cause._getCause(path);\n  }\n\n  getCause() {\n    return this._getCause();\n  }\n}\n\nexport function deepEqual(\n  obj: Array<any> | Record<string, any>,\n  other: Array<any> | Record<string, any>\n) {\n  if (Array.isArray(obj) && Array.isArray(other)) {\n    if (obj.length !== other.length) {\n      return false;\n    }\n\n    for (let i = 0; i < obj.length; i++) {\n      if (!deepEqual(obj[i], other[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (typeof obj === \"object\" && typeof other === \"object\") {\n    if (obj === null || other === null) {\n      return obj === other;\n    }\n\n    const keys = Object.keys(obj);\n    if (keys.length !== Object.keys(other).length) {\n      return false;\n    }\n\n    for (const key of keys) {\n      if (!deepEqual(obj[key], other[key])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return obj === other;\n}\n\nexport function isObject(data) {\n  return typeof data === \"object\" && data !== null && !Array.isArray(data);\n}\n\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\n}\n\nexport function getUTF16Length(str) {\n  let length = 0;\n  for (let i = 0; i < str.length; i++) {\n    const codePoint = str.codePointAt(i);\n    if (codePoint > 0xffff) {\n      i++;\n    }\n    length++;\n  }\n  return length;\n}\n\nexport function deepClone(obj: any): any {\n  if (Array.isArray(obj)) {\n    const result = [];\n    for (let i = 0; i < obj.length; i++) {\n      result[i] = deepClone(obj[i]);\n    }\n    return result;\n  }\n\n  if (isObject(obj)) {\n    const result = {};\n    for (const key in obj) {\n      result[key] = deepClone(obj[key]);\n    }\n    return result;\n  }\n\n  return obj;\n}\n\nexport function isCompiledSchema(subSchema: any): subSchema is CompiledSchema {\n  return isObject(subSchema) && \"$validate\" in subSchema;\n}\n\nexport function getNamedFunction<T>(name: string, fn: T): T {\n  return Object.defineProperty(fn, \"name\", { value: name });\n}\n","import isMyIpValid from 'is-my-ip-valid';\nimport { FormatFunction } from './index';\nimport { ValidationError } from './utils';\n\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\nconst RegExps = {\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\n  email:\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\n};\n\nexport const Formats: Record<string, FormatFunction | false> = {\n  ['date-time'](data) {\n    const upperCaseData = data.toUpperCase();\n    if (!RegExps['date-time'].test(upperCaseData)) {\n      return false;\n    }\n\n    const date = new Date(upperCaseData);\n    return !isNaN(date.getTime());\n  },\n  uri(data) {\n    return RegExps.uri.test(data);\n  },\n  email(data) {\n    if (!RegExps.email.test(data)) {\n      return false;\n    }\n\n    const [local, domain] = data.split('@');\n\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\n      return false;\n    }\n\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\n      return false;\n    }\n\n    return true;\n  },\n  ipv4: isMyIpValid({ version: 4 }),\n  ipv6: isMyIpValid({ version: 6 }),\n\n  hostname(data) {\n    return RegExps.hostname.test(data);\n  },\n  date(data) {\n    if (typeof data !== 'string') {\n      return false;\n    }\n\n    if (RegExps.date.test(data) === false) {\n      return false;\n    }\n\n    return !isNaN(new Date(data).getTime());\n  },\n  regex(data) {\n    try {\n      new RegExp(data);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  },\n  'json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['json-pointer'].test(data);\n  },\n  'relative-json-pointer'(data) {\n    if (data === '') {\n      return true;\n    }\n\n    return RegExps['relative-json-pointer'].test(data);\n  },\n  time(data) {\n    return RegExps.time.test(data);\n  },\n\n  // Not supported yet\n  duration: false,\n  'idn-email': false,\n  'idn-hostname': false,\n  uuid: false,\n  'uri-reference': false,\n  iri: false,\n  'iri-reference': false,\n  'uri-template': false,\n};\n","import { TypeFunction } from \"./index\";\nimport { isObject } from \"./utils\";\n\nexport const Types: Record<string, TypeFunction> = {\n  object(data) {\n    return isObject(data);\n  },\n  array(data) {\n    if (Array.isArray(data)) {\n      return true;\n    }\n\n    return (\n      typeof data === \"object\" &&\n      data !== null &&\n      \"length\" in data &&\n      \"0\" in data &&\n      Object.keys(data).length - 1 === data.length\n    );\n  },\n  string(data) {\n    return typeof data === \"string\";\n  },\n  number(data) {\n    return typeof data === \"number\";\n  },\n  integer(data) {\n    return typeof data === \"number\" && data % 1 === 0;\n  },\n  boolean(data) {\n    return typeof data === \"boolean\";\n  },\n  null(data) {\n    return data === null;\n  }\n};\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\nimport { KeywordFunction } from \"./index\";\nimport { NumberKeywords } from \"./keywords/number-keywords\";\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\nimport { OtherKeywords } from \"./keywords/other-keywords\";\nimport { StringKeywords } from \"./keywords/string-keywords\";\n\nexport const keywords: Record<string, KeywordFunction | false> = {\n  ...ObjectKeywords,\n  ...ArrayKeywords,\n  ...StringKeywords,\n  ...NumberKeywords,\n  ...OtherKeywords\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ObjectKeywords: Record<string, KeywordFunction | false> = {\n  // Object\n  required(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (let i = 0; i < schema.required.length; i++) {\n      const key = schema.required[i];\n      if (!data.hasOwnProperty(key)) {\n        KeywordError.item = key;\n        return KeywordError;\n      }\n    }\n\n    return;\n  },\n\n  properties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(schema.properties);\n    for (const key of keys) {\n      if (typeof data[key] === \"undefined\") {\n        const schemaProp = schema.properties[key];\n        if (isObject(schemaProp) && \"default\" in schemaProp) {\n          data[key] = schemaProp.default;\n        }\n        continue;\n      }\n\n      if (typeof schema.properties[key] === \"boolean\") {\n        if (schema.properties[key] === false) {\n          KeywordError.item = key;\n          return KeywordError;\n        }\n        continue;\n      }\n\n      if (\"$validate\" in schema.properties[key]) {\n        const error = schema.properties[key].$validate(data[key]);\n        if (error) {\n          KeywordError.item = key;\n          KeywordError.cause = error;\n          return KeywordError;\n        }\n      }\n    }\n\n    return;\n  },\n\n  maxProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  minProperties(schema, data, KeywordError) {\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  additionalProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const keys = Object.keys(data);\n    const isCompiled = isCompiledSchema(schema.additionalProperties);\n    for (const key of keys) {\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\n        continue;\n      }\n\n      if (schema.patternProperties) {\n        let match = false;\n        for (const pattern in schema.patternProperties) {\n          if (new RegExp(pattern, \"u\").test(key)) {\n            match = true;\n            break;\n          }\n        }\n        if (match) {\n          continue;\n        }\n      }\n\n      if (schema.additionalProperties === false) {\n        KeywordError.item = key;\n        return KeywordError;\n      }\n\n      if (isCompiled) {\n        const error = schema.additionalProperties.$validate(data[key]);\n        if (error) {\n          KeywordError.item = key;\n          KeywordError.cause = error;\n          return KeywordError;\n        }\n      }\n    }\n\n    return;\n  },\n\n  patternProperties(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    const patterns = Object.keys(schema.patternProperties);\n    for (const pattern of patterns) {\n      const regex = new RegExp(pattern, \"u\");\n      if (typeof schema.patternProperties[pattern] === \"boolean\") {\n        if (schema.patternProperties[pattern] === false) {\n          for (const key in data) {\n            if (regex.test(key)) {\n              KeywordError.item = key;\n              return KeywordError;\n            }\n          }\n        }\n        continue;\n      }\n\n      const keys = Object.keys(data);\n      for (const key of keys) {\n        if (regex.test(key)) {\n          if (\"$validate\" in schema.patternProperties[pattern]) {\n            const error = schema.patternProperties[pattern].$validate(\n              data[key]\n            );\n            if (error) {\n              KeywordError.item = key;\n              KeywordError.cause = error;\n              return KeywordError;\n            }\n          }\n        }\n      }\n    }\n\n    return;\n  },\n\n  propertyNames(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n    if (typeof schema.propertyNames === \"boolean\") {\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\n        return KeywordError;\n      }\n    }\n    if (isCompiledSchema(schema.propertyNames)) {\n      for (let key in data) {\n        const error = schema.propertyNames.$validate(key);\n        if (error) {\n          KeywordError.item = key;\n          KeywordError.cause = error;\n          return KeywordError;\n        }\n      }\n    }\n\n    return;\n  },\n\n  // Required by other keywords but not used as a function itself\n  then: false,\n  else: false,\n  default: false,\n\n  // Not implemented yet\n  $ref: false,\n  definitions: false,\n  $id: false,\n  $schema: false,\n  title: false,\n  $comment: false,\n  contentMediaType: false,\n  contentEncoding: false\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport { ValidationError, isCompiledSchema, isObject } from \"../utils\";\n\nexport const ArrayKeywords: Record<string, KeywordFunction> = {\n  items(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    const schemaItems = schema.items;\n    const dataLength = data.length;\n\n    if (typeof schemaItems === \"boolean\") {\n      if (schemaItems === false && dataLength > 0) {\n        return KeywordError;\n      }\n\n      return;\n    }\n\n    if (Array.isArray(schemaItems)) {\n      const schemaItemsLength = schemaItems.length;\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\n      for (let i = 0; i < itemsLength; i++) {\n        const schemaItem = schemaItems[i];\n        if (typeof schemaItem === \"boolean\") {\n          if (schemaItem === false && typeof data[i] !== \"undefined\") {\n            KeywordError.message = \"Array item is not allowed\";\n            KeywordError.item = i;\n            return KeywordError;\n          }\n          continue;\n        }\n\n        if (isCompiledSchema(schemaItem)) {\n          const error = schemaItem.$validate(data[i]);\n          if (error) {\n            KeywordError.item = i;\n            KeywordError.cause = error;\n            return KeywordError;\n          }\n        }\n      }\n\n      return;\n    }\n\n    if (isCompiledSchema(schemaItems)) {\n      for (let i = 0; i < dataLength; i++) {\n        const error = schemaItems.$validate(data[i]);\n        if (error) {\n          KeywordError.item = i;\n          KeywordError.cause = error;\n          return KeywordError;\n        }\n      }\n    }\n\n    return;\n  },\n\n  minItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  maxItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  additionalItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\n      return;\n    }\n\n    if (schema.additionalItems === false) {\n      if (data.length > schema.items.length) {\n        return KeywordError;\n      }\n      return;\n    }\n\n    if (isObject(schema.additionalItems)) {\n      if (isCompiledSchema(schema.additionalItems)) {\n        for (let i = schema.items.length; i < data.length; i++) {\n          const error = schema.additionalItems.$validate(data[i]);\n          if (error) {\n            KeywordError.item = i;\n            KeywordError.cause = error;\n            return KeywordError;\n          }\n        }\n        return;\n      }\n\n      return;\n    }\n\n    return;\n  },\n\n  uniqueItems(schema, data, KeywordError) {\n    if (!Array.isArray(data) || !schema.uniqueItems) {\n      return;\n    }\n\n    const unique = new Set();\n\n    for (const item of data) {\n      let itemStr;\n\n      // Change string to \"string\" to avoid false positives\n      if (typeof item === \"string\") {\n        itemStr = `s:${item}`;\n        // Sort object keys to avoid false positives\n      } else if (isObject(item)) {\n        itemStr = `o:${JSON.stringify(\n          Object.fromEntries(\n            Object.entries(item).sort(([a], [b]) => a.localeCompare(b))\n          )\n        )}`;\n      } else if (Array.isArray(item)) {\n        itemStr = JSON.stringify(item);\n      } else {\n        itemStr = String(item);\n      }\n\n      if (unique.has(itemStr)) {\n        return KeywordError;\n      }\n      unique.add(itemStr);\n    }\n\n    return;\n  },\n\n  contains(schema, data, KeywordError) {\n    if (!Array.isArray(data)) {\n      return;\n    }\n    if (typeof schema.contains === \"boolean\") {\n      if (schema.contains) {\n        if (data.length === 0) {\n          return KeywordError;\n        }\n        return;\n      }\n\n      return KeywordError;\n    }\n\n    for (let i = 0; i < data.length; i++) {\n      const error = schema.contains.$validate(data[i]);\n      if (!error) {\n        return;\n      }\n      continue;\n    }\n\n    return KeywordError;\n  }\n};\n","import { ValidationError, deepEqual } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const StringKeywords: Record<string, KeywordFunction> = {\n  minLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length >= schema.minLength) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  maxLength(schema, data, KeywordError) {\n    if (typeof data !== \"string\" || data.length <= schema.maxLength) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  pattern(schema, data, KeywordError) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const patternRegexp = new RegExp(schema.pattern, \"u\");\n\n    if (patternRegexp instanceof RegExp === false) {\n      return KeywordError;\n    }\n\n    if (patternRegexp.test(data)) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  format(schema, data, KeywordError, formatInstance) {\n    if (typeof data !== \"string\") {\n      return;\n    }\n\n    const formatValidate = formatInstance.formats.get(schema.format);\n    if (formatValidate === false) {\n      return;\n    }\n\n    if (typeof formatValidate === \"function\") {\n      if (formatValidate(data)) {\n        return;\n      }\n\n      return KeywordError;\n    }\n\n    return KeywordError;\n  },\n\n  enum(schema, data, KeywordError) {\n    // Check if data is an array or an object\n    const isArray = Array.isArray(data);\n    const isObject = typeof data === \"object\" && data !== null;\n\n    for (let i = 0; i < schema.enum.length; i++) {\n      const enumItem = schema.enum[i];\n\n      // Simple equality check\n      if (enumItem === data) {\n        return;\n      }\n\n      // If data is an array or an object, check for deep equality\n      if (\n        (isArray && Array.isArray(enumItem)) ||\n        (isObject && typeof enumItem === \"object\" && enumItem !== null)\n      ) {\n        if (deepEqual(enumItem, data)) {\n          return;\n        }\n      }\n    }\n\n    return KeywordError;\n  }\n};\n","import { ValidationError, areCloseEnough } from \"../utils\";\n\nimport { KeywordFunction } from \"../index\";\n\nexport const NumberKeywords: Record<string, KeywordFunction> = {\n  minimum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let min = schema.minimum;\n    if (typeof schema.exclusiveMinimum === \"number\") {\n      min = schema.exclusiveMinimum + 1e-15;\n    } else if (schema.exclusiveMinimum === true) {\n      min += 1e-15;\n    }\n\n    if (data < min) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  maximum(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    let max = schema.maximum;\n    if (typeof schema.exclusiveMaximum === \"number\") {\n      max = schema.exclusiveMaximum - 1e-15;\n    } else if (schema.exclusiveMaximum === true) {\n      max -= 1e-15;\n    }\n\n    if (data > max) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  multipleOf(schema, data, KeywordError, instance) {\n    if (typeof data !== \"number\") {\n      return;\n    }\n\n    const quotient = data / schema.multipleOf;\n\n    if (!isFinite(quotient)) {\n      return;\n    }\n\n    if (!areCloseEnough(quotient, Math.round(quotient))) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  exclusiveMinimum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMinimum !== \"number\" ||\n      \"minimum\" in schema\n    ) {\n      return;\n    }\n\n    if (data <= schema.exclusiveMinimum + 1e-15) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  exclusiveMaximum(schema, data, KeywordError, instance) {\n    if (\n      typeof data !== \"number\" ||\n      typeof schema.exclusiveMaximum !== \"number\" ||\n      \"maximum\" in schema\n    ) {\n      return;\n    }\n\n    if (data >= schema.exclusiveMaximum) {\n      return KeywordError;\n    }\n\n    return;\n  }\n};\n","import { CompiledSchema, KeywordFunction } from \"../index\";\nimport {\n  ValidationError,\n  deepEqual,\n  isCompiledSchema,\n  isObject\n} from \"../utils\";\n\nexport const OtherKeywords: Record<string, KeywordFunction> = {\n  nullable(schema, data, KeywordError) {\n    if (schema.nullable && data !== null) {\n      return KeywordError;\n    }\n\n    return;\n  },\n\n  allOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.allOf.length; i++) {\n      if (isObject(schema.allOf[i])) {\n        if (\"$validate\" in schema.allOf[i]) {\n          const error = schema.allOf[i].$validate(data);\n          if (error) {\n            KeywordError.cause = error;\n            return KeywordError;\n          }\n        }\n        continue;\n      }\n\n      if (typeof schema.allOf[i] === \"boolean\") {\n        if (Boolean(data) !== schema.allOf[i]) {\n          return KeywordError;\n        }\n        continue;\n      }\n\n      if (data !== schema.allOf[i]) {\n        return KeywordError;\n      }\n    }\n\n    return;\n  },\n\n  anyOf(schema, data, KeywordError) {\n    for (let i = 0; i < schema.anyOf.length; i++) {\n      if (isObject(schema.anyOf[i])) {\n        if (\"$validate\" in schema.anyOf[i]) {\n          const error = schema.anyOf[i].$validate(data);\n          if (!error) {\n            return;\n          }\n          continue;\n        }\n        return;\n      } else {\n        if (typeof schema.anyOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.anyOf[i]) {\n            return;\n          }\n        }\n\n        if (data === schema.anyOf[i]) {\n          return;\n        }\n      }\n    }\n\n    return KeywordError;\n  },\n\n  oneOf(schema, data, KeywordError) {\n    let validCount = 0;\n    for (let i = 0; i < schema.oneOf.length; i++) {\n      if (isObject(schema.oneOf[i])) {\n        if (\"$validate\" in schema.oneOf[i]) {\n          const error = schema.oneOf[i].$validate(data);\n          if (!error) {\n            validCount++;\n          }\n          continue;\n        }\n        validCount++;\n        continue;\n      } else {\n        if (typeof schema.oneOf[i] === \"boolean\") {\n          if (Boolean(data) === schema.oneOf[i]) {\n            validCount++;\n          }\n          continue;\n        }\n\n        if (data === schema.oneOf[i]) {\n          validCount++;\n        }\n      }\n    }\n\n    if (validCount === 1) {\n      return;\n    }\n\n    return KeywordError;\n  },\n\n  dependencies(schema, data, KeywordError) {\n    if (!isObject(data)) {\n      return;\n    }\n\n    for (const key in schema.dependencies) {\n      if (key in data === false) {\n        continue;\n      }\n\n      const dependency = schema.dependencies[key];\n      if (Array.isArray(dependency)) {\n        for (let i = 0; i < dependency.length; i++) {\n          if (!(dependency[i] in data)) {\n            KeywordError.item = i;\n            return KeywordError;\n          }\n        }\n        continue;\n      }\n      if (typeof dependency === \"boolean\") {\n        if (dependency) {\n          continue;\n        }\n        return KeywordError;\n      }\n\n      if (typeof dependency === \"string\") {\n        if (dependency in data) {\n          continue;\n        }\n        return KeywordError;\n      }\n      const error = dependency.$validate(data);\n      if (error) {\n        KeywordError.cause = error;\n        return KeywordError;\n      }\n    }\n\n    return;\n  },\n\n  const(schema, data, KeywordError) {\n    if (\n      data === schema.const ||\n      (isObject(data) &&\n        isObject(schema.const) &&\n        deepEqual(data, schema.const)) ||\n      (Array.isArray(data) &&\n        Array.isArray(schema.const) &&\n        deepEqual(data, schema.const))\n    ) {\n      return;\n    }\n    return KeywordError;\n  },\n\n  if(schema, data, KeywordError) {\n    if (\"then\" in schema === false && \"else\" in schema === false) {\n      return;\n    }\n    if (typeof schema.if === \"boolean\") {\n      if (schema.if) {\n        if (schema.then) {\n          return schema.then.$validate(data);\n        }\n      } else if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n\n    const error = schema.if.$validate(data);\n    if (!error) {\n      if (schema.then) {\n        return schema.then.$validate(data);\n      }\n      return;\n    } else {\n      if (schema.else) {\n        return schema.else.$validate(data);\n      }\n      return;\n    }\n  },\n\n  not(schema, data, KeywordError) {\n    if (typeof schema.not === \"boolean\") {\n      if (schema.not) {\n        return KeywordError;\n      }\n      return;\n    }\n\n    if (isObject(schema.not)) {\n      if (\"$validate\" in schema.not) {\n        const error = schema.not.$validate(data);\n        if (!error) {\n          return KeywordError;\n        }\n        return;\n      }\n      return KeywordError;\n    }\n\n    return KeywordError;\n  }\n};\n","import {\n  ValidationError,\n  deepClone,\n  getNamedFunction,\n  isObject\n} from \"./utils\";\n\nimport { Formats } from \"./formats\";\nimport { Types } from \"./types\";\nimport { keywords } from \"./keywords\";\n\nexport type Result = void | ValidationError;\n\nexport interface KeywordFunction {\n  (\n    schema: CompiledSchema,\n    data: any,\n    error: ValidationError,\n    instance: SchemaShield\n  ): Result;\n}\n\nexport interface TypeFunction {\n  (data: any): boolean;\n}\n\nexport interface FormatFunction {\n  (data: any): boolean;\n}\n\nexport interface ValidateFunction {\n  (data: any): Result;\n}\n\nexport interface CompiledSchema {\n  $validate?: ValidateFunction;\n  [key: string]: any;\n}\n\nexport interface Validator {\n  (data: any): { data: any; error: ValidationError | null; valid: boolean };\n  compiledSchema: CompiledSchema;\n}\n\nexport class SchemaShield {\n  types = new Map<string, TypeFunction | false>();\n  formats = new Map<string, FormatFunction | false>();\n  keywords = new Map<string, KeywordFunction | false>();\n  immutable = false;\n\n  constructor({\n    immutable = false\n  }: {\n    immutable?: boolean;\n  } = {}) {\n    this.immutable = immutable;\n\n    for (const [type, validator] of Object.entries(Types)) {\n      this.addType(type, validator);\n    }\n\n    for (const [keyword, validator] of Object.entries(keywords)) {\n      this.addKeyword(keyword, validator as KeywordFunction);\n    }\n\n    for (const [format, validator] of Object.entries(Formats)) {\n      if (validator) {\n        this.addFormat(format, validator as FormatFunction);\n      }\n    }\n  }\n\n  addType(name: string, validator: TypeFunction) {\n    this.types.set(name, validator);\n  }\n\n  addFormat(name: string, validator: FormatFunction) {\n    this.formats.set(name, validator);\n  }\n\n  addKeyword(name: string, validator: KeywordFunction) {\n    this.keywords.set(name, validator);\n  }\n\n  compile(schema: any): Validator {\n    const compiledSchema = this.compileSchema(schema);\n    if (!compiledSchema.$validate) {\n      if (this.isSchemaLike(schema) === false) {\n        throw new ValidationError(\"Invalid schema\");\n      }\n\n      compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n        \"any\",\n        () => {}\n      );\n    }\n\n    const validate: Validator = (data: any) => {\n      const clonedData = this.immutable ? deepClone(data) : data;\n      const error = compiledSchema.$validate(clonedData);\n\n      return {\n        data: clonedData,\n        error: error ? error : null,\n        valid: !error\n      };\n    };\n\n    validate.compiledSchema = compiledSchema;\n\n    return validate;\n  }\n\n  private compileSchema(schema: Partial<CompiledSchema> | any): CompiledSchema {\n    if (!isObject(schema)) {\n      if (schema === true) {\n        schema = {\n          anyOf: [{}]\n        };\n      } else if (schema === false) {\n        schema = {\n          oneOf: []\n        };\n      } else {\n        schema = {\n          oneOf: [schema]\n        };\n      }\n    }\n\n    const compiledSchema: CompiledSchema = {} as CompiledSchema;\n    const TypeError = new ValidationError(`Invalid type`);\n    TypeError.keyword = \"type\";\n    const typeValidations: TypeFunction[] = [];\n\n    let methodName = \"\";\n\n    if (\"type\" in schema) {\n      const types = Array.isArray(schema.type)\n        ? schema.type\n        : schema.type.split(\",\").map((t) => t.trim());\n\n      for (const type of types) {\n        const validator = this.types.get(type);\n        if (validator) {\n          typeValidations.push(validator);\n          methodName += (methodName ? \"_OR_\" : \"\") + validator.name;\n        }\n      }\n\n      const typeValidationsLength = typeValidations.length;\n\n      if (typeValidationsLength === 0) {\n        throw TypeError;\n      }\n\n      if (typeValidationsLength === 1) {\n        const typeValidation = typeValidations[0];\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            if (typeValidation(data)) {\n              return;\n            }\n            return TypeError;\n          }\n        );\n      } else if (typeValidationsLength > 1) {\n        compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n          methodName,\n          (data) => {\n            for (let i = 0; i < typeValidationsLength; i++) {\n              if (typeValidations[i](data)) {\n                return;\n              }\n            }\n            return TypeError;\n          }\n        );\n      }\n    }\n\n    for (const key in schema) {\n      if (key === \"type\") {\n        compiledSchema.type = schema.type;\n        continue;\n      }\n\n      const keywordValidator = this.keywords.get(key);\n      if (keywordValidator) {\n        const KeywordError = new ValidationError(`Invalid ${key}`);\n        KeywordError.keyword = key;\n        const executeKeywordValidator = (data: any) =>\n          (keywordValidator as KeywordFunction)(\n            compiledSchema,\n            data,\n            KeywordError,\n            this\n          );\n\n        if (compiledSchema.$validate) {\n          const prevValidator = compiledSchema.$validate;\n          methodName += `_AND_${keywordValidator.name}`;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            (data) => {\n              const error = prevValidator(data);\n              if (error) {\n                return error;\n              }\n              const keywordError = executeKeywordValidator(data);\n              if (keywordError) {\n                return keywordError;\n              }\n            }\n          );\n        } else {\n          methodName = keywordValidator.name;\n          compiledSchema.$validate = getNamedFunction<ValidateFunction>(\n            methodName,\n            executeKeywordValidator\n          );\n        }\n      }\n\n      if (isObject(schema[key])) {\n        compiledSchema[key] = this.compileSchema(schema[key]);\n        continue;\n      }\n\n      if (Array.isArray(schema[key])) {\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\n          this.isSchemaLike(subSchema)\n            ? this.compileSchema(subSchema)\n            : subSchema\n        );\n        continue;\n      }\n\n      compiledSchema[key] = schema[key];\n    }\n\n    return compiledSchema as CompiledSchema;\n  }\n\n  isSchemaLike(subSchema: any): boolean {\n    if (isObject(subSchema)) {\n      if (\"type\" in subSchema) {\n        return true;\n      }\n\n      for (let subKey in subSchema) {\n        if (this.keywords.has(subKey)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n}\n"],"mappings":"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"}