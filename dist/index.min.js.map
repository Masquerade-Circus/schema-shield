//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlX2lzX215X2lwX3ZhbGlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlSXB2NEZpcnN0UGFzcyIsInJlU3VibmV0U3RyaW5nIiwicmVGb3J3YXJkU2xhc2giLCJyZVpvbmUiLCJyZUJhZENoYXJhY3RlcnMiLCJyZUJhZEFkZHJlc3MiLCJWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsIm1lc3NhZ2UiLCJpdGVtIiwia2V5d29yZCIsImNhdXNlIiwicGF0aCIsImRhdGEiLCJzY2hlbWEiLCJfZ2V0Q2F1c2UiLCJwb2ludGVyIiwidGhpcyIsImdldENhdXNlIiwiZ2V0RGVmaW5lZEVycm9yRnVuY3Rpb25Gb3JLZXkiLCJrZXkiLCJLZXl3b3JkRXJyb3IiLCJnZXROYW1lZEZ1bmN0aW9uIiwib3B0aW9ucyIsImRlZXBFcXVhbCIsIm9iaiIsIm90aGVyIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaSIsImtleXMiLCJPYmplY3QiLCJpc09iamVjdCIsImRlZXBDbG9uZSIsInJlc3VsdCIsImlzQ29tcGlsZWRTY2hlbWEiLCJzdWJTY2hlbWEiLCJuYW1lIiwiZm4iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaW1wb3J0X2lzX215X2lwX3ZhbGlkIiwiX190b0VTTSIsIlJlZ0V4cHMiLCJ0aW1lIiwidXJpIiwiZW1haWwiLCJob3N0bmFtZSIsImRhdGUiLCJGb3JtYXRzIiwidXBwZXJDYXNlRGF0YSIsInRvVXBwZXJDYXNlIiwidGVzdCIsIkRhdGUiLCJpc05hTiIsImdldFRpbWUiLCJsb2NhbCIsImRvbWFpbiIsInNwbGl0IiwiaW5kZXhPZiIsImlwdjQiLCJpc015SXBWYWxpZCIsInZlcnNpb24iLCJpcHY2IiwicmVnZXgiLCJSZWdFeHAiLCJlIiwiZHVyYXRpb24iLCJ1dWlkIiwiaXJpIiwiVHlwZXMiLCJvYmplY3QiLCJhcnJheSIsInN0cmluZyIsIm51bWJlciIsImludGVnZXIiLCJib29sZWFuIiwibnVsbCIsInRpbWVzdGFtcCIsImludDgiLCJ1bml0OCIsImludDE2IiwidW5pdDE2IiwiaW50MzIiLCJ1bml0MzIiLCJmbG9hdDMyIiwiZmxvYXQ2NCIsImtleXdvcmRzIiwicmVxdWlyZWQiLCJkZWZpbmVFcnJvciIsImhhc093blByb3BlcnR5IiwicHJvcGVydGllcyIsImVycm9yIiwiJHZhbGlkYXRlIiwic2NoZW1hUHJvcCIsImRlZmF1bHQiLCJ2YWx1ZXMiLCJtYXhQcm9wZXJ0aWVzIiwibWluUHJvcGVydGllcyIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwiaXNDb21waWxlZCIsInBhdHRlcm5Qcm9wZXJ0aWVzIiwibWF0Y2giLCJwYXR0ZXJuIiwicGF0dGVybnMiLCJwcm9wZXJ0eU5hbWVzIiwiZGVwZW5kZW5jaWVzIiwiZGVwZW5kZW5jeSIsInRoZW4iLCJlbHNlIiwiJHJlZiIsImRlZmluaXRpb25zIiwiJGlkIiwiJHNjaGVtYSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCIkY29tbWVudCIsImV4YW1wbGVzIiwiY29udGVudE1lZGlhVHlwZSIsImNvbnRlbnRFbmNvZGluZyIsImRpc2NyaW1pbmF0b3IiLCJudWxsYWJsZSIsIml0ZW1zIiwic2NoZW1hSXRlbXMiLCJkYXRhTGVuZ3RoIiwic2NoZW1hSXRlbXNMZW5ndGgiLCJpdGVtc0xlbmd0aCIsIk1hdGgiLCJtaW4iLCJzY2hlbWFJdGVtIiwiZWxlbWVudHMiLCJtaW5JdGVtcyIsIm1heEl0ZW1zIiwiYWRkaXRpb25hbEl0ZW1zIiwidW5pcXVlSXRlbXMiLCJ1bmlxdWUiLCJTZXQiLCJpdGVtU3RyIiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21FbnRyaWVzIiwiZW50cmllcyIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJTdHJpbmciLCJoYXMiLCJhZGQiLCJjb250YWlucyIsIm1pbkxlbmd0aCIsIm1heExlbmd0aCIsInBhdHRlcm5SZWdleHAiLCJmb3JtYXQiLCJmb3JtYXRJbnN0YW5jZSIsImZvcm1hdFZhbGlkYXRlIiwiZm9ybWF0cyIsImdldCIsIm1pbmltdW0iLCJpbnN0YW5jZSIsImV4Y2x1c2l2ZU1pbmltdW0iLCJtYXhpbXVtIiwibWF4IiwiZXhjbHVzaXZlTWF4aW11bSIsIm11bHRpcGxlT2YiLCJxdW90aWVudCIsImlzRmluaXRlIiwiZXBzaWxvbiIsImFicyIsImFyZUNsb3NlRW5vdWdoIiwicm91bmQiLCJlbnVtIiwiZW51bUl0ZW0iLCJhbGxPZiIsIkJvb2xlYW4iLCJhbnlPZiIsIm9uZU9mIiwidmFsaWRDb3VudCIsImNvbnN0IiwiaWYiLCJub3QiLCJ0eXBlcyIsIk1hcCIsImltbXV0YWJsZSIsImNvbnN0cnVjdG9yIiwidHlwZSIsInZhbGlkYXRvciIsImFkZFR5cGUiLCJhZGRLZXl3b3JkIiwiYWRkRm9ybWF0Iiwic2V0IiwiY29tcGlsZSIsImNvbXBpbGVkU2NoZW1hIiwiY29tcGlsZVNjaGVtYSIsImlzU2NoZW1hTGlrZSIsInZhbGlkYXRlIiwiY2xvbmVkRGF0YSIsInZhbGlkIiwiZGVmaW5lVHlwZUVycm9yIiwidHlwZVZhbGlkYXRpb25zIiwibWV0aG9kTmFtZSIsIm1hcCIsInQiLCJ0cmltIiwicHVzaCIsInR5cGVWYWxpZGF0aW9uc0xlbmd0aCIsInR5cGVWYWxpZGF0aW9uIiwia2V5d29yZFZhbGlkYXRvciIsImV4ZWN1dGVLZXl3b3JkVmFsaWRhdG9yIiwicHJldlZhbGlkYXRvciIsImtleXdvcmRFcnJvciIsImluZGV4Iiwic3ViS2V5Il0sInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2lzLW15LWlwLXZhbGlkL2luZGV4LmpzIiwiLi4vbGliL3V0aWxzLnRzIiwiLi4vbGliL2Zvcm1hdHMudHMiLCIuLi9saWIvdHlwZXMudHMiLCIuLi9saWIva2V5d29yZHMudHMiLCIuLi9saWIva2V5d29yZHMvb2JqZWN0LWtleXdvcmRzLnRzIiwiLi4vbGliL2tleXdvcmRzL2FycmF5LWtleXdvcmRzLnRzIiwiLi4vbGliL2tleXdvcmRzL3N0cmluZy1rZXl3b3Jkcy50cyIsIi4uL2xpYi9rZXl3b3Jkcy9udW1iZXIta2V5d29yZHMudHMiLCIuLi9saWIva2V5d29yZHMvb3RoZXIta2V5d29yZHMudHMiLCIuLi9saWIvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlSXB2NEZpcnN0UGFzcyA9IC9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kL1xuXG52YXIgcmVTdWJuZXRTdHJpbmcgPSAvXFwvXFxkezEsM30oPz0lfCQpL1xudmFyIHJlRm9yd2FyZFNsYXNoID0gL1xcLy9cbnZhciByZVpvbmUgPSAvJS4qJC9cbnZhciByZUJhZENoYXJhY3RlcnMgPSAvKFteMC05YS1mOi8lXSkvaVxudmFyIHJlQmFkQWRkcmVzcyA9IC8oWzAtOWEtZl17NSx9fDp7Myx9fFteOl06JHxeOlteOl18XFwvJCkvaVxuXG5mdW5jdGlvbiB2YWxpZGF0ZTQgKGlucHV0KSB7XG4gIGlmICghKHJlSXB2NEZpcnN0UGFzcy50ZXN0KGlucHV0KSkpIHJldHVybiBmYWxzZVxuXG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJylcblxuICBpZiAocGFydHMubGVuZ3RoICE9PSA0KSByZXR1cm4gZmFsc2VcblxuICBpZiAocGFydHNbMF1bMF0gPT09ICcwJyAmJiBwYXJ0c1swXS5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2VcbiAgaWYgKHBhcnRzWzFdWzBdID09PSAnMCcgJiYgcGFydHNbMV0ubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlXG4gIGlmIChwYXJ0c1syXVswXSA9PT0gJzAnICYmIHBhcnRzWzJdLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZVxuICBpZiAocGFydHNbM11bMF0gPT09ICcwJyAmJiBwYXJ0c1szXS5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2VcblxuICB2YXIgbjAgPSBOdW1iZXIocGFydHNbMF0pXG4gIHZhciBuMSA9IE51bWJlcihwYXJ0c1sxXSlcbiAgdmFyIG4yID0gTnVtYmVyKHBhcnRzWzJdKVxuICB2YXIgbjMgPSBOdW1iZXIocGFydHNbM10pXG5cbiAgcmV0dXJuIChuMCA+PSAwICYmIG4wIDwgMjU2ICYmIG4xID49IDAgJiYgbjEgPCAyNTYgJiYgbjIgPj0gMCAmJiBuMiA8IDI1NiAmJiBuMyA+PSAwICYmIG4zIDwgMjU2KVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZTYgKGlucHV0KSB7XG4gIHZhciB3aXRob3V0U3VibmV0ID0gaW5wdXQucmVwbGFjZShyZVN1Ym5ldFN0cmluZywgJycpXG4gIHZhciBoYXNTdWJuZXQgPSAoaW5wdXQubGVuZ3RoICE9PSB3aXRob3V0U3VibmV0Lmxlbmd0aClcblxuICAvLyBGSVhNRTogdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgYW4gb3B0aW9uIGluIHRoZSBmdXR1cmVcbiAgaWYgKGhhc1N1Ym5ldCkgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKCFoYXNTdWJuZXQpIHtcbiAgICBpZiAocmVGb3J3YXJkU2xhc2gudGVzdChpbnB1dCkpIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIHdpdGhvdXRab25lID0gd2l0aG91dFN1Ym5ldC5yZXBsYWNlKHJlWm9uZSwgJycpXG4gIHZhciBsYXN0UGFydFNlcGFyYXRvciA9IHdpdGhvdXRab25lLmxhc3RJbmRleE9mKCc6JylcblxuICBpZiAobGFzdFBhcnRTZXBhcmF0b3IgPT09IC0xKSByZXR1cm4gZmFsc2VcblxuICB2YXIgbGFzdFBhcnQgPSB3aXRob3V0Wm9uZS5zdWJzdHJpbmcobGFzdFBhcnRTZXBhcmF0b3IgKyAxKVxuICB2YXIgaGFzVjRQYXJ0ID0gdmFsaWRhdGU0KGxhc3RQYXJ0KVxuICB2YXIgYWRkcmVzcyA9IChoYXNWNFBhcnQgPyB3aXRob3V0Wm9uZS5zdWJzdHJpbmcoMCwgbGFzdFBhcnRTZXBhcmF0b3IgKyAxKSArICcxMjM0OjU2NzgnIDogd2l0aG91dFpvbmUpXG5cbiAgaWYgKHJlQmFkQ2hhcmFjdGVycy50ZXN0KGFkZHJlc3MpKSByZXR1cm4gZmFsc2VcbiAgaWYgKHJlQmFkQWRkcmVzcy50ZXN0KGFkZHJlc3MpKSByZXR1cm4gZmFsc2VcblxuICB2YXIgaGFsdmVzID0gYWRkcmVzcy5zcGxpdCgnOjonKVxuXG4gIGlmIChoYWx2ZXMubGVuZ3RoID4gMikgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKGhhbHZlcy5sZW5ndGggPT09IDIpIHtcbiAgICB2YXIgZmlyc3QgPSAoaGFsdmVzWzBdID09PSAnJyA/IFtdIDogaGFsdmVzWzBdLnNwbGl0KCc6JykpXG4gICAgdmFyIGxhc3QgPSAoaGFsdmVzWzFdID09PSAnJyA/IFtdIDogaGFsdmVzWzFdLnNwbGl0KCc6JykpXG4gICAgdmFyIHJlbWFpbmluZ0xlbmd0aCA9IDggLSAoZmlyc3QubGVuZ3RoICsgbGFzdC5sZW5ndGgpXG5cbiAgICBpZiAocmVtYWluaW5nTGVuZ3RoIDw9IDApIHJldHVybiBmYWxzZVxuICB9IGVsc2Uge1xuICAgIGlmIChhZGRyZXNzLnNwbGl0KCc6JykubGVuZ3RoICE9PSA4KSByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlIChpbnB1dCkge1xuICByZXR1cm4gdmFsaWRhdGU0KGlucHV0KSB8fCB2YWxpZGF0ZTYoaW5wdXQpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdmFsaWRhdG9yIChvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgaWYgKG9wdGlvbnMudmVyc2lvbiA9PT0gNCkgcmV0dXJuIHZhbGlkYXRlNFxuICBpZiAob3B0aW9ucy52ZXJzaW9uID09PSA2KSByZXR1cm4gdmFsaWRhdGU2XG4gIGlmIChvcHRpb25zLnZlcnNpb24gPT0gbnVsbCkgcmV0dXJuIHZhbGlkYXRlXG5cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHZlcnNpb246ICcgKyBvcHRpb25zLnZlcnNpb24pXG59XG5cbm1vZHVsZS5leHBvcnRzWydfX2FsbF9yZWdleGVzX18nXSA9IFtcbiAgcmVJcHY0Rmlyc3RQYXNzLFxuICByZVN1Ym5ldFN0cmluZyxcbiAgcmVGb3J3YXJkU2xhc2gsXG4gIHJlWm9uZSxcbiAgcmVCYWRDaGFyYWN0ZXJzLFxuICByZUJhZEFkZHJlc3Ncbl1cbiIsImltcG9ydCB7IENvbXBpbGVkU2NoZW1hIH0gZnJvbSBcIi4vaW5kZXhcIjtcblxuZnVuY3Rpb24gZGVmaW5lRXJyb3IoZXJyb3IsIHBvaW50ZXIgPSBcIiNcIikge1xuICBjb25zdCBwYXRoID1cbiAgICBwb2ludGVyICsgXCIvXCIgKyBlcnJvci5rZXl3b3JkICsgKFwiaXRlbVwiIGluIGVycm9yID8gXCIvXCIgKyBlcnJvci5pdGVtIDogXCJcIik7XG5cbiAgaWYgKCFlcnJvci5jYXVzZSkge1xuICAgIGVycm9yLnBhdGggPSBwYXRoO1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIHJldHVybiBkZWZpbmVFcnJvcihlcnJvci5jYXVzZSwgcGF0aCk7XG59XG5cbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIG1lc3NhZ2U6IHN0cmluZztcbiAgaXRlbTogc3RyaW5nIHwgbnVtYmVyO1xuICBrZXl3b3JkOiBzdHJpbmc7XG4gIGNhdXNlOiBWYWxpZGF0aW9uRXJyb3I7XG4gIHBhdGg6IHN0cmluZyA9IFwiXCI7XG4gIGRhdGE/OiBhbnk7XG4gIHNjaGVtYT86IENvbXBpbGVkU2NoZW1hO1xuXG4gIHByaXZhdGUgX2dldENhdXNlKHBvaW50ZXIgPSBcIiNcIikge1xuICAgIGNvbnN0IHBhdGggPVxuICAgICAgcG9pbnRlciArXG4gICAgICBcIi9cIiArXG4gICAgICB0aGlzLmtleXdvcmQgK1xuICAgICAgKHR5cGVvZiB0aGlzLml0ZW0gIT09IFwidW5kZWZpbmVkXCIgPyBcIi9cIiArIHRoaXMuaXRlbSA6IFwiXCIpO1xuXG4gICAgaWYgKCF0aGlzLmNhdXNlKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY2F1c2UuX2dldENhdXNlKHBhdGgpO1xuICB9XG5cbiAgZ2V0Q2F1c2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2dldENhdXNlKCk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWZpbmVFcnJvck9wdGlvbnMge1xuICBpdGVtPzogYW55OyAvLyBGaW5hbCBpdGVtIGluIHRoZSBwYXRoXG4gIGNhdXNlPzogVmFsaWRhdGlvbkVycm9yOyAvLyBDYXVzZSBvZiB0aGUgZXJyb3JcbiAgZGF0YT86IGFueTsgLy8gRGF0YSB0aGF0IGNhdXNlZCB0aGUgZXJyb3Jcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEZWZpbmVFcnJvckZ1bmN0aW9uIHtcbiAgKG1lc3NhZ2U6IHN0cmluZywgb3B0aW9ucz86IERlZmluZUVycm9yT3B0aW9ucyk6IFZhbGlkYXRpb25FcnJvcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlZmluZWRFcnJvckZ1bmN0aW9uRm9yS2V5KFxuICBrZXk6IHN0cmluZyxcbiAgc2NoZW1hOiBDb21waWxlZFNjaGVtYVxuKSB7XG4gIGNvbnN0IEtleXdvcmRFcnJvciA9IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEludmFsaWQgJHtrZXl9YCk7XG4gIEtleXdvcmRFcnJvci5rZXl3b3JkID0ga2V5O1xuICBLZXl3b3JkRXJyb3Iuc2NoZW1hID0gc2NoZW1hO1xuXG4gIGNvbnN0IGRlZmluZUVycm9yOiBEZWZpbmVFcnJvckZ1bmN0aW9uID0gKG1lc3NhZ2UsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgIEtleXdvcmRFcnJvci5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICBLZXl3b3JkRXJyb3IuaXRlbSA9IG9wdGlvbnMuaXRlbTtcbiAgICBLZXl3b3JkRXJyb3IuY2F1c2UgPSBvcHRpb25zLmNhdXNlO1xuICAgIEtleXdvcmRFcnJvci5kYXRhID0gb3B0aW9ucy5kYXRhO1xuICAgIHJldHVybiBLZXl3b3JkRXJyb3I7XG4gIH07XG5cbiAgcmV0dXJuIGdldE5hbWVkRnVuY3Rpb248RGVmaW5lRXJyb3JGdW5jdGlvbj4oXG4gICAgYGRlZmluZUVycm9yXyR7a2V5fWAsXG4gICAgZGVmaW5lRXJyb3JcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBFcXVhbChcbiAgb2JqOiBBcnJheTxhbnk+IHwgUmVjb3JkPHN0cmluZywgYW55PixcbiAgb3RoZXI6IEFycmF5PGFueT4gfCBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSAmJiBBcnJheS5pc0FycmF5KG90aGVyKSkge1xuICAgIGlmIChvYmoubGVuZ3RoICE9PSBvdGhlci5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFkZWVwRXF1YWwob2JqW2ldLCBvdGhlcltpXSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBvYmogPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG90aGVyID09PSBcIm9iamVjdFwiKSB7XG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvdGhlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG9iaiA9PT0gb3RoZXI7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgaWYgKGtleXMubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvdGhlcikubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgaWYgKCFkZWVwRXF1YWwob2JqW2tleV0sIG90aGVyW2tleV0pKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmogPT09IG90aGVyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoZGF0YSkge1xuICByZXR1cm4gdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgZGF0YSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShkYXRhKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFyZUNsb3NlRW5vdWdoKGEsIGIsIGVwc2lsb24gPSAxZS0xNSkge1xuICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDw9IGVwc2lsb24gKiBNYXRoLm1heChNYXRoLmFicyhhKSwgTWF0aC5hYnMoYikpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VVRGMTZMZW5ndGgoc3RyKSB7XG4gIGxldCBsZW5ndGggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGNvZGVQb2ludCA9IHN0ci5jb2RlUG9pbnRBdChpKTtcbiAgICBpZiAoY29kZVBvaW50ID4gMHhmZmZmKSB7XG4gICAgICBpKys7XG4gICAgfVxuICAgIGxlbmd0aCsrO1xuICB9XG4gIHJldHVybiBsZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmUob2JqOiBhbnkpOiBhbnkge1xuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtpXSA9IGRlZXBDbG9uZShvYmpbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgaWYgKGlzT2JqZWN0KG9iaikpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgIHJlc3VsdFtrZXldID0gZGVlcENsb25lKG9ialtrZXldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBpbGVkU2NoZW1hKHN1YlNjaGVtYTogYW55KTogc3ViU2NoZW1hIGlzIENvbXBpbGVkU2NoZW1hIHtcbiAgcmV0dXJuIGlzT2JqZWN0KHN1YlNjaGVtYSkgJiYgXCIkdmFsaWRhdGVcIiBpbiBzdWJTY2hlbWE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROYW1lZEZ1bmN0aW9uPFQ+KG5hbWU6IHN0cmluZywgZm46IFQpOiBUIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgXCJuYW1lXCIsIHsgdmFsdWU6IG5hbWUgfSk7XG59XG4iLCJpbXBvcnQgaXNNeUlwVmFsaWQgZnJvbSAnaXMtbXktaXAtdmFsaWQnO1xuaW1wb3J0IHsgRm9ybWF0RnVuY3Rpb24gfSBmcm9tICcuL2luZGV4JztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciB9IGZyb20gJy4vdXRpbHMnO1xuXG4vLyBUaGUgZGF0ZXRpbWUgMTk5MC0wMi0zMVQxNTo1OTo2MC4xMjMtMDg6MDAgbXVzdCBiZSByZWplY3RlZC5cbmNvbnN0IFJlZ0V4cHMgPSB7XG4gICdkYXRlLXRpbWUnOiAvXihcXGR7NH0pLShcXGR7Mn0pLShcXGR7Mn0pVChcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZCspPyhafChbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKSQvLFxuICB0aW1lOiAvXihcXGR7Mn0pOihcXGR7Mn0pOihcXGR7Mn0pKFxcLlxcZCspPyhafChbKy1dKShcXGR7Mn0pOihcXGR7Mn0pKSQvLFxuICB1cmk6IC9eW2EtekEtWl1bYS16QS1aMC05K1xcLS5dKjpbXlxcc10qJC8sXG4gIGVtYWlsOlxuICAgIC9eW2EtekEtWjAtOS4hIyQlJicqKy89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLyxcbiAgaG9zdG5hbWU6IC9eW2EtekEtWjAtOV1bYS16QS1aMC05LV17MCw2Mn0oXFwuW2EtekEtWjAtOV1bYS16QS1aMC05LV17MCw2Mn0pKlthLXpBLVowLTldJC8sXG4gIGRhdGU6IC9eKFxcZHs0fSktKFxcZHsyfSktKFxcZHsyfSkkLyxcbiAgJ2pzb24tcG9pbnRlcic6IC9eXFwvKD86W15+XXx+MHx+MSkqJC8sXG4gICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInOiAvXihbMC05XSspKCN8XFwvKD86W15+XXx+MHx+MSkqKT8kLyxcbn07XG5cbmV4cG9ydCBjb25zdCBGb3JtYXRzOiBSZWNvcmQ8c3RyaW5nLCBGb3JtYXRGdW5jdGlvbiB8IGZhbHNlPiA9IHtcbiAgWydkYXRlLXRpbWUnXShkYXRhKSB7XG4gICAgY29uc3QgdXBwZXJDYXNlRGF0YSA9IGRhdGEudG9VcHBlckNhc2UoKTtcbiAgICBpZiAoIVJlZ0V4cHNbJ2RhdGUtdGltZSddLnRlc3QodXBwZXJDYXNlRGF0YSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodXBwZXJDYXNlRGF0YSk7XG4gICAgcmV0dXJuICFpc05hTihkYXRlLmdldFRpbWUoKSk7XG4gIH0sXG4gIHVyaShkYXRhKSB7XG4gICAgcmV0dXJuIFJlZ0V4cHMudXJpLnRlc3QoZGF0YSk7XG4gIH0sXG4gIGVtYWlsKGRhdGEpIHtcbiAgICBpZiAoIVJlZ0V4cHMuZW1haWwudGVzdChkYXRhKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IFtsb2NhbCwgZG9tYWluXSA9IGRhdGEuc3BsaXQoJ0AnKTtcblxuICAgIGlmIChsb2NhbC5sZW5ndGggPiA2NCB8fCBsb2NhbC5pbmRleE9mKCcuLicpICE9PSAtMSB8fCBsb2NhbFswXSA9PT0gJy4nIHx8IGxvY2FsW2xvY2FsLmxlbmd0aCAtIDFdID09PSAnLicpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoZG9tYWluLmxlbmd0aCA+IDI1NSB8fCBkb21haW4uaW5kZXhPZignLi4nKSAhPT0gLTEgfHwgZG9tYWluWzBdID09PSAnLicgfHwgZG9tYWluW2RvbWFpbi5sZW5ndGggLSAxXSA9PT0gJy4nKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGlwdjQ6IGlzTXlJcFZhbGlkKHsgdmVyc2lvbjogNCB9KSxcbiAgaXB2NjogaXNNeUlwVmFsaWQoeyB2ZXJzaW9uOiA2IH0pLFxuXG4gIGhvc3RuYW1lKGRhdGEpIHtcbiAgICByZXR1cm4gUmVnRXhwcy5ob3N0bmFtZS50ZXN0KGRhdGEpO1xuICB9LFxuICBkYXRlKGRhdGEpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKFJlZ0V4cHMuZGF0ZS50ZXN0KGRhdGEpID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiAhaXNOYU4obmV3IERhdGUoZGF0YSkuZ2V0VGltZSgpKTtcbiAgfSxcbiAgcmVnZXgoZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICBuZXcgUmVnRXhwKGRhdGEpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgJ2pzb24tcG9pbnRlcicoZGF0YSkge1xuICAgIGlmIChkYXRhID09PSAnJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlZ0V4cHNbJ2pzb24tcG9pbnRlciddLnRlc3QoZGF0YSk7XG4gIH0sXG4gICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInKGRhdGEpIHtcbiAgICBpZiAoZGF0YSA9PT0gJycpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBSZWdFeHBzWydyZWxhdGl2ZS1qc29uLXBvaW50ZXInXS50ZXN0KGRhdGEpO1xuICB9LFxuICB0aW1lKGRhdGEpIHtcbiAgICByZXR1cm4gUmVnRXhwcy50aW1lLnRlc3QoZGF0YSk7XG4gIH0sXG5cbiAgLy8gTm90IHN1cHBvcnRlZCB5ZXRcbiAgZHVyYXRpb246IGZhbHNlLFxuICAnaWRuLWVtYWlsJzogZmFsc2UsXG4gICdpZG4taG9zdG5hbWUnOiBmYWxzZSxcbiAgdXVpZDogZmFsc2UsXG4gICd1cmktcmVmZXJlbmNlJzogZmFsc2UsXG4gIGlyaTogZmFsc2UsXG4gICdpcmktcmVmZXJlbmNlJzogZmFsc2UsXG4gICd1cmktdGVtcGxhdGUnOiBmYWxzZSxcbn07XG4iLCJpbXBvcnQgeyBUeXBlRnVuY3Rpb24gfSBmcm9tIFwiLi9pbmRleFwiO1xuaW1wb3J0IHsgaXNPYmplY3QgfSBmcm9tIFwiLi91dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgVHlwZXM6IFJlY29yZDxzdHJpbmcsIFR5cGVGdW5jdGlvbiB8IGZhbHNlPiA9IHtcbiAgb2JqZWN0KGRhdGEpIHtcbiAgICByZXR1cm4gaXNPYmplY3QoZGF0YSk7XG4gIH0sXG4gIGFycmF5KGRhdGEpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmXG4gICAgICBkYXRhICE9PSBudWxsICYmXG4gICAgICBcImxlbmd0aFwiIGluIGRhdGEgJiZcbiAgICAgIFwiMFwiIGluIGRhdGEgJiZcbiAgICAgIE9iamVjdC5rZXlzKGRhdGEpLmxlbmd0aCAtIDEgPT09IGRhdGEubGVuZ3RoXG4gICAgKTtcbiAgfSxcbiAgc3RyaW5nKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCI7XG4gIH0sXG4gIG51bWJlcihkYXRhKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBkYXRhID09PSBcIm51bWJlclwiO1xuICB9LFxuICBpbnRlZ2VyKGRhdGEpIHtcbiAgICByZXR1cm4gdHlwZW9mIGRhdGEgPT09IFwibnVtYmVyXCIgJiYgZGF0YSAlIDEgPT09IDA7XG4gIH0sXG4gIGJvb2xlYW4oZGF0YSkge1xuICAgIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gXCJib29sZWFuXCI7XG4gIH0sXG4gIG51bGwoZGF0YSkge1xuICAgIHJldHVybiBkYXRhID09PSBudWxsO1xuICB9LFxuXG4gIC8vIE5vdCBpbXBsZW1lbnRlZCB5ZXRcbiAgdGltZXN0YW1wOiBmYWxzZSxcbiAgaW50ODogZmFsc2UsXG4gIHVuaXQ4OiBmYWxzZSxcbiAgaW50MTY6IGZhbHNlLFxuICB1bml0MTY6IGZhbHNlLFxuICBpbnQzMjogZmFsc2UsXG4gIHVuaXQzMjogZmFsc2UsXG4gIGZsb2F0MzI6IGZhbHNlLFxuICBmbG9hdDY0OiBmYWxzZVxuXG5cbn07XG4iLCJpbXBvcnQgeyBBcnJheUtleXdvcmRzIH0gZnJvbSBcIi4va2V5d29yZHMvYXJyYXkta2V5d29yZHNcIjtcbmltcG9ydCB7IEtleXdvcmRGdW5jdGlvbiB9IGZyb20gXCIuL2luZGV4XCI7XG5pbXBvcnQgeyBOdW1iZXJLZXl3b3JkcyB9IGZyb20gXCIuL2tleXdvcmRzL251bWJlci1rZXl3b3Jkc1wiO1xuaW1wb3J0IHsgT2JqZWN0S2V5d29yZHMgfSBmcm9tIFwiLi9rZXl3b3Jkcy9vYmplY3Qta2V5d29yZHNcIjtcbmltcG9ydCB7IE90aGVyS2V5d29yZHMgfSBmcm9tIFwiLi9rZXl3b3Jkcy9vdGhlci1rZXl3b3Jkc1wiO1xuaW1wb3J0IHsgU3RyaW5nS2V5d29yZHMgfSBmcm9tIFwiLi9rZXl3b3Jkcy9zdHJpbmcta2V5d29yZHNcIjtcblxuZXhwb3J0IGNvbnN0IGtleXdvcmRzOiBSZWNvcmQ8c3RyaW5nLCBLZXl3b3JkRnVuY3Rpb24gfCBmYWxzZT4gPSB7XG4gIC4uLk9iamVjdEtleXdvcmRzLFxuICAuLi5BcnJheUtleXdvcmRzLFxuICAuLi5TdHJpbmdLZXl3b3JkcyxcbiAgLi4uTnVtYmVyS2V5d29yZHMsXG4gIC4uLk90aGVyS2V5d29yZHNcbn07XG4iLCJpbXBvcnQgeyBDb21waWxlZFNjaGVtYSwgS2V5d29yZEZ1bmN0aW9uIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IsIGlzQ29tcGlsZWRTY2hlbWEsIGlzT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBPYmplY3RLZXl3b3JkczogUmVjb3JkPHN0cmluZywgS2V5d29yZEZ1bmN0aW9uIHwgZmFsc2U+ID0ge1xuICAvLyBPYmplY3RcbiAgcmVxdWlyZWQoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gc2NoZW1hLnJlcXVpcmVkW2ldO1xuICAgICAgaWYgKCFkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiUmVxdWlyZWQgcHJvcGVydHkgaXMgbWlzc2luZ1wiLCB7IGl0ZW06IGtleSB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgcHJvcGVydGllcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhzY2hlbWEucHJvcGVydGllcyk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgaWYgKHR5cGVvZiBkYXRhW2tleV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hUHJvcCA9IHNjaGVtYS5wcm9wZXJ0aWVzW2tleV07XG4gICAgICAgIGlmIChpc09iamVjdChzY2hlbWFQcm9wKSAmJiBcImRlZmF1bHRcIiBpbiBzY2hlbWFQcm9wKSB7XG4gICAgICAgICAgZGF0YVtrZXldID0gc2NoZW1hUHJvcC5kZWZhdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllc1trZXldID09PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlByb3BlcnR5IGlzIG5vdCBhbGxvd2VkXCIsIHsgaXRlbToga2V5IH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoXCIkdmFsaWRhdGVcIiBpbiBzY2hlbWEucHJvcGVydGllc1trZXldKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gc2NoZW1hLnByb3BlcnRpZXNba2V5XS4kdmFsaWRhdGUoZGF0YVtrZXldKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiUHJvcGVydHkgaXMgaW52YWxpZFwiLCB7XG4gICAgICAgICAgICBpdGVtOiBrZXksXG4gICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSxcblxuICB2YWx1ZXMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghaXNPYmplY3QoZGF0YSkgfHwgIWlzQ29tcGlsZWRTY2hlbWEoc2NoZW1hLnZhbHVlcykpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgY29uc3QgZXJyb3IgPSBzY2hlbWEudmFsdWVzLiR2YWxpZGF0ZShkYXRhW2tleV0pO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlByb3BlcnR5IGlzIGludmFsaWRcIiwgeyBpdGVtOiBrZXksIGNhdXNlOiBlcnJvciB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgbWF4UHJvcGVydGllcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFpc09iamVjdChkYXRhKSB8fCBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPD0gc2NoZW1hLm1heFByb3BlcnRpZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJUb28gbWFueSBwcm9wZXJ0aWVzXCIpO1xuICB9LFxuXG4gIG1pblByb3BlcnRpZXMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghaXNPYmplY3QoZGF0YSkgfHwgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID49IHNjaGVtYS5taW5Qcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVG9vIGZldyBwcm9wZXJ0aWVzXCIpO1xuICB9LFxuXG4gIGFkZGl0aW9uYWxQcm9wZXJ0aWVzKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIGNvbnN0IGlzQ29tcGlsZWQgPSBpc0NvbXBpbGVkU2NoZW1hKHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyk7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgaWYgKHNjaGVtYS5wcm9wZXJ0aWVzICYmIHNjaGVtYS5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcbiAgICAgICAgbGV0IG1hdGNoID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcbiAgICAgICAgICBpZiAobmV3IFJlZ0V4cChwYXR0ZXJuLCBcInVcIikudGVzdChrZXkpKSB7XG4gICAgICAgICAgICBtYXRjaCA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBub3QgYWxsb3dlZFwiLCB7XG4gICAgICAgICAgaXRlbToga2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNDb21waWxlZCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcy4kdmFsaWRhdGUoZGF0YVtrZXldKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQWRkaXRpb25hbCBwcm9wZXJ0aWVzIGFyZSBpbnZhbGlkXCIsIHtcbiAgICAgICAgICAgIGl0ZW06IGtleSxcbiAgICAgICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGF0dGVybnMgPSBPYmplY3Qua2V5cyhzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpO1xuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKHBhdHRlcm4sIFwidVwiKTtcbiAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dID09PSBmYWxzZSkge1xuICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KGtleSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiUHJvcGVydHkgaXMgbm90IGFsbG93ZWRcIiwgeyBpdGVtOiBrZXkgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgICAgIGlmIChyZWdleC50ZXN0KGtleSkpIHtcbiAgICAgICAgICBpZiAoXCIkdmFsaWRhdGVcIiBpbiBzY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcGF0dGVybl0pIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dLiR2YWxpZGF0ZShcbiAgICAgICAgICAgICAgZGF0YVtrZXldXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlByb3BlcnR5IGlzIGludmFsaWRcIiwge1xuICAgICAgICAgICAgICAgIGl0ZW06IGtleSxcbiAgICAgICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIHByb3BlcnR5TmFtZXMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEucHJvcGVydHlOYW1lcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGlmIChzY2hlbWEucHJvcGVydHlOYW1lcyA9PT0gZmFsc2UgJiYgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJQcm9wZXJ0aWVzIGFyZSBub3QgYWxsb3dlZFwiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzQ29tcGlsZWRTY2hlbWEoc2NoZW1hLnByb3BlcnR5TmFtZXMpKSB7XG4gICAgICBmb3IgKGxldCBrZXkgaW4gZGF0YSkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5wcm9wZXJ0eU5hbWVzLiR2YWxpZGF0ZShrZXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJQcm9wZXJ0eSBuYW1lIGlzIGludmFsaWRcIiwge1xuICAgICAgICAgICAgaXRlbToga2V5LFxuICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgZGVwZW5kZW5jaWVzKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IpIHtcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hLmRlcGVuZGVuY2llcykge1xuICAgICAgaWYgKGtleSBpbiBkYXRhID09PSBmYWxzZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZGVwZW5kZW5jeSA9IHNjaGVtYS5kZXBlbmRlbmNpZXNba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGRlcGVuZGVuY3kpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGVwZW5kZW5jeS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmICghKGRlcGVuZGVuY3lbaV0gaW4gZGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkRlcGVuZGVuY3kgaXMgbm90IHNhdGlzZmllZFwiLCB7IGl0ZW06IGkgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBkZXBlbmRlbmN5ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICBpZiAoZGVwZW5kZW5jeSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkRlcGVuZGVuY3kgaXMgbm90IHNhdGlzZmllZFwiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBkZXBlbmRlbmN5ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChkZXBlbmRlbmN5IGluIGRhdGEpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJEZXBlbmRlbmN5IGlzIG5vdCBzYXRpc2ZpZWRcIik7XG4gICAgICB9XG4gICAgICBjb25zdCBlcnJvciA9IGRlcGVuZGVuY3kuJHZhbGlkYXRlKGRhdGEpO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkRlcGVuZGVuY3kgaXMgbm90IHNhdGlzZmllZFwiLCB7IGNhdXNlOiBlcnJvciB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgLy8gUmVxdWlyZWQgYnkgb3RoZXIga2V5d29yZHMgYnV0IG5vdCB1c2VkIGFzIGEgZnVuY3Rpb24gaXRzZWxmXG4gIHRoZW46IGZhbHNlLFxuICBlbHNlOiBmYWxzZSxcbiAgZGVmYXVsdDogZmFsc2UsXG5cbiAgLy8gTm90IGltcGxlbWVudGVkIHlldFxuICAkcmVmOiBmYWxzZSxcbiAgZGVmaW5pdGlvbnM6IGZhbHNlLFxuICAkaWQ6IGZhbHNlLFxuICAkc2NoZW1hOiBmYWxzZSxcblxuICAvLyBNZXRhZGF0YSBrZXl3b3JkcyAobm90IHVzZWQgYXMgYSBmdW5jdGlvbilcbiAgdGl0bGU6IGZhbHNlLFxuICBkZXNjcmlwdGlvbjogZmFsc2UsXG4gICRjb21tZW50OiBmYWxzZSxcbiAgZXhhbXBsZXM6IGZhbHNlLFxuICBjb250ZW50TWVkaWFUeXBlOiBmYWxzZSxcbiAgY29udGVudEVuY29kaW5nOiBmYWxzZSxcblxuICAvLyBOb3Qgc3VwcG9ydGVkIE9wZW4gQVBJIGtleXdvcmRzXG4gIGRpc2NyaW1pbmF0b3I6IGZhbHNlLFxuICBudWxsYWJsZTogZmFsc2Vcbn07XG4iLCJpbXBvcnQgeyBDb21waWxlZFNjaGVtYSwgS2V5d29yZEZ1bmN0aW9uIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IsIGlzQ29tcGlsZWRTY2hlbWEsIGlzT2JqZWN0IH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmV4cG9ydCBjb25zdCBBcnJheUtleXdvcmRzOiBSZWNvcmQ8c3RyaW5nLCBLZXl3b3JkRnVuY3Rpb24+ID0ge1xuICBpdGVtcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3Qgc2NoZW1hSXRlbXMgPSBzY2hlbWEuaXRlbXM7XG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xuXG4gICAgaWYgKHR5cGVvZiBzY2hlbWFJdGVtcyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGlmIChzY2hlbWFJdGVtcyA9PT0gZmFsc2UgJiYgZGF0YUxlbmd0aCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgaXRlbXMgYXJlIG5vdCBhbGxvd2VkXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hSXRlbXMpKSB7XG4gICAgICBjb25zdCBzY2hlbWFJdGVtc0xlbmd0aCA9IHNjaGVtYUl0ZW1zLmxlbmd0aDtcbiAgICAgIGNvbnN0IGl0ZW1zTGVuZ3RoID0gTWF0aC5taW4oc2NoZW1hSXRlbXNMZW5ndGgsIGRhdGFMZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYUl0ZW0gPSBzY2hlbWFJdGVtc1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFJdGVtID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgIGlmIChzY2hlbWFJdGVtID09PSBmYWxzZSAmJiB0eXBlb2YgZGF0YVtpXSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgaXRlbSBpcyBub3QgYWxsb3dlZFwiLCB7IGl0ZW06IGkgfSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQ29tcGlsZWRTY2hlbWEoc2NoZW1hSXRlbSkpIHtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IHNjaGVtYUl0ZW0uJHZhbGlkYXRlKGRhdGFbaV0pO1xuICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgaXRlbSBpcyBpbnZhbGlkXCIsIHtcbiAgICAgICAgICAgICAgaXRlbTogaSxcbiAgICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0NvbXBpbGVkU2NoZW1hKHNjaGVtYUl0ZW1zKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSBzY2hlbWFJdGVtcy4kdmFsaWRhdGUoZGF0YVtpXSk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkFycmF5IGl0ZW0gaXMgaW52YWxpZFwiLCB7XG4gICAgICAgICAgICBpdGVtOiBpLFxuICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgZWxlbWVudHMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAhaXNDb21waWxlZFNjaGVtYShzY2hlbWEuZWxlbWVudHMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5lbGVtZW50cy4kdmFsaWRhdGUoZGF0YVtpXSk7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgaXRlbSBpcyBpbnZhbGlkXCIsIHsgaXRlbTogaSwgY2F1c2U6IGVycm9yIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSxcblxuICBtaW5JdGVtcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoID49IHNjaGVtYS5taW5JdGVtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkFycmF5IGlzIHRvbyBzaG9ydFwiKTtcbiAgfSxcblxuICBtYXhJdGVtcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8IGRhdGEubGVuZ3RoIDw9IHNjaGVtYS5tYXhJdGVtcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkFycmF5IGlzIHRvbyBsb25nXCIpO1xuICB9LFxuXG4gIGFkZGl0aW9uYWxJdGVtcyhzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpIHx8ICFzY2hlbWEuaXRlbXMgfHwgIUFycmF5LmlzQXJyYXkoc2NoZW1hLml0ZW1zKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChzY2hlbWEuYWRkaXRpb25hbEl0ZW1zID09PSBmYWxzZSkge1xuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLml0ZW1zLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJBcnJheSBpcyB0b28gbG9uZ1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNPYmplY3Qoc2NoZW1hLmFkZGl0aW9uYWxJdGVtcykpIHtcbiAgICAgIGlmIChpc0NvbXBpbGVkU2NoZW1hKHNjaGVtYS5hZGRpdGlvbmFsSXRlbXMpKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBzY2hlbWEuaXRlbXMubGVuZ3RoOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNvbnN0IGVycm9yID0gc2NoZW1hLmFkZGl0aW9uYWxJdGVtcy4kdmFsaWRhdGUoZGF0YVtpXSk7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJBcnJheSBpdGVtIGlzIGludmFsaWRcIiwge1xuICAgICAgICAgICAgICBpdGVtOiBpLFxuICAgICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgdW5pcXVlSXRlbXMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAhc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdW5pcXVlID0gbmV3IFNldCgpO1xuXG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEpIHtcbiAgICAgIGxldCBpdGVtU3RyO1xuXG4gICAgICAvLyBDaGFuZ2Ugc3RyaW5nIHRvIFwic3RyaW5nXCIgdG8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzXG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaXRlbVN0ciA9IGBzOiR7aXRlbX1gO1xuICAgICAgICAvLyBTb3J0IG9iamVjdCBrZXlzIHRvIGF2b2lkIGZhbHNlIHBvc2l0aXZlc1xuICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpdGVtKSkge1xuICAgICAgICBpdGVtU3RyID0gYG86JHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgICAgICAgICBPYmplY3QuZW50cmllcyhpdGVtKS5zb3J0KChbYV0sIFtiXSkgPT4gYS5sb2NhbGVDb21wYXJlKGIpKVxuICAgICAgICAgIClcbiAgICAgICAgKX1gO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgICAgIGl0ZW1TdHIgPSBKU09OLnN0cmluZ2lmeShpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZW1TdHIgPSBTdHJpbmcoaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh1bmlxdWUuaGFzKGl0ZW1TdHIpKSB7XG4gICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkFycmF5IGl0ZW1zIGFyZSBub3QgdW5pcXVlXCIpO1xuICAgICAgfVxuICAgICAgdW5pcXVlLmFkZChpdGVtU3RyKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgY29udGFpbnMoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjaGVtYS5jb250YWlucyA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGlmIChzY2hlbWEuY29udGFpbnMpIHtcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBpdGVtXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiQXJyYXkgbXVzdCBub3QgY29udGFpbiBhbnkgaXRlbXNcIik7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5jb250YWlucy4kdmFsaWRhdGUoZGF0YVtpXSk7XG4gICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbmVFcnJvcihcIkFycmF5IG11c3QgY29udGFpbiBhdCBsZWFzdCBvbmUgaXRlbVwiKTtcbiAgfVxufTtcbiIsImltcG9ydCB7IFZhbGlkYXRpb25FcnJvciwgZGVlcEVxdWFsIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmltcG9ydCB7IEtleXdvcmRGdW5jdGlvbiB9IGZyb20gXCIuLi9pbmRleFwiO1xuXG5leHBvcnQgY29uc3QgU3RyaW5nS2V5d29yZHM6IFJlY29yZDxzdHJpbmcsIEtleXdvcmRGdW5jdGlvbj4gPSB7XG4gIG1pbkxlbmd0aChzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiIHx8IGRhdGEubGVuZ3RoID49IHNjaGVtYS5taW5MZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBzaG9ydGVyIHRoYW4gdGhlIG1pbmltdW0gbGVuZ3RoXCIpO1xuICB9LFxuXG4gIG1heExlbmd0aChzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiIHx8IGRhdGEubGVuZ3RoIDw9IHNjaGVtYS5tYXhMZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBsb25nZXIgdGhhbiB0aGUgbWF4aW11bSBsZW5ndGhcIik7XG4gIH0sXG5cbiAgcGF0dGVybihzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGF0dGVyblJlZ2V4cCA9IG5ldyBSZWdFeHAoc2NoZW1hLnBhdHRlcm4sIFwidVwiKTtcblxuICAgIGlmIChwYXR0ZXJuUmVnZXhwIGluc3RhbmNlb2YgUmVnRXhwID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiSW52YWxpZCByZWd1bGFyIGV4cHJlc3Npb25cIik7XG4gICAgfVxuXG4gICAgaWYgKHBhdHRlcm5SZWdleHAudGVzdChkYXRhKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlZhbHVlIGRvZXMgbm90IG1hdGNoIHRoZSBwYXR0ZXJuXCIpO1xuICB9LFxuXG4gIGZvcm1hdChzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yLCBmb3JtYXRJbnN0YW5jZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGZvcm1hdFZhbGlkYXRlID0gZm9ybWF0SW5zdGFuY2UuZm9ybWF0cy5nZXQoc2NoZW1hLmZvcm1hdCk7XG4gICAgaWYgKGZvcm1hdFZhbGlkYXRlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZm9ybWF0VmFsaWRhdGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKGZvcm1hdFZhbGlkYXRlKGRhdGEpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVmFsdWUgZG9lcyBub3QgbWF0Y2ggdGhlIGZvcm1hdFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJGb3JtYXQgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgfVxufTtcbiIsImltcG9ydCB7IFZhbGlkYXRpb25FcnJvciwgYXJlQ2xvc2VFbm91Z2ggfSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuaW1wb3J0IHsgS2V5d29yZEZ1bmN0aW9uIH0gZnJvbSBcIi4uL2luZGV4XCI7XG5cbmV4cG9ydCBjb25zdCBOdW1iZXJLZXl3b3JkczogUmVjb3JkPHN0cmluZywgS2V5d29yZEZ1bmN0aW9uPiA9IHtcbiAgbWluaW11bShzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yLCBpbnN0YW5jZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxldCBtaW4gPSBzY2hlbWEubWluaW11bTtcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtID09PSBcIm51bWJlclwiKSB7XG4gICAgICBtaW4gPSBzY2hlbWEuZXhjbHVzaXZlTWluaW11bSArIDFlLTE1O1xuICAgIH0gZWxzZSBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gPT09IHRydWUpIHtcbiAgICAgIG1pbiArPSAxZS0xNTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YSA8IG1pbikge1xuICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVmFsdWUgaXMgbGVzcyB0aGFuIHRoZSBtaW5pbXVtXCIpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSxcblxuICBtYXhpbXVtKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IsIGluc3RhbmNlKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IG1heCA9IHNjaGVtYS5tYXhpbXVtO1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIG1heCA9IHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtIC0gMWUtMTU7XG4gICAgfSBlbHNlIGlmIChzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSA9PT0gdHJ1ZSkge1xuICAgICAgbWF4IC09IDFlLTE1O1xuICAgIH1cblxuICAgIGlmIChkYXRhID4gbWF4KSB7XG4gICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIG1heGltdW1cIik7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIG11bHRpcGxlT2Yoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvciwgaW5zdGFuY2UpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBxdW90aWVudCA9IGRhdGEgLyBzY2hlbWEubXVsdGlwbGVPZjtcblxuICAgIGlmICghaXNGaW5pdGUocXVvdGllbnQpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFhcmVDbG9zZUVub3VnaChxdW90aWVudCwgTWF0aC5yb3VuZChxdW90aWVudCkpKSB7XG4gICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgYSBtdWx0aXBsZSBvZiB0aGUgbXVsdGlwbGVPZlwiKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgZXhjbHVzaXZlTWluaW11bShzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yLCBpbnN0YW5jZSkge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiIHx8XG4gICAgICB0eXBlb2Ygc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gIT09IFwibnVtYmVyXCIgfHxcbiAgICAgIFwibWluaW11bVwiIGluIHNjaGVtYVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhIDw9IHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICsgMWUtMTUpIHtcbiAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlZhbHVlIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgZXhjbHVzaXZlTWluaW11bVwiKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH0sXG5cbiAgZXhjbHVzaXZlTWF4aW11bShzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yLCBpbnN0YW5jZSkge1xuICAgIGlmIChcbiAgICAgIHR5cGVvZiBkYXRhICE9PSBcIm51bWJlclwiIHx8XG4gICAgICB0eXBlb2Ygc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gIT09IFwibnVtYmVyXCIgfHxcbiAgICAgIFwibWF4aW11bVwiIGluIHNjaGVtYVxuICAgICkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhID49IHNjaGVtYS5leGNsdXNpdmVNYXhpbXVtKSB7XG4gICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXG4gICAgICAgIFwiVmFsdWUgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHRoZSBleGNsdXNpdmVNYXhpbXVtXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG59O1xuIiwiaW1wb3J0IHsgQ29tcGlsZWRTY2hlbWEsIEtleXdvcmRGdW5jdGlvbiB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IHtcbiAgVmFsaWRhdGlvbkVycm9yLFxuICBkZWVwRXF1YWwsXG4gIGlzQ29tcGlsZWRTY2hlbWEsXG4gIGlzT2JqZWN0XG59IGZyb20gXCIuLi91dGlsc1wiO1xuXG5leHBvcnQgY29uc3QgT3RoZXJLZXl3b3JkczogUmVjb3JkPHN0cmluZywgS2V5d29yZEZ1bmN0aW9uPiA9IHtcblxuICBlbnVtKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IpIHtcbiAgICAvLyBDaGVjayBpZiBkYXRhIGlzIGFuIGFycmF5IG9yIGFuIG9iamVjdFxuICAgIGNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5KGRhdGEpO1xuICAgIGNvbnN0IGlzT2JqZWN0ID0gdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgZGF0YSAhPT0gbnVsbDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hLmVudW0ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGVudW1JdGVtID0gc2NoZW1hLmVudW1baV07XG5cbiAgICAgIC8vIFNpbXBsZSBlcXVhbGl0eSBjaGVja1xuICAgICAgaWYgKGVudW1JdGVtID09PSBkYXRhKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgZGF0YSBpcyBhbiBhcnJheSBvciBhbiBvYmplY3QsIGNoZWNrIGZvciBkZWVwIGVxdWFsaXR5XG4gICAgICBpZiAoXG4gICAgICAgIChpc0FycmF5ICYmIEFycmF5LmlzQXJyYXkoZW51bUl0ZW0pKSB8fFxuICAgICAgICAoaXNPYmplY3QgJiYgdHlwZW9mIGVudW1JdGVtID09PSBcIm9iamVjdFwiICYmIGVudW1JdGVtICE9PSBudWxsKVxuICAgICAgKSB7XG4gICAgICAgIGlmIChkZWVwRXF1YWwoZW51bUl0ZW0sIGRhdGEpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVmFsdWUgaXMgbm90IG9uZSBvZiB0aGUgYWxsb3dlZCB2YWx1ZXNcIik7XG4gIH0sXG5cbiAgYWxsT2Yoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hLmFsbE9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaXNPYmplY3Qoc2NoZW1hLmFsbE9mW2ldKSkge1xuICAgICAgICBpZiAoXCIkdmFsaWRhdGVcIiBpbiBzY2hlbWEuYWxsT2ZbaV0pIHtcbiAgICAgICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5hbGxPZltpXS4kdmFsaWRhdGUoZGF0YSk7XG4gICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgdmFsaWRcIiwgeyBjYXVzZTogZXJyb3IgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHNjaGVtYS5hbGxPZltpXSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgaWYgKEJvb2xlYW4oZGF0YSkgIT09IHNjaGVtYS5hbGxPZltpXSkge1xuICAgICAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlZhbHVlIGlzIG5vdCB2YWxpZFwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgIT09IHNjaGVtYS5hbGxPZltpXSkge1xuICAgICAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgdmFsaWRcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9LFxuXG4gIGFueU9mKHNjaGVtYSwgZGF0YSwgZGVmaW5lRXJyb3IpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5hbnlPZi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlzT2JqZWN0KHNjaGVtYS5hbnlPZltpXSkpIHtcbiAgICAgICAgaWYgKFwiJHZhbGlkYXRlXCIgaW4gc2NoZW1hLmFueU9mW2ldKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBzY2hlbWEuYW55T2ZbaV0uJHZhbGlkYXRlKGRhdGEpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuYW55T2ZbaV0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgaWYgKEJvb2xlYW4oZGF0YSkgPT09IHNjaGVtYS5hbnlPZltpXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhID09PSBzY2hlbWEuYW55T2ZbaV0pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgdmFsaWRcIik7XG4gIH0sXG5cbiAgb25lT2Yoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGxldCB2YWxpZENvdW50ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5vbmVPZi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGlzT2JqZWN0KHNjaGVtYS5vbmVPZltpXSkpIHtcbiAgICAgICAgaWYgKFwiJHZhbGlkYXRlXCIgaW4gc2NoZW1hLm9uZU9mW2ldKSB7XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBzY2hlbWEub25lT2ZbaV0uJHZhbGlkYXRlKGRhdGEpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIHZhbGlkQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRDb3VudCsrO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLm9uZU9mW2ldID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICAgIGlmIChCb29sZWFuKGRhdGEpID09PSBzY2hlbWEub25lT2ZbaV0pIHtcbiAgICAgICAgICAgIHZhbGlkQ291bnQrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSA9PT0gc2NoZW1hLm9uZU9mW2ldKSB7XG4gICAgICAgICAgdmFsaWRDb3VudCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbGlkQ291bnQgPT09IDEpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgdmFsaWRcIik7XG4gIH0sXG5cbiAgXG5cbiAgY29uc3Qoc2NoZW1hLCBkYXRhLCBkZWZpbmVFcnJvcikge1xuICAgIGlmIChcbiAgICAgIGRhdGEgPT09IHNjaGVtYS5jb25zdCB8fFxuICAgICAgKGlzT2JqZWN0KGRhdGEpICYmXG4gICAgICAgIGlzT2JqZWN0KHNjaGVtYS5jb25zdCkgJiZcbiAgICAgICAgZGVlcEVxdWFsKGRhdGEsIHNjaGVtYS5jb25zdCkpIHx8XG4gICAgICAoQXJyYXkuaXNBcnJheShkYXRhKSAmJlxuICAgICAgICBBcnJheS5pc0FycmF5KHNjaGVtYS5jb25zdCkgJiZcbiAgICAgICAgZGVlcEVxdWFsKGRhdGEsIHNjaGVtYS5jb25zdCkpXG4gICAgKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlZhbHVlIGlzIG5vdCB2YWxpZFwiKTtcbiAgfSxcblxuICBpZihzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKFwidGhlblwiIGluIHNjaGVtYSA9PT0gZmFsc2UgJiYgXCJlbHNlXCIgaW4gc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNjaGVtYS5pZiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGlmIChzY2hlbWEuaWYpIHtcbiAgICAgICAgaWYgKHNjaGVtYS50aGVuKSB7XG4gICAgICAgICAgcmV0dXJuIHNjaGVtYS50aGVuLiR2YWxpZGF0ZShkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChzY2hlbWEuZWxzZSkge1xuICAgICAgICByZXR1cm4gc2NoZW1hLmVsc2UuJHZhbGlkYXRlKGRhdGEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGVycm9yID0gc2NoZW1hLmlmLiR2YWxpZGF0ZShkYXRhKTtcbiAgICBpZiAoIWVycm9yKSB7XG4gICAgICBpZiAoc2NoZW1hLnRoZW4pIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYS50aGVuLiR2YWxpZGF0ZShkYXRhKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHNjaGVtYS5lbHNlKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWEuZWxzZS4kdmFsaWRhdGUoZGF0YSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9LFxuXG4gIG5vdChzY2hlbWEsIGRhdGEsIGRlZmluZUVycm9yKSB7XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEubm90ID09PSBcImJvb2xlYW5cIikge1xuICAgICAgaWYgKHNjaGVtYS5ub3QpIHtcbiAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVmFsdWUgaXMgbm90IHZhbGlkXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc09iamVjdChzY2hlbWEubm90KSkge1xuICAgICAgaWYgKFwiJHZhbGlkYXRlXCIgaW4gc2NoZW1hLm5vdCkge1xuICAgICAgICBjb25zdCBlcnJvciA9IHNjaGVtYS5ub3QuJHZhbGlkYXRlKGRhdGEpO1xuICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmluZUVycm9yKFwiVmFsdWUgaXMgbm90IHZhbGlkXCIsIHsgY2F1c2U6IGVycm9yIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZpbmVFcnJvcihcIlZhbHVlIGlzIG5vdCB2YWxpZFwiKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVmaW5lRXJyb3IoXCJWYWx1ZSBpcyBub3QgdmFsaWRcIik7XG4gIH1cbn07XG4iLCJpbXBvcnQge1xuICBEZWZpbmVFcnJvckZ1bmN0aW9uLFxuICBWYWxpZGF0aW9uRXJyb3IsXG4gIGRlZXBDbG9uZSxcbiAgZ2V0RGVmaW5lZEVycm9yRnVuY3Rpb25Gb3JLZXksXG4gIGdldE5hbWVkRnVuY3Rpb24sXG4gIGlzT2JqZWN0XG59IGZyb20gXCIuL3V0aWxzXCI7XG5cbmltcG9ydCB7IEZvcm1hdHMgfSBmcm9tIFwiLi9mb3JtYXRzXCI7XG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgeyBrZXl3b3JkcyB9IGZyb20gXCIuL2tleXdvcmRzXCI7XG5cbmV4cG9ydCB0eXBlIFJlc3VsdCA9IHZvaWQgfCBWYWxpZGF0aW9uRXJyb3I7XG5cbmV4cG9ydCBpbnRlcmZhY2UgS2V5d29yZEZ1bmN0aW9uIHtcbiAgKFxuICAgIHNjaGVtYTogQ29tcGlsZWRTY2hlbWEsXG4gICAgZGF0YTogYW55LFxuICAgIGRlZmluZUVycm9yOiBEZWZpbmVFcnJvckZ1bmN0aW9uLFxuICAgIGluc3RhbmNlOiBTY2hlbWFTaGllbGRcbiAgKTogUmVzdWx0O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFR5cGVGdW5jdGlvbiB7XG4gIChkYXRhOiBhbnkpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1hdEZ1bmN0aW9uIHtcbiAgKGRhdGE6IGFueSk6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdGVGdW5jdGlvbiB7XG4gIChkYXRhOiBhbnkpOiBSZXN1bHQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRTY2hlbWEge1xuICAkdmFsaWRhdGU/OiBWYWxpZGF0ZUZ1bmN0aW9uO1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9yIHtcbiAgKGRhdGE6IGFueSk6IHsgZGF0YTogYW55OyBlcnJvcjogVmFsaWRhdGlvbkVycm9yIHwgbnVsbDsgdmFsaWQ6IGJvb2xlYW4gfTtcbiAgY29tcGlsZWRTY2hlbWE6IENvbXBpbGVkU2NoZW1hO1xufVxuXG5leHBvcnQgY2xhc3MgU2NoZW1hU2hpZWxkIHtcbiAgdHlwZXMgPSBuZXcgTWFwPHN0cmluZywgVHlwZUZ1bmN0aW9uIHwgZmFsc2U+KCk7XG4gIGZvcm1hdHMgPSBuZXcgTWFwPHN0cmluZywgRm9ybWF0RnVuY3Rpb24gfCBmYWxzZT4oKTtcbiAga2V5d29yZHMgPSBuZXcgTWFwPHN0cmluZywgS2V5d29yZEZ1bmN0aW9uIHwgZmFsc2U+KCk7XG4gIGltbXV0YWJsZSA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBpbW11dGFibGUgPSBmYWxzZVxuICB9OiB7XG4gICAgaW1tdXRhYmxlPzogYm9vbGVhbjtcbiAgfSA9IHt9KSB7XG4gICAgdGhpcy5pbW11dGFibGUgPSBpbW11dGFibGU7XG5cbiAgICBmb3IgKGNvbnN0IFt0eXBlLCB2YWxpZGF0b3JdIG9mIE9iamVjdC5lbnRyaWVzKFR5cGVzKSkge1xuICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICB0aGlzLmFkZFR5cGUodHlwZSwgdmFsaWRhdG9yKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IFtrZXl3b3JkLCB2YWxpZGF0b3JdIG9mIE9iamVjdC5lbnRyaWVzKGtleXdvcmRzKSkge1xuICAgICAgdGhpcy5hZGRLZXl3b3JkKGtleXdvcmQsIHZhbGlkYXRvciBhcyBLZXl3b3JkRnVuY3Rpb24pO1xuICAgIH1cblxuICAgIGZvciAoY29uc3QgW2Zvcm1hdCwgdmFsaWRhdG9yXSBvZiBPYmplY3QuZW50cmllcyhGb3JtYXRzKSkge1xuICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICB0aGlzLmFkZEZvcm1hdChmb3JtYXQsIHZhbGlkYXRvciBhcyBGb3JtYXRGdW5jdGlvbik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgYWRkVHlwZShuYW1lOiBzdHJpbmcsIHZhbGlkYXRvcjogVHlwZUZ1bmN0aW9uKSB7XG4gICAgdGhpcy50eXBlcy5zZXQobmFtZSwgdmFsaWRhdG9yKTtcbiAgfVxuXG4gIGFkZEZvcm1hdChuYW1lOiBzdHJpbmcsIHZhbGlkYXRvcjogRm9ybWF0RnVuY3Rpb24pIHtcbiAgICB0aGlzLmZvcm1hdHMuc2V0KG5hbWUsIHZhbGlkYXRvcik7XG4gIH1cblxuICBhZGRLZXl3b3JkKG5hbWU6IHN0cmluZywgdmFsaWRhdG9yOiBLZXl3b3JkRnVuY3Rpb24pIHtcbiAgICB0aGlzLmtleXdvcmRzLnNldChuYW1lLCB2YWxpZGF0b3IpO1xuICB9XG5cbiAgY29tcGlsZShzY2hlbWE6IGFueSk6IFZhbGlkYXRvciB7XG4gICAgY29uc3QgY29tcGlsZWRTY2hlbWEgPSB0aGlzLmNvbXBpbGVTY2hlbWEoc2NoZW1hKTtcbiAgICBpZiAoIWNvbXBpbGVkU2NoZW1hLiR2YWxpZGF0ZSkge1xuICAgICAgaWYgKHRoaXMuaXNTY2hlbWFMaWtlKHNjaGVtYSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoXCJJbnZhbGlkIHNjaGVtYVwiKTtcbiAgICAgIH1cblxuICAgICAgY29tcGlsZWRTY2hlbWEuJHZhbGlkYXRlID0gZ2V0TmFtZWRGdW5jdGlvbjxWYWxpZGF0ZUZ1bmN0aW9uPihcbiAgICAgICAgXCJhbnlcIixcbiAgICAgICAgKCkgPT4ge31cbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRhdGU6IFZhbGlkYXRvciA9IChkYXRhOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGNsb25lZERhdGEgPSB0aGlzLmltbXV0YWJsZSA/IGRlZXBDbG9uZShkYXRhKSA6IGRhdGE7XG4gICAgICBjb25zdCBlcnJvciA9IGNvbXBpbGVkU2NoZW1hLiR2YWxpZGF0ZShjbG9uZWREYXRhKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZGF0YTogY2xvbmVkRGF0YSxcbiAgICAgICAgZXJyb3I6IGVycm9yID8gZXJyb3IgOiBudWxsLFxuICAgICAgICB2YWxpZDogIWVycm9yXG4gICAgICB9O1xuICAgIH07XG5cbiAgICB2YWxpZGF0ZS5jb21waWxlZFNjaGVtYSA9IGNvbXBpbGVkU2NoZW1hO1xuXG4gICAgcmV0dXJuIHZhbGlkYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBjb21waWxlU2NoZW1hKHNjaGVtYTogUGFydGlhbDxDb21waWxlZFNjaGVtYT4gfCBhbnkpOiBDb21waWxlZFNjaGVtYSB7XG4gICAgaWYgKCFpc09iamVjdChzY2hlbWEpKSB7XG4gICAgICBpZiAoc2NoZW1hID09PSB0cnVlKSB7XG4gICAgICAgIHNjaGVtYSA9IHtcbiAgICAgICAgICBhbnlPZjogW3t9XVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XG4gICAgICAgIHNjaGVtYSA9IHtcbiAgICAgICAgICBvbmVPZjogW11cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVtYSA9IHtcbiAgICAgICAgICBvbmVPZjogW3NjaGVtYV1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb21waWxlZFNjaGVtYTogQ29tcGlsZWRTY2hlbWEgPSB7fSBhcyBDb21waWxlZFNjaGVtYTtcbiAgICBjb25zdCBkZWZpbmVUeXBlRXJyb3IgPSBnZXREZWZpbmVkRXJyb3JGdW5jdGlvbkZvcktleShcInR5cGVcIiwgc2NoZW1hKTtcbiAgICBjb25zdCB0eXBlVmFsaWRhdGlvbnM6IFR5cGVGdW5jdGlvbltdID0gW107XG5cbiAgICBsZXQgbWV0aG9kTmFtZSA9IFwiXCI7XG5cbiAgICBpZiAoXCJ0eXBlXCIgaW4gc2NoZW1hKSB7XG4gICAgICBjb25zdCB0eXBlcyA9IEFycmF5LmlzQXJyYXkoc2NoZW1hLnR5cGUpXG4gICAgICAgID8gc2NoZW1hLnR5cGVcbiAgICAgICAgOiBzY2hlbWEudHlwZS5zcGxpdChcIixcIikubWFwKCh0KSA9PiB0LnRyaW0oKSk7XG5cbiAgICAgIGZvciAoY29uc3QgdHlwZSBvZiB0eXBlcykge1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSB0aGlzLnR5cGVzLmdldCh0eXBlKTtcbiAgICAgICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgICAgIHR5cGVWYWxpZGF0aW9ucy5wdXNoKHZhbGlkYXRvcik7XG4gICAgICAgICAgbWV0aG9kTmFtZSArPSAobWV0aG9kTmFtZSA/IFwiX09SX1wiIDogXCJcIikgKyB2YWxpZGF0b3IubmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCB0eXBlVmFsaWRhdGlvbnNMZW5ndGggPSB0eXBlVmFsaWRhdGlvbnMubGVuZ3RoO1xuXG4gICAgICBpZiAodHlwZVZhbGlkYXRpb25zTGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRocm93IGRlZmluZVR5cGVFcnJvcihcIkludmFsaWQgdHlwZSBmb3Igc2NoZW1hXCIsIHsgZGF0YTogc2NoZW1hLnR5cGUgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlVmFsaWRhdGlvbnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgY29uc3QgdHlwZVZhbGlkYXRpb24gPSB0eXBlVmFsaWRhdGlvbnNbMF07XG4gICAgICAgIGNvbXBpbGVkU2NoZW1hLiR2YWxpZGF0ZSA9IGdldE5hbWVkRnVuY3Rpb248VmFsaWRhdGVGdW5jdGlvbj4oXG4gICAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgICAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVWYWxpZGF0aW9uKGRhdGEpKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBkZWZpbmVUeXBlRXJyb3IoXCJJbnZhbGlkIHR5cGVcIik7XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlVmFsaWRhdGlvbnNMZW5ndGggPiAxKSB7XG4gICAgICAgIGNvbXBpbGVkU2NoZW1hLiR2YWxpZGF0ZSA9IGdldE5hbWVkRnVuY3Rpb248VmFsaWRhdGVGdW5jdGlvbj4oXG4gICAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgICAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0eXBlVmFsaWRhdGlvbnNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAodHlwZVZhbGlkYXRpb25zW2ldKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZGVmaW5lVHlwZUVycm9yKFwiSW52YWxpZCB0eXBlXCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIGlmIChrZXkgPT09IFwidHlwZVwiKSB7XG4gICAgICAgIGNvbXBpbGVkU2NoZW1hLnR5cGUgPSBzY2hlbWEudHlwZTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleXdvcmRWYWxpZGF0b3IgPSB0aGlzLmtleXdvcmRzLmdldChrZXkpO1xuICAgICAgaWYgKGtleXdvcmRWYWxpZGF0b3IpIHtcbiAgICAgICAgY29uc3QgZGVmaW5lRXJyb3IgPSBnZXREZWZpbmVkRXJyb3JGdW5jdGlvbkZvcktleShrZXksIHNjaGVtYVtrZXldKTtcbiAgICAgICAgY29uc3QgZXhlY3V0ZUtleXdvcmRWYWxpZGF0b3IgPSAoZGF0YTogYW55KSA9PlxuICAgICAgICAgIChrZXl3b3JkVmFsaWRhdG9yIGFzIEtleXdvcmRGdW5jdGlvbikoXG4gICAgICAgICAgICBjb21waWxlZFNjaGVtYSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBkZWZpbmVFcnJvcixcbiAgICAgICAgICAgIHRoaXNcbiAgICAgICAgICApO1xuXG4gICAgICAgIGlmIChjb21waWxlZFNjaGVtYS4kdmFsaWRhdGUpIHtcbiAgICAgICAgICBjb25zdCBwcmV2VmFsaWRhdG9yID0gY29tcGlsZWRTY2hlbWEuJHZhbGlkYXRlO1xuICAgICAgICAgIG1ldGhvZE5hbWUgKz0gYF9BTkRfJHtrZXl3b3JkVmFsaWRhdG9yLm5hbWV9YDtcbiAgICAgICAgICBjb21waWxlZFNjaGVtYS4kdmFsaWRhdGUgPSBnZXROYW1lZEZ1bmN0aW9uPFZhbGlkYXRlRnVuY3Rpb24+KFxuICAgICAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgICAgIChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gcHJldlZhbGlkYXRvcihkYXRhKTtcbiAgICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNvbnN0IGtleXdvcmRFcnJvciA9IGV4ZWN1dGVLZXl3b3JkVmFsaWRhdG9yKGRhdGEpO1xuICAgICAgICAgICAgICBpZiAoa2V5d29yZEVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGtleXdvcmRFcnJvcjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWV0aG9kTmFtZSA9IGtleXdvcmRWYWxpZGF0b3IubmFtZTtcbiAgICAgICAgICBjb21waWxlZFNjaGVtYS4kdmFsaWRhdGUgPSBnZXROYW1lZEZ1bmN0aW9uPFZhbGlkYXRlRnVuY3Rpb24+KFxuICAgICAgICAgICAgbWV0aG9kTmFtZSxcbiAgICAgICAgICAgIGV4ZWN1dGVLZXl3b3JkVmFsaWRhdG9yXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaXNPYmplY3Qoc2NoZW1hW2tleV0pKSB7XG4gICAgICAgIGNvbXBpbGVkU2NoZW1hW2tleV0gPSB0aGlzLmNvbXBpbGVTY2hlbWEoc2NoZW1hW2tleV0pO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoZW1hW2tleV0pKSB7XG4gICAgICAgIGNvbXBpbGVkU2NoZW1hW2tleV0gPSBzY2hlbWFba2V5XS5tYXAoKHN1YlNjaGVtYSwgaW5kZXgpID0+XG4gICAgICAgICAgdGhpcy5pc1NjaGVtYUxpa2Uoc3ViU2NoZW1hKVxuICAgICAgICAgICAgPyB0aGlzLmNvbXBpbGVTY2hlbWEoc3ViU2NoZW1hKVxuICAgICAgICAgICAgOiBzdWJTY2hlbWFcbiAgICAgICAgKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbXBpbGVkU2NoZW1hW2tleV0gPSBzY2hlbWFba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29tcGlsZWRTY2hlbWEgYXMgQ29tcGlsZWRTY2hlbWE7XG4gIH1cblxuICBpc1NjaGVtYUxpa2Uoc3ViU2NoZW1hOiBhbnkpOiBib29sZWFuIHtcbiAgICBpZiAoaXNPYmplY3Qoc3ViU2NoZW1hKSkge1xuICAgICAgaWYgKFwidHlwZVwiIGluIHN1YlNjaGVtYSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgc3ViS2V5IGluIHN1YlNjaGVtYSkge1xuICAgICAgICBpZiAodGhpcy5rZXl3b3Jkcy5oYXMoc3ViS2V5KSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiK0tBQUFBLEcsRUFBQSx3Q0FBQUMsRUFBQUMsR0FBQSxJQUFJQyxFQUFrQix1Q0FFbEJDLEVBQWlCLG1CQUNqQkMsRUFBaUIsS0FDakJDLEVBQVMsT0FDVEMsRUFBa0Isa0JBQ2xCQyxFQUFlLDBDQTRFbkJOLEVBQU9ELFFBQXlCLGdCQUFJLENBQ2xDRSxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNBQyxFQUNGLEcsNEVDM0VhQyxFQUFOLGNBQThCQyxNQUNuQ0MsUUFDQUMsS0FDQUMsUUFDQUMsTUFDQUMsS0FBZSxHQUNmQyxLQUNBQyxPQUVRQyxVQUFVQyxFQUFVLEtBQzFCLE1BQU1KLEVBQ0pJLEVBQ0EsSUFDQUMsS0FBS1AsY0FDaUIsSUFBZE8sS0FBS1IsS0FBdUIsSUFBTVEsS0FBS1IsS0FBTyxJQUV4RCxPQUFLUSxLQUFLTixNQUtITSxLQUFLTixNQUFNSSxVQUFVSCxJQUoxQkssS0FBS0wsS0FBT0EsRUFDTEssS0FJWCxDQUVBQyxXQUNFLE9BQU9ELEtBQUtGLFdBQ2QsR0FhSyxTQUFTSSxFQUNkQyxFQUNBTixHQUVBLE1BQU1PLEVBQWUsSUFBSWYsRUFBZ0IsV0FBV2MsS0FDcERDLEVBQWFYLFFBQVVVLEVBQ3ZCQyxFQUFhUCxPQUFTQSxFQVV0QixPQUFPUSxFQUNMLGVBQWVGLElBVHdCLENBQUNaLEVBQVNlLEVBQVUsQ0FBQyxLQUM1REYsRUFBYWIsUUFBVUEsRUFDdkJhLEVBQWFaLEtBQU9jLEVBQVFkLEtBQzVC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