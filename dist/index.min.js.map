//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlX2lzX215X2lwX3ZhbGlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsInJlSXB2NEZpcnN0UGFzcyIsInJlU3VibmV0U3RyaW5nIiwicmVGb3J3YXJkU2xhc2giLCJyZVpvbmUiLCJyZUJhZENoYXJhY3RlcnMiLCJyZUJhZEFkZHJlc3MiLCJWYWxpZGF0aW9uRXJyb3IiLCJFcnJvciIsIm5hbWUiLCJwb2ludGVyIiwibWVzc2FnZSIsInZhbHVlIiwiY29kZSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsInN1cGVyIiwidGhpcyIsImRlZXBFcXVhbCIsIm9iaiIsIm90aGVyIiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwiaSIsImtleXMiLCJPYmplY3QiLCJrZXkiLCJpc09iamVjdCIsImRhdGEiLCJpbXBvcnRfaXNfbXlfaXBfdmFsaWQiLCJfX3RvRVNNIiwiUmVnRXhwcyIsInVyaSIsImVtYWlsIiwiaG9zdG5hbWUiLCJkYXRlIiwibm90SW1wbGVtZW50ZWRGb3JtYXQiLCJGb3JtYXRzIiwidXBlckNhc2VEYXRhIiwidG9VcHBlckNhc2UiLCJ0ZXN0IiwiRGF0ZSIsImlzTmFOIiwiZ2V0VGltZSIsImxvY2FsIiwiZG9tYWluIiwic3BsaXQiLCJpbmRleE9mIiwiaXB2NCIsImlzTXlJcFZhbGlkIiwidmVyc2lvbiIsImlwdjYiLCJyZWdleCIsIlJlZ0V4cCIsImUiLCJ0aW1lIiwicmVwbGFjZSIsImR1cmF0aW9uIiwidXVpZCIsImlyaSIsIlR5cGVzIiwib2JqZWN0Iiwic2NoZW1hIiwidmFsaWQiLCJlcnJvcnMiLCJhcnJheSIsInN0cmluZyIsIm51bWJlciIsImludGVnZXIiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJib29sZWFuIiwibnVsbCIsImtleXdvcmRzIiwicmVxdWlyZWQiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJwcm9wZXJ0aWVzIiwic2NoZW1hU2hpZWxkSW5zdGFuY2UiLCJmaW5hbERhdGEiLCJkZWZhdWx0IiwidmFsaWRhdG9yIiwidmFsaWRhdG9yUmVzdWx0IiwibWF4UHJvcGVydGllcyIsIm1pblByb3BlcnRpZXMiLCJhZGRpdGlvbmFsUHJvcGVydGllcyIsInBhdHRlcm5Qcm9wZXJ0aWVzIiwibWF0Y2giLCJwYXR0ZXJuIiwicGF0dGVybnMiLCJwcm9wZXJ0eU5hbWVzIiwiaXRlbXMiLCJzY2hlbWFJdGVtcyIsInNjaGVtYUl0ZW1zTGVuZ3RoIiwiZGF0YUxlbmd0aCIsIml0ZW1zTGVuZ3RoIiwiTWF0aCIsIm1pbiIsInZhbGlkYXRvckVycm9ycyIsIm1pbkl0ZW1zIiwibWF4SXRlbXMiLCJhZGRpdGlvbmFsSXRlbXMiLCJ1bmlxdWVJdGVtcyIsInVuaXF1ZSIsIk1hcCIsIml0ZW0iLCJpdGVtU3RyIiwic29ydGVkIiwiZnJvbUVudHJpZXMiLCJlbnRyaWVzIiwic29ydCIsImEiLCJiIiwibG9jYWxlQ29tcGFyZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXMiLCJzZXQiLCJtaW5MZW5ndGgiLCJtYXhMZW5ndGgiLCJwYXR0ZXJuUmVnZXhwIiwiZm9ybWF0IiwiZm9ybWF0SW5zdGFuY2UiLCJmb3JtYXRWYWxpZGF0ZSIsImZvcm1hdHMiLCJnZXQiLCJlbnVtIiwiZW51bUl0ZW0iLCJqb2luIiwibWluaW11bSIsImV4Y2x1c2l2ZU1pbmltdW0iLCJtYXhpbXVtIiwibWF4IiwiZXhjbHVzaXZlTWF4aW11bSIsIm11bHRpcGxlT2YiLCJxdW90aWVudCIsImlzRmluaXRlIiwiYXJlTXVsdGlwbGVzIiwiZXBzaWxvbiIsImFicyIsImFyZUNsb3NlRW5vdWdoIiwicm91bmQiLCJudWxsYWJsZSIsImFsbE9mIiwiQm9vbGVhbiIsImFueU9mIiwidmFsaWRhdGlvblJlc3VsdCIsIm9uZU9mIiwidmFsaWRDb3VudCIsImRlcGVuZGVuY2llcyIsImRlcGVuZGVuY3kiLCJjb25zdCIsImNvbnRhaW5zIiwiaWYiLCJ0aGVuIiwidGhlblZhbGlkYXRvciIsInRoZW5SZXN1bHQiLCJlbHNlIiwiZWxzZVZhbGlkYXRvciIsImVsc2VSZXN1bHQiLCJpZlZhbGlkYXRvciIsIm5vdCIsInR5cGVzIiwiZm9yRWFjaCIsInR5cGUiLCJhZGRUeXBlIiwia2V5d29yZCIsImFkZEtleXdvcmQiLCJhZGRGb3JtYXQiLCJjb21waWxlIiwiY29tcGlsZWRTY2hlbWEiLCJjb21waWxlU2NoZW1hIiwidmFsaWRhdGUiLCJpc1NjaGVtYUxpa2UiLCJtYXAiLCJ0IiwidHJpbSIsInZhbGlkYXRvcnMiLCJmaWx0ZXIiLCJ0eXBlRXJyb3JzUmVzdWx0IiwidmFsaWRhdGVUeXBlcyIsInZhbGlkYXRlS2V5d29yZHMiLCJoYW5kbGVTdWJTY2hlbWEiLCJzdWJTY2hlbWEiLCJpbmRleCIsInN1YktleSIsInNjaGVtYVZhbGlkYXRvciIsInNjaGVtYVJlc3VsdCIsImtleXdvcmRSZXN1bHQiLCJrZXl3b3JkVmFsaWRhdG9yIiwiaXNTY2hlbWFPcktleXdvcmRQcmVzZW50Il0sInNvdXJjZXMiOlsiLi4vbm9kZV9tb2R1bGVzL2lzLW15LWlwLXZhbGlkL2luZGV4LmpzIiwiLi4vbGliL3V0aWxzLnRzIiwiLi4vbGliL2Zvcm1hdHMudHMiLCIuLi9saWIvdHlwZXMudHMiLCIuLi9saWIva2V5d29yZHMudHMiLCIuLi9saWIva2V5d29yZHMvb2JqZWN0LWtleXdvcmRzLnRzIiwiLi4vbGliL2tleXdvcmRzL2FycmF5LWtleXdvcmRzLnRzIiwiLi4vbGliL2tleXdvcmRzL3N0cmluZy1rZXl3b3Jkcy50cyIsIi4uL2xpYi9rZXl3b3Jkcy9udW1iZXIta2V5d29yZHMudHMiLCIuLi9saWIva2V5d29yZHMvb3RoZXIta2V5d29yZHMudHMiLCIuLi9saWIvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHJlSXB2NEZpcnN0UGFzcyA9IC9eXFxkezEsM31cXC5cXGR7MSwzfVxcLlxcZHsxLDN9XFwuXFxkezEsM30kL1xuXG52YXIgcmVTdWJuZXRTdHJpbmcgPSAvXFwvXFxkezEsM30oPz0lfCQpL1xudmFyIHJlRm9yd2FyZFNsYXNoID0gL1xcLy9cbnZhciByZVpvbmUgPSAvJS4qJC9cbnZhciByZUJhZENoYXJhY3RlcnMgPSAvKFteMC05YS1mOi8lXSkvaVxudmFyIHJlQmFkQWRkcmVzcyA9IC8oWzAtOWEtZl17NSx9fDp7Myx9fFteOl06JHxeOlteOl18XFwvJCkvaVxuXG5mdW5jdGlvbiB2YWxpZGF0ZTQgKGlucHV0KSB7XG4gIGlmICghKHJlSXB2NEZpcnN0UGFzcy50ZXN0KGlucHV0KSkpIHJldHVybiBmYWxzZVxuXG4gIHZhciBwYXJ0cyA9IGlucHV0LnNwbGl0KCcuJylcblxuICBpZiAocGFydHMubGVuZ3RoICE9PSA0KSByZXR1cm4gZmFsc2VcblxuICBpZiAocGFydHNbMF1bMF0gPT09ICcwJyAmJiBwYXJ0c1swXS5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2VcbiAgaWYgKHBhcnRzWzFdWzBdID09PSAnMCcgJiYgcGFydHNbMV0ubGVuZ3RoID4gMSkgcmV0dXJuIGZhbHNlXG4gIGlmIChwYXJ0c1syXVswXSA9PT0gJzAnICYmIHBhcnRzWzJdLmxlbmd0aCA+IDEpIHJldHVybiBmYWxzZVxuICBpZiAocGFydHNbM11bMF0gPT09ICcwJyAmJiBwYXJ0c1szXS5sZW5ndGggPiAxKSByZXR1cm4gZmFsc2VcblxuICB2YXIgbjAgPSBOdW1iZXIocGFydHNbMF0pXG4gIHZhciBuMSA9IE51bWJlcihwYXJ0c1sxXSlcbiAgdmFyIG4yID0gTnVtYmVyKHBhcnRzWzJdKVxuICB2YXIgbjMgPSBOdW1iZXIocGFydHNbM10pXG5cbiAgcmV0dXJuIChuMCA+PSAwICYmIG4wIDwgMjU2ICYmIG4xID49IDAgJiYgbjEgPCAyNTYgJiYgbjIgPj0gMCAmJiBuMiA8IDI1NiAmJiBuMyA+PSAwICYmIG4zIDwgMjU2KVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZTYgKGlucHV0KSB7XG4gIHZhciB3aXRob3V0U3VibmV0ID0gaW5wdXQucmVwbGFjZShyZVN1Ym5ldFN0cmluZywgJycpXG4gIHZhciBoYXNTdWJuZXQgPSAoaW5wdXQubGVuZ3RoICE9PSB3aXRob3V0U3VibmV0Lmxlbmd0aClcblxuICAvLyBGSVhNRTogdGhpcyBzaG91bGQgcHJvYmFibHkgYmUgYW4gb3B0aW9uIGluIHRoZSBmdXR1cmVcbiAgaWYgKGhhc1N1Ym5ldCkgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKCFoYXNTdWJuZXQpIHtcbiAgICBpZiAocmVGb3J3YXJkU2xhc2gudGVzdChpbnB1dCkpIHJldHVybiBmYWxzZVxuICB9XG5cbiAgdmFyIHdpdGhvdXRab25lID0gd2l0aG91dFN1Ym5ldC5yZXBsYWNlKHJlWm9uZSwgJycpXG4gIHZhciBsYXN0UGFydFNlcGFyYXRvciA9IHdpdGhvdXRab25lLmxhc3RJbmRleE9mKCc6JylcblxuICBpZiAobGFzdFBhcnRTZXBhcmF0b3IgPT09IC0xKSByZXR1cm4gZmFsc2VcblxuICB2YXIgbGFzdFBhcnQgPSB3aXRob3V0Wm9uZS5zdWJzdHJpbmcobGFzdFBhcnRTZXBhcmF0b3IgKyAxKVxuICB2YXIgaGFzVjRQYXJ0ID0gdmFsaWRhdGU0KGxhc3RQYXJ0KVxuICB2YXIgYWRkcmVzcyA9IChoYXNWNFBhcnQgPyB3aXRob3V0Wm9uZS5zdWJzdHJpbmcoMCwgbGFzdFBhcnRTZXBhcmF0b3IgKyAxKSArICcxMjM0OjU2NzgnIDogd2l0aG91dFpvbmUpXG5cbiAgaWYgKHJlQmFkQ2hhcmFjdGVycy50ZXN0KGFkZHJlc3MpKSByZXR1cm4gZmFsc2VcbiAgaWYgKHJlQmFkQWRkcmVzcy50ZXN0KGFkZHJlc3MpKSByZXR1cm4gZmFsc2VcblxuICB2YXIgaGFsdmVzID0gYWRkcmVzcy5zcGxpdCgnOjonKVxuXG4gIGlmIChoYWx2ZXMubGVuZ3RoID4gMikgcmV0dXJuIGZhbHNlXG5cbiAgaWYgKGhhbHZlcy5sZW5ndGggPT09IDIpIHtcbiAgICB2YXIgZmlyc3QgPSAoaGFsdmVzWzBdID09PSAnJyA/IFtdIDogaGFsdmVzWzBdLnNwbGl0KCc6JykpXG4gICAgdmFyIGxhc3QgPSAoaGFsdmVzWzFdID09PSAnJyA/IFtdIDogaGFsdmVzWzFdLnNwbGl0KCc6JykpXG4gICAgdmFyIHJlbWFpbmluZ0xlbmd0aCA9IDggLSAoZmlyc3QubGVuZ3RoICsgbGFzdC5sZW5ndGgpXG5cbiAgICBpZiAocmVtYWluaW5nTGVuZ3RoIDw9IDApIHJldHVybiBmYWxzZVxuICB9IGVsc2Uge1xuICAgIGlmIChhZGRyZXNzLnNwbGl0KCc6JykubGVuZ3RoICE9PSA4KSByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlIChpbnB1dCkge1xuICByZXR1cm4gdmFsaWRhdGU0KGlucHV0KSB8fCB2YWxpZGF0ZTYoaW5wdXQpXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gdmFsaWRhdG9yIChvcHRpb25zKSB7XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9XG5cbiAgaWYgKG9wdGlvbnMudmVyc2lvbiA9PT0gNCkgcmV0dXJuIHZhbGlkYXRlNFxuICBpZiAob3B0aW9ucy52ZXJzaW9uID09PSA2KSByZXR1cm4gdmFsaWRhdGU2XG4gIGlmIChvcHRpb25zLnZlcnNpb24gPT0gbnVsbCkgcmV0dXJuIHZhbGlkYXRlXG5cbiAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHZlcnNpb246ICcgKyBvcHRpb25zLnZlcnNpb24pXG59XG5cbm1vZHVsZS5leHBvcnRzWydfX2FsbF9yZWdleGVzX18nXSA9IFtcbiAgcmVJcHY0Rmlyc3RQYXNzLFxuICByZVN1Ym5ldFN0cmluZyxcbiAgcmVGb3J3YXJkU2xhc2gsXG4gIHJlWm9uZSxcbiAgcmVCYWRDaGFyYWN0ZXJzLFxuICByZUJhZEFkZHJlc3Ncbl1cbiIsImltcG9ydCB7IFNjaGVtYVNoaWVsZCwgVmFsaWRhdGlvbkVycm9yUHJvcHMgfSBmcm9tICcuL2luZGV4JztcclxuXHJcbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBvaW50ZXI6IHN0cmluZztcclxuICBtZXNzYWdlOiBzdHJpbmc7XHJcbiAgdmFsdWU6IGFueTtcclxuICBjb2RlOiBzdHJpbmc7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgbWVzc2FnZTogc3RyaW5nLFxyXG4gICAgb3B0aW9uczogVmFsaWRhdGlvbkVycm9yUHJvcHMgPSB7XHJcbiAgICAgIHBvaW50ZXI6ICcnLFxyXG4gICAgICB2YWx1ZTogbnVsbCxcclxuICAgICAgY29kZTogJycsXHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgIHRoaXMubmFtZSA9ICdWYWxpZGF0aW9uRXJyb3InO1xyXG4gICAgdGhpcy5wb2ludGVyID0gb3B0aW9ucy5wb2ludGVyO1xyXG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcclxuICAgIHRoaXMudmFsdWUgPSBvcHRpb25zLnZhbHVlO1xyXG4gICAgdGhpcy5jb2RlID0gb3B0aW9ucy5jb2RlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGRlZmF1bHRWYWxpZGF0b3IgPSAoc2NoZW1hLCBkYXRhLCBwb2ludGVyKSA9PiB7XHJcbiAgcmV0dXJuIFtcclxuICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ05vIHZhbGlkYXRvciBmb3IgdGhpcyBzY2hlbWEnLCB7XHJcbiAgICAgIHBvaW50ZXIsXHJcbiAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICBjb2RlOiAnTk9fVkFMSURBVE9SJyxcclxuICAgIH0pLFxyXG4gIF07XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGVlcEVxdWFsKG9iajogQXJyYXk8YW55PiB8IFJlY29yZDxzdHJpbmcsIGFueT4sIG90aGVyOiBBcnJheTxhbnk+IHwgUmVjb3JkPHN0cmluZywgYW55Pikge1xyXG4gIGlmIChBcnJheS5pc0FycmF5KG9iaikgJiYgQXJyYXkuaXNBcnJheShvdGhlcikpIHtcclxuICAgIGlmIChvYmoubGVuZ3RoICE9PSBvdGhlci5sZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICghZGVlcEVxdWFsKG9ialtpXSwgb3RoZXJbaV0pKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG90aGVyID09PSAnb2JqZWN0Jykge1xyXG4gICAgaWYgKG9iaiA9PT0gbnVsbCB8fCBvdGhlciA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gb2JqID09PSBvdGhlcjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcclxuICAgIGlmIChrZXlzLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMob3RoZXIpLmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICBpZiAoIWRlZXBFcXVhbChvYmpba2V5XSwgb3RoZXJba2V5XSkpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIHJldHVybiBvYmogPT09IG90aGVyO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3QoZGF0YSkge1xyXG4gIHJldHVybiB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAhPT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShkYXRhKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFyZUNsb3NlRW5vdWdoKGEsIGIsIGVwc2lsb24gPSAxZS0xNSkge1xyXG4gIHJldHVybiBNYXRoLmFicyhhIC0gYikgPD0gZXBzaWxvbiAqIE1hdGgubWF4KE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRVVEYxNkxlbmd0aChzdHIpIHtcclxuICBsZXQgbGVuZ3RoID0gMDtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgY29uc3QgY29kZVBvaW50ID0gc3RyLmNvZGVQb2ludEF0KGkpO1xyXG4gICAgaWYgKGNvZGVQb2ludCA+IDB4ZmZmZikge1xyXG4gICAgICBpKys7XHJcbiAgICB9XHJcbiAgICBsZW5ndGgrKztcclxuICB9XHJcbiAgcmV0dXJuIGxlbmd0aDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZXBDbG9uZShvYmo6IGFueSk6IGFueSB7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xyXG4gICAgICByZXN1bHRbaV0gPSBkZWVwQ2xvbmUob2JqW2ldKTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNPYmplY3Qob2JqKSkge1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcclxuICAgICAgcmVzdWx0W2tleV0gPSBkZWVwQ2xvbmUob2JqW2tleV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuIiwiaW1wb3J0IGlzTXlJcFZhbGlkIGZyb20gJ2lzLW15LWlwLXZhbGlkJztcclxuaW1wb3J0IHsgRm9ybWF0RnVuY3Rpb24gfSBmcm9tICcuL2luZGV4JztcclxuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG4vLyBUaGUgZGF0ZXRpbWUgMTk5MC0wMi0zMVQxNTo1OTo2MC4xMjMtMDg6MDAgbXVzdCBiZSByZWplY3RlZC5cclxuY29uc3QgUmVnRXhwcyA9IHtcclxuICAnZGF0ZS10aW1lJzogL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVQoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KShcXC5cXGQrKT8oWnwoWystXSkoXFxkezJ9KTooXFxkezJ9KSkkLyxcclxuICB1cmk6IC9eW2EtekEtWl1bYS16QS1aMC05K1xcLS5dKjpbXlxcc10qJC8sXHJcbiAgZW1haWw6XHJcbiAgICAvXlthLXpBLVowLTkuISMkJSYnKisvPT9eX2B7fH1+LV0rQFthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPyg/OlxcLlthLXpBLVowLTldKD86W2EtekEtWjAtOS1dezAsNjF9W2EtekEtWjAtOV0pPykqJC8sXHJcbiAgaG9zdG5hbWU6IC9eW2EtekEtWjAtOV1bYS16QS1aMC05LV17MCw2Mn0oXFwuW2EtekEtWjAtOV1bYS16QS1aMC05LV17MCw2Mn0pKlthLXpBLVowLTldJC8sXHJcbiAgZGF0ZTogL14oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KSQvLFxyXG4gICdqc29uLXBvaW50ZXInOiAvXlxcLyg/Oltefl18fjB8fjEpKiQvLFxyXG4gICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInOiAvXihbMC05XSspKCN8XFwvKD86W15+XXx+MHx+MSkqKT8kLyxcclxufTtcclxuXHJcbmZ1bmN0aW9uIG5vdEltcGxlbWVudGVkRm9ybWF0KGRhdGE6IGFueSkge1xyXG4gIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoYEZvcm1hdCBcIiR7ZGF0YX1cIiBpcyBub3QgaW1wbGVtZW50ZWQgeWV0LiBQbGVhc2Ugb3BlbiBhbiBpc3N1ZSBvbiBHaXRIdWIuYCk7XHJcbiAgcmV0dXJuIGZhbHNlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgRm9ybWF0czogUmVjb3JkPHN0cmluZywgRm9ybWF0RnVuY3Rpb24+ID0ge1xyXG4gIFsnZGF0ZS10aW1lJ10oZGF0YSkge1xyXG4gICAgY29uc3QgdXBlckNhc2VEYXRhID0gZGF0YS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgaWYgKFJlZ0V4cHNbJ2RhdGUtdGltZSddLnRlc3QodXBlckNhc2VEYXRhKSA9PT0gZmFsc2UpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRhdGUgPSBuZXcgRGF0ZSh1cGVyQ2FzZURhdGEpO1xyXG4gICAgcmV0dXJuICFpc05hTihkYXRlLmdldFRpbWUoKSk7XHJcbiAgfSxcclxuICB1cmkoZGF0YSkge1xyXG4gICAgcmV0dXJuIFJlZ0V4cHMudXJpLnRlc3QoZGF0YSk7XHJcbiAgfSxcclxuICBlbWFpbChkYXRhKSB7XHJcbiAgICBpZiAoUmVnRXhwcy5lbWFpbC50ZXN0KGRhdGEpID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgW2xvY2FsLCBkb21haW5dID0gZGF0YS5zcGxpdCgnQCcpO1xyXG5cclxuICAgIGlmIChsb2NhbC5sZW5ndGggPiA2NCB8fCBsb2NhbC5pbmRleE9mKCcuLicpICE9PSAtMSB8fCBsb2NhbFswXSA9PT0gJy4nIHx8IGxvY2FsW2xvY2FsLmxlbmd0aCAtIDFdID09PSAnLicpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChkb21haW4ubGVuZ3RoID4gMjU1IHx8IGRvbWFpbi5pbmRleE9mKCcuLicpICE9PSAtMSB8fCBkb21haW5bMF0gPT09ICcuJyB8fCBkb21haW5bZG9tYWluLmxlbmd0aCAtIDFdID09PSAnLicpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0sXHJcbiAgaXB2NDogaXNNeUlwVmFsaWQoeyB2ZXJzaW9uOiA0IH0pLFxyXG4gIGlwdjY6IGlzTXlJcFZhbGlkKHsgdmVyc2lvbjogNiB9KSxcclxuXHJcbiAgaG9zdG5hbWUoZGF0YSkge1xyXG4gICAgcmV0dXJuIFJlZ0V4cHMuaG9zdG5hbWUudGVzdChkYXRhKTtcclxuICB9LFxyXG4gIGRhdGUoZGF0YSkge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKFJlZ0V4cHMuZGF0ZS50ZXN0KGRhdGEpID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICFpc05hTihuZXcgRGF0ZShkYXRhKS5nZXRUaW1lKCkpO1xyXG4gIH0sXHJcbiAgcmVnZXgoZGF0YSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgbmV3IFJlZ0V4cChkYXRhKTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9LFxyXG4gICdqc29uLXBvaW50ZXInKGRhdGEpIHtcclxuICAgIGlmIChkYXRhID09PSAnJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gUmVnRXhwc1snanNvbi1wb2ludGVyJ10udGVzdChkYXRhKTtcclxuICB9LFxyXG4gICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInKGRhdGEpIHtcclxuICAgIGlmIChkYXRhID09PSAnJykge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gUmVnRXhwc1sncmVsYXRpdmUtanNvbi1wb2ludGVyJ10udGVzdChkYXRhKTtcclxuICB9LFxyXG4gIHRpbWUoZGF0YSkge1xyXG4gICAgcmV0dXJuIEZvcm1hdHNbJ2RhdGUtdGltZSddKGAxOTcwLTAxLTAxVCR7ZGF0YX1aYC5yZXBsYWNlKC9aWiQvLCAnWicpKTtcclxuICB9LFxyXG5cclxuICAvLyBOb3Qgc3VwcG9ydGVkIHlldFxyXG5cclxuICBkdXJhdGlvbjogbm90SW1wbGVtZW50ZWRGb3JtYXQsXHJcbiAgJ2lkbi1lbWFpbCc6IG5vdEltcGxlbWVudGVkRm9ybWF0LFxyXG4gICdpZG4taG9zdG5hbWUnOiBub3RJbXBsZW1lbnRlZEZvcm1hdCxcclxuICB1dWlkOiBub3RJbXBsZW1lbnRlZEZvcm1hdCxcclxuICAndXJpLXJlZmVyZW5jZSc6IG5vdEltcGxlbWVudGVkRm9ybWF0LFxyXG4gIGlyaTogbm90SW1wbGVtZW50ZWRGb3JtYXQsXHJcbiAgJ2lyaS1yZWZlcmVuY2UnOiBub3RJbXBsZW1lbnRlZEZvcm1hdCxcclxuICAndXJpLXRlbXBsYXRlJzogbm90SW1wbGVtZW50ZWRGb3JtYXQsXHJcbn07XHJcbiIsImltcG9ydCB7IGlzT2JqZWN0LCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICcuL3V0aWxzJztcclxuaW1wb3J0IHsgVmFsaWRhdG9yRnVuY3Rpb24gfSBmcm9tICcuL2luZGV4JztcclxuXHJcbmV4cG9ydCBjb25zdCBUeXBlczogUmVjb3JkPHN0cmluZywgVmFsaWRhdG9yRnVuY3Rpb24+ID0ge1xyXG4gIG9iamVjdChzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmIChpc09iamVjdChkYXRhKSkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIGVycm9yczogW10sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0RhdGEgaXMgbm90IGFuIG9iamVjdCcsIHtcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgIGNvZGU6ICdOT1RfQU5fT0JKRUNUJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuICBhcnJheShzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YSAhPT0gbnVsbCAmJiAnbGVuZ3RoJyBpbiBkYXRhKSB7XHJcbiAgICAgIC8vIENoZWNrIGlmIHRoZSBmaXJzdCBrZXkgaXMgYSBudW1iZXIgYW5kIHRoZSBsZW5ndGggaXMgdGhlIHNhbWUgYXMgdGhlIG51bWJlciBvZiBrZXlzIC0gMSAobGVuZ3RoKVxyXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICAgIGlmIChrZXlzLmxlbmd0aCA+IDAgJiYgKGtleXNbMF0gIT09ICcwJyB8fCBrZXlzLmxlbmd0aCAhPT0gZGF0YS5sZW5ndGgpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yczogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdEYXRhIGlzIG5vdCBhbiBhcnJheScsIHtcclxuICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgIGNvZGU6ICdOT1RfQU5fQVJSQVknLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBkYXRhLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignRGF0YSBpcyBub3QgYW4gYXJyYXknLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnTk9UX0FOX0FSUkFZJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuICBzdHJpbmcoc2NoZW1hLCBkYXRhLCBwb2ludGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignRGF0YSBpcyBub3QgYSBzdHJpbmcnLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnTk9UX0FfU1RSSU5HJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuICBudW1iZXIoc2NoZW1hLCBkYXRhLCBwb2ludGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignRGF0YSBpcyBub3QgYSBudW1iZXInLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnTk9UX0FfTlVNQkVSJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuICBpbnRlZ2VyKHNjaGVtYSwgZGF0YSwgcG9pbnRlcikge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGRhdGEpKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignRGF0YSBpcyBub3QgYW4gaW50ZWdlcicsIHtcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgIGNvZGU6ICdOT1RfQU5fSU5URUdFUicsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcbiAgYm9vbGVhbihzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIC8vIENoZWNrIGlmIGRhdGEgaXMgYSBib29sZWFuIGxpa2UgdmFsdWVcclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IHRydWUsXHJcbiAgICAgICAgZXJyb3JzOiBbXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignRGF0YSBpcyBub3QgYSBib29sZWFuJywge1xyXG4gICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgY29kZTogJ05PVF9BX0JPT0xFQU4nLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG4gIG51bGwoc2NoZW1hLCBkYXRhLCBwb2ludGVyKSB7XHJcbiAgICBpZiAoZGF0YSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIGVycm9yczogW10sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0RhdGEgaXMgbm90IG51bGwnLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnTk9UX05VTEwnLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG59O1xyXG4iLCJpbXBvcnQgeyBBcnJheUtleXdvcmRzIH0gZnJvbSBcIi4va2V5d29yZHMvYXJyYXkta2V5d29yZHNcIjtcclxuaW1wb3J0IHsgTnVtYmVyS2V5d29yZHMgfSBmcm9tIFwiLi9rZXl3b3Jkcy9udW1iZXIta2V5d29yZHNcIjtcclxuaW1wb3J0IHsgT2JqZWN0S2V5d29yZHMgfSBmcm9tIFwiLi9rZXl3b3Jkcy9vYmplY3Qta2V5d29yZHNcIjtcclxuaW1wb3J0IHsgT3RoZXJLZXl3b3JkcyB9IGZyb20gXCIuL2tleXdvcmRzL290aGVyLWtleXdvcmRzXCI7XHJcbmltcG9ydCB7IFN0cmluZ0tleXdvcmRzIH0gZnJvbSBcIi4va2V5d29yZHMvc3RyaW5nLWtleXdvcmRzXCI7XHJcbmltcG9ydCB7IFZhbGlkYXRvckZ1bmN0aW9uIH0gZnJvbSBcIi4vaW5kZXhcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBrZXl3b3JkczogUmVjb3JkPHN0cmluZywgVmFsaWRhdG9yRnVuY3Rpb24+ID0ge1xyXG4gIC4uLk9iamVjdEtleXdvcmRzLFxyXG4gIC4uLkFycmF5S2V5d29yZHMsXHJcbiAgLi4uU3RyaW5nS2V5d29yZHMsXHJcbiAgLi4uTnVtYmVyS2V5d29yZHMsXHJcbiAgLi4uT3RoZXJLZXl3b3Jkc1xyXG59O1xyXG4iLCJpbXBvcnQgeyBDb21waWxlZFNjaGVtYSwgVmFsaWRhdG9yRnVuY3Rpb24gfSBmcm9tICcuLi9pbmRleCc7XHJcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvciwgaXNPYmplY3QgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgT2JqZWN0S2V5d29yZHM6IFJlY29yZDxzdHJpbmcsIFZhbGlkYXRvckZ1bmN0aW9uPiA9IHtcclxuICAvLyBPYmplY3RcclxuICByZXF1aXJlZChzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogdHJ1ZSxcclxuICAgICAgICBlcnJvcnM6IFtdLFxyXG4gICAgICAgIGRhdGEsXHJcbiAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5yZXF1aXJlZC5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBrZXkgPSBzY2hlbWEucmVxdWlyZWRbaV07XHJcbiAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgZXJyb3JzLnB1c2goXHJcbiAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIHByb3BlcnR5Jywge1xyXG4gICAgICAgICAgICBwb2ludGVyOiBgJHtwb2ludGVyfS8ke2tleX1gLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ01JU1NJTkdfUkVRVUlSRURfUFJPUEVSVFknLFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgdmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsIGVycm9ycywgZGF0YSB9O1xyXG4gIH0sXHJcblxyXG4gIHByb3BlcnRpZXMoc2NoZW1hLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSkge1xyXG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xyXG4gICAgbGV0IGZpbmFsRGF0YSA9IHsgLi4uZGF0YSB9O1xyXG4gICAgZm9yIChsZXQga2V5IGluIHNjaGVtYS5wcm9wZXJ0aWVzKSB7XHJcbiAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpIHx8IHR5cGVvZiBkYXRhW2tleV0gPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0pICYmICdkZWZhdWx0JyBpbiBzY2hlbWEucHJvcGVydGllc1trZXldKSB7XHJcbiAgICAgICAgICBmaW5hbERhdGFba2V5XSA9IHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0uZGVmYXVsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIHNjaGVtYS5wcm9wZXJ0aWVzW2tleV0gPT09ICdib29sZWFuJykge1xyXG4gICAgICAgIGlmIChzY2hlbWEucHJvcGVydGllc1trZXldID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgZXJyb3JzLnB1c2goXHJcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ1Byb3BlcnR5IGlzIG5vdCBhbGxvd2VkJywge1xyXG4gICAgICAgICAgICAgIHBvaW50ZXI6IGAke3BvaW50ZXJ9LyR7a2V5fWAsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGFba2V5XSxcclxuICAgICAgICAgICAgICBjb2RlOiAnUFJPUEVSVFlfTk9UX0FMTE9XRUQnLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgdmFsaWRhdG9yIH0gPSBzY2hlbWEucHJvcGVydGllc1trZXldIGFzIENvbXBpbGVkU2NoZW1hO1xyXG4gICAgICBpZiAoIXZhbGlkYXRvcikge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hLnByb3BlcnRpZXNba2V5XSwgZmluYWxEYXRhW2tleV0sIGAke3BvaW50ZXJ9LyR7a2V5fWAsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuXHJcbiAgICAgIGZpbmFsRGF0YVtrZXldID0gdmFsaWRhdG9yUmVzdWx0LmRhdGE7XHJcblxyXG4gICAgICBpZiAoIXZhbGlkYXRvclJlc3VsdC52YWxpZCkge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKC4uLnZhbGlkYXRvclJlc3VsdC5lcnJvcnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgdmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsIGVycm9ycywgZGF0YTogZmluYWxEYXRhIH07XHJcbiAgfSxcclxuXHJcbiAgbWF4UHJvcGVydGllcyhzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkgfHwgT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoIDw9IHNjaGVtYS5tYXhQcm9wZXJ0aWVzKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICBlcnJvcnM6IFtcclxuICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdPYmplY3QgaGFzIHRvbyBtYW55IHByb3BlcnRpZXMnLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnT0JKRUNUX1RPT19NQU5ZX1BST1BFUlRJRVMnLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBtaW5Qcm9wZXJ0aWVzKHNjaGVtYSwgZGF0YSwgcG9pbnRlcikge1xyXG4gICAgaWYgKCFpc09iamVjdChkYXRhKSB8fCBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPj0gc2NoZW1hLm1pblByb3BlcnRpZXMpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ09iamVjdCBoYXMgdG9vIGZldyBwcm9wZXJ0aWVzJywge1xyXG4gICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgY29kZTogJ09CSkVDVF9UT09fRkVXX1BST1BFUlRJRVMnLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBhZGRpdGlvbmFsUHJvcGVydGllcyhzY2hlbWEsIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKSB7XHJcbiAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gW107XHJcbiAgICBsZXQgZmluYWxEYXRhID0geyAuLi5kYXRhIH07XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XHJcbiAgICAgIGlmIChzY2hlbWEucHJvcGVydGllcyAmJiBzY2hlbWEucHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzY2hlbWEucGF0dGVyblByb3BlcnRpZXMpIHtcclxuICAgICAgICBsZXQgbWF0Y2ggPSBmYWxzZTtcclxuICAgICAgICBmb3IgKGNvbnN0IHBhdHRlcm4gaW4gc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICBpZiAobmV3IFJlZ0V4cChwYXR0ZXJuLCAndScpLnRlc3Qoa2V5KSkge1xyXG4gICAgICAgICAgICBtYXRjaCA9IHRydWU7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWF0Y2gpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNjaGVtYS5hZGRpdGlvbmFsUHJvcGVydGllcyA9PT0gZmFsc2UpIHtcclxuICAgICAgICBlcnJvcnMucHVzaChcclxuICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0FkZGl0aW9uYWwgcHJvcGVydHkgbm90IGFsbG93ZWQnLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXI6IGAke3BvaW50ZXJ9LyR7a2V5fWAsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICBjb2RlOiAnQURESVRJT05BTF9QUk9QRVJUWV9OT1RfQUxMT1dFRCcsXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHsgdmFsaWRhdG9yIH0gPSBzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgIGlmICghdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHZhbGlkYXRvclJlc3VsdCA9IHZhbGlkYXRvcihzY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMsIGZpbmFsRGF0YVtrZXldLCBgJHtwb2ludGVyfS8ke2tleX1gLCBzY2hlbWFTaGllbGRJbnN0YW5jZSk7XHJcblxyXG4gICAgICBmaW5hbERhdGFba2V5XSA9IHZhbGlkYXRvclJlc3VsdC5kYXRhO1xyXG5cclxuICAgICAgaWYgKCF2YWxpZGF0b3JSZXN1bHQudmFsaWQpIHtcclxuICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLCBlcnJvcnMsIGRhdGE6IGZpbmFsRGF0YSB9O1xyXG4gIH0sXHJcblxyXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgIGxldCBmaW5hbERhdGEgPSB7IC4uLmRhdGEgfTtcclxuICAgIGNvbnN0IHBhdHRlcm5zID0gT2JqZWN0LmtleXMoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzKTtcclxuICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xyXG4gICAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAocGF0dGVybiwgJ3UnKTtcclxuXHJcbiAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBpZiAoc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZmluYWxEYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgICAgICBlcnJvcnMucHVzaChcclxuICAgICAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ1Byb3BlcnR5IGlzIG5vdCBhbGxvd2VkJywge1xyXG4gICAgICAgICAgICAgICAgICBwb2ludGVyOiBgJHtwb2ludGVyfS8ke2tleX1gLFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YVtrZXldLFxyXG4gICAgICAgICAgICAgICAgICBjb2RlOiAnUFJPUEVSVFlfTk9UX0FMTE9XRUQnLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCB7IHZhbGlkYXRvciB9ID0gc2NoZW1hLnBhdHRlcm5Qcm9wZXJ0aWVzW3BhdHRlcm5dIGFzIENvbXBpbGVkU2NoZW1hO1xyXG4gICAgICBpZiAoIXZhbGlkYXRvcikge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoZmluYWxEYXRhKTtcclxuICAgICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xyXG4gICAgICAgIGlmIChyZWdleC50ZXN0KGtleSkpIHtcclxuICAgICAgICAgIGNvbnN0IHZhbGlkYXRvclJlc3VsdCA9IHZhbGlkYXRvcihzY2hlbWEucGF0dGVyblByb3BlcnRpZXNbcGF0dGVybl0sIGZpbmFsRGF0YVtrZXldLCBgJHtwb2ludGVyfS8ke2tleX1gLCBzY2hlbWFTaGllbGRJbnN0YW5jZSk7XHJcblxyXG4gICAgICAgICAgZmluYWxEYXRhW2tleV0gPSB2YWxpZGF0b3JSZXN1bHQuZGF0YTtcclxuXHJcbiAgICAgICAgICBpZiAoIXZhbGlkYXRvclJlc3VsdC52YWxpZCkge1xyXG4gICAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCwgZXJyb3JzLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICB9LFxyXG5cclxuICBwcm9wZXJ0eU5hbWVzKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIHNjaGVtYS5wcm9wZXJ0eU5hbWVzID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgaWYgKHNjaGVtYS5wcm9wZXJ0eU5hbWVzID09PSBmYWxzZSAmJiBPYmplY3Qua2V5cyhkYXRhKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yczogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdQcm9wZXJ0eSBuYW1lcyBhcmUgbm90IGFsbG93ZWQnLCB7XHJcbiAgICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICBjb2RlOiAnUFJPUEVSVFlfTkFNRVNfTk9UX0FMTE9XRUQnLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgICAgICBkYXRhLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgIGxldCBmaW5hbERhdGEgPSB7IC4uLmRhdGEgfTtcclxuICAgIGNvbnN0IHsgdmFsaWRhdG9yIH0gPSBzY2hlbWEucHJvcGVydHlOYW1lcyBhcyBDb21waWxlZFNjaGVtYTtcclxuICAgIGlmICghdmFsaWRhdG9yKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQga2V5IGluIGZpbmFsRGF0YSkge1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hLnByb3BlcnR5TmFtZXMsIGtleSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG5cclxuICAgICAgaWYgKCF2YWxpZGF0b3JSZXN1bHQudmFsaWQpIHtcclxuICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLCBlcnJvcnMsIGRhdGE6IGZpbmFsRGF0YSB9O1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IENvbXBpbGVkU2NoZW1hLCBWYWxpZGF0b3JGdW5jdGlvbiB9IGZyb20gJy4uL2luZGV4JztcclxuaW1wb3J0IHsgVmFsaWRhdGlvbkVycm9yLCBpc09iamVjdCB9IGZyb20gJy4uL3V0aWxzJztcclxuXHJcbmV4cG9ydCBjb25zdCBBcnJheUtleXdvcmRzOiBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0b3JGdW5jdGlvbj4gPSB7XHJcbiAgaXRlbXMoc2NoZW1hLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXJyb3JzID0gW107XHJcbiAgICBjb25zdCBmaW5hbERhdGEgPSBbLi4uZGF0YV07XHJcbiAgICBjb25zdCBzY2hlbWFJdGVtcyA9IHNjaGVtYS5pdGVtcztcclxuICAgIGNvbnN0IHNjaGVtYUl0ZW1zTGVuZ3RoID0gQXJyYXkuaXNBcnJheShzY2hlbWFJdGVtcykgPyBzY2hlbWFJdGVtcy5sZW5ndGggOiAwO1xyXG4gICAgY29uc3QgZGF0YUxlbmd0aCA9IGRhdGEubGVuZ3RoO1xyXG5cclxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYUl0ZW1zKSkge1xyXG4gICAgICBjb25zdCBpdGVtc0xlbmd0aCA9IE1hdGgubWluKHNjaGVtYUl0ZW1zTGVuZ3RoLCBkYXRhTGVuZ3RoKTtcclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtc0xlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFJdGVtc1tpXSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICBpZiAoc2NoZW1hSXRlbXNbaV0gPT09IGZhbHNlICYmIHR5cGVvZiBkYXRhW2ldICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBlcnJvcnMucHVzaChcclxuICAgICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdBcnJheSBpdGVtIGlzIG5vdCBhbGxvd2VkJywge1xyXG4gICAgICAgICAgICAgICAgcG9pbnRlcjogYCR7cG9pbnRlcn0vJHtpfWAsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YVtpXSxcclxuICAgICAgICAgICAgICAgIGNvZGU6ICdBUlJBWV9JVEVNX05PVF9BTExPV0VEJyxcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB7IHZhbGlkYXRvciB9ID0gc2NoZW1hSXRlbXNbaV0gYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0b3IpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hSXRlbXNbaV0sIGZpbmFsRGF0YVtpXSwgYCR7cG9pbnRlcn0vJHtpfWAsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgZmluYWxEYXRhW2ldID0gdmFsaWRhdG9yUmVzdWx0LmRhdGE7XHJcblxyXG4gICAgICAgIGlmICghdmFsaWRhdG9yUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHNjaGVtYUl0ZW1zID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgaWYgKHNjaGVtYUl0ZW1zID09PSBmYWxzZSAmJiBkYXRhTGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGVycm9ycy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignQXJyYXkgaXMgbm90IGFsbG93ZWQnLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICBjb2RlOiAnQVJSQVlfTk9UX0FMTE9XRUQnLFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCB7IHZhbGlkYXRvciB9ID0gc2NoZW1hSXRlbXMgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgIGlmICghdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgICAgfVxyXG5cclxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhTGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB2YWxpZGF0b3JFcnJvcnMgPSB2YWxpZGF0b3Ioc2NoZW1hSXRlbXMsIGZpbmFsRGF0YVtpXSwgYCR7cG9pbnRlcn0vJHtpfWAsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuXHJcbiAgICAgICAgZmluYWxEYXRhW2ldID0gdmFsaWRhdG9yRXJyb3JzLmRhdGE7XHJcblxyXG4gICAgICAgIGlmICghdmFsaWRhdG9yRXJyb3JzLnZhbGlkKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JFcnJvcnMuZXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCwgZXJyb3JzLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICB9LFxyXG5cclxuICBtaW5JdGVtcyhzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCBkYXRhLmxlbmd0aCA+PSBzY2hlbWEubWluSXRlbXMpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0FycmF5IGlzIHRvbyBzaG9ydCcsIHtcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgIGNvZGU6ICdBUlJBWV9UT09fU0hPUlQnLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBtYXhJdGVtcyhzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCBkYXRhLmxlbmd0aCA8PSBzY2hlbWEubWF4SXRlbXMpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ0FycmF5IGlzIHRvbyBsb25nJywge1xyXG4gICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgY29kZTogJ0FSUkFZX1RPT19MT05HJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgYWRkaXRpb25hbEl0ZW1zKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAhc2NoZW1hLml0ZW1zIHx8ICFBcnJheS5pc0FycmF5KHNjaGVtYS5pdGVtcykpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gZmFsc2UpIHtcclxuICAgICAgaWYgKGRhdGEubGVuZ3RoID4gc2NoZW1hLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignQXJyYXkgaGFzIHRvbyBtYW55IGl0ZW1zJywge1xyXG4gICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgY29kZTogJ0FSUkFZX1RPT19NQU5ZX0lURU1TJyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xyXG4gICAgbGV0IGZpbmFsRGF0YSA9IFsuLi5kYXRhXTtcclxuICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgZm9yIChsZXQgaSA9IHNjaGVtYS5pdGVtcy5sZW5ndGg7IGkgPCBmaW5hbERhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjb25zdCB7IHZhbGlkYXRvciB9ID0gc2NoZW1hLmFkZGl0aW9uYWxJdGVtcyBhcyBDb21waWxlZFNjaGVtYTtcclxuICAgICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hLmFkZGl0aW9uYWxJdGVtcywgZmluYWxEYXRhW2ldLCBgJHtwb2ludGVyfS8ke2l9YCwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgICAgIGlmICghdmFsaWRhdG9yUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxEYXRhW2ldID0gdmFsaWRhdG9yUmVzdWx0LmRhdGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCwgZXJyb3JzLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICB9LFxyXG5cclxuICB1bmlxdWVJdGVtcyhzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShkYXRhKSB8fCAhc2NoZW1hLnVuaXF1ZUl0ZW1zKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdW5pcXVlID0gbmV3IE1hcCgpO1xyXG5cclxuICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhKSB7XHJcbiAgICAgIGxldCBpdGVtU3RyO1xyXG5cclxuICAgICAgLy8gQ2hhbmdlIHN0cmluZyB0byBcInN0cmluZ1wiIHRvIGF2b2lkIGZhbHNlIHBvc2l0aXZlc1xyXG4gICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaXRlbVN0ciA9IGBcIiR7aXRlbX1cImA7XHJcblxyXG4gICAgICAgIC8vIFNvcnQgb2JqZWN0IGtleXMgdG8gYXZvaWQgZmFsc2UgcG9zaXRpdmVzXHJcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QoaXRlbSkpIHtcclxuICAgICAgICBjb25zdCBzb3J0ZWQgPSBPYmplY3QuZnJvbUVudHJpZXMoT2JqZWN0LmVudHJpZXMoaXRlbSkuc29ydCgoW2FdLCBbYl0pID0+IGEubG9jYWxlQ29tcGFyZShiKSkpO1xyXG4gICAgICAgIGl0ZW1TdHIgPSBKU09OLnN0cmluZ2lmeShzb3J0ZWQpO1xyXG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaXRlbSkpIHtcclxuICAgICAgICBpdGVtU3RyID0gSlNPTi5zdHJpbmdpZnkoaXRlbSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaXRlbVN0ciA9IGl0ZW07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh1bmlxdWUuaGFzKGl0ZW1TdHIpKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICAgIGVycm9yczogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdBcnJheSBpdGVtcyBhcmUgbm90IHVuaXF1ZScsIHtcclxuICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgIGNvZGU6ICdBUlJBWV9JVEVNU19OT1RfVU5JUVVFJyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVuaXF1ZS5zZXQoaXRlbVN0ciwgdHJ1ZSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFZhbGlkYXRpb25FcnJvciwgZGVlcEVxdWFsIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5cclxuaW1wb3J0IHsgVmFsaWRhdG9yRnVuY3Rpb24gfSBmcm9tICcuLi9pbmRleCc7XHJcblxyXG5leHBvcnQgY29uc3QgU3RyaW5nS2V5d29yZHM6IFJlY29yZDxzdHJpbmcsIFZhbGlkYXRvckZ1bmN0aW9uPiA9IHtcclxuICBtaW5MZW5ndGgoc2NoZW1hLCBkYXRhLCBwb2ludGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnIHx8IGRhdGEubGVuZ3RoID49IHNjaGVtYS5taW5MZW5ndGgpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ1N0cmluZyBpcyB0b28gc2hvcnQnLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnU1RSSU5HX1RPT19TSE9SVCcsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIG1heExlbmd0aChzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ3N0cmluZycgfHwgZGF0YS5sZW5ndGggPD0gc2NoZW1hLm1heExlbmd0aCkge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignU3RyaW5nIGlzIHRvbyBsb25nJywge1xyXG4gICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgY29kZTogJ1NUUklOR19UT09fTE9ORycsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIHBhdHRlcm4oc2NoZW1hLCBkYXRhLCBwb2ludGVyKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcGF0dGVyblJlZ2V4cCA9IG5ldyBSZWdFeHAoc2NoZW1hLnBhdHRlcm4sICd1Jyk7XHJcblxyXG4gICAgaWYgKHBhdHRlcm5SZWdleHAgaW5zdGFuY2VvZiBSZWdFeHAgPT09IGZhbHNlKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yczogW1xyXG4gICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignUGF0dGVybiBpcyBub3QgYSB2YWxpZCByZWd1bGFyIGV4cHJlc3Npb24nLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICBjb2RlOiAnUEFUVEVSTl9JU19OT1RfUkVHRVhQJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWxpZCA9IHBhdHRlcm5SZWdleHAudGVzdChkYXRhKTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZCxcclxuICAgICAgZXJyb3JzOiB2YWxpZFxyXG4gICAgICAgID8gW11cclxuICAgICAgICA6IFtcclxuICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignU3RyaW5nIGRvZXMgbm90IG1hdGNoIHBhdHRlcm4nLCB7XHJcbiAgICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICBjb2RlOiAnU1RSSU5HX0RPRVNfTk9UX01BVENIX1BBVFRFUk4nLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIGZvcm1hdChzY2hlbWEsIGRhdGEsIHBvaW50ZXIsIGZvcm1hdEluc3RhbmNlKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZm9ybWF0VmFsaWRhdGUgPSBmb3JtYXRJbnN0YW5jZS5mb3JtYXRzLmdldChzY2hlbWEuZm9ybWF0KTtcclxuICAgIGlmICghZm9ybWF0VmFsaWRhdGUpIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKGBVbmtub3duIGZvcm1hdCAke3NjaGVtYS5mb3JtYXR9YCwge1xyXG4gICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ1VOS05PV05fRk9STUFUJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWxpZCA9IGZvcm1hdFZhbGlkYXRlKGRhdGEpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkLFxyXG4gICAgICBlcnJvcnM6IHZhbGlkXHJcbiAgICAgICAgPyBbXVxyXG4gICAgICAgIDogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKGBTdHJpbmcgZG9lcyBub3QgbWF0Y2ggZm9ybWF0ICR7c2NoZW1hLmZvcm1hdH1gLCB7XHJcbiAgICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICBjb2RlOiAnU1RSSU5HX0RPRVNfTk9UX01BVENIX0ZPUk1BVCcsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgZW51bShzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIC8vIENoZWNrIGlmIGRhdGEgaXMgYW4gYXJyYXkgb3IgYW4gb2JqZWN0XHJcbiAgICBjb25zdCBpc0FycmF5ID0gQXJyYXkuaXNBcnJheShkYXRhKTtcclxuICAgIGNvbnN0IGlzT2JqZWN0ID0gdHlwZW9mIGRhdGEgPT09ICdvYmplY3QnICYmIGRhdGEgIT09IG51bGw7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEuZW51bS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBlbnVtSXRlbSA9IHNjaGVtYS5lbnVtW2ldO1xyXG5cclxuICAgICAgLy8gU2ltcGxlIGVxdWFsaXR5IGNoZWNrXHJcbiAgICAgIGlmIChlbnVtSXRlbSA9PT0gZGF0YSkge1xyXG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIElmIGRhdGEgaXMgYW4gYXJyYXkgb3IgYW4gb2JqZWN0LCBjaGVjayBmb3IgZGVlcCBlcXVhbGl0eVxyXG4gICAgICBpZiAoKGlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheShlbnVtSXRlbSkpIHx8IChpc09iamVjdCAmJiB0eXBlb2YgZW51bUl0ZW0gPT09ICdvYmplY3QnICYmIGVudW1JdGVtICE9PSBudWxsKSkge1xyXG4gICAgICAgIGlmIChkZWVwRXF1YWwoZW51bUl0ZW0sIGRhdGEpKSB7XHJcbiAgICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgbXVzdCBiZSBvbmUgb2YgJHtzY2hlbWEuZW51bS5qb2luKCcsICcpfWAsIHtcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgIGNvZGU6ICdWQUxVRV9OT1RfSU5fRU5VTScsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IGFyZUNsb3NlRW5vdWdoLCBWYWxpZGF0aW9uRXJyb3IgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IFZhbGlkYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5cclxuZXhwb3J0IGNvbnN0IE51bWJlcktleXdvcmRzOiBSZWNvcmQ8c3RyaW5nLCBWYWxpZGF0b3JGdW5jdGlvbj4gPSB7XHJcbiAgbWluaW11bShzY2hlbWEsIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdudW1iZXInKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1pbiA9IHNjaGVtYS5taW5pbXVtO1xyXG4gICAgaWYgKHR5cGVvZiBzY2hlbWEuZXhjbHVzaXZlTWluaW11bSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbWluID0gc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gKyAxZS0xNTtcclxuICAgIH0gZWxzZSBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gPT09IHRydWUpIHtcclxuICAgICAgbWluICs9IDFlLTE1O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbGlkID0gZGF0YSA+PSBtaW47XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQsXHJcbiAgICAgIGVycm9yczogdmFsaWRcclxuICAgICAgICA/IFtdXHJcbiAgICAgICAgOiBbXHJcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ051bWJlciBpcyB0b28gc21hbGwnLCB7XHJcbiAgICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICBjb2RlOiAnTlVNQkVSX1RPT19TTUFMTCcsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgbWF4aW11bShzY2hlbWEsIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKSB7XHJcbiAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdudW1iZXInKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1heCA9IHNjaGVtYS5tYXhpbXVtO1xyXG4gICAgaWYgKHR5cGVvZiBzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgbWF4ID0gc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gLSAxZS0xNTtcclxuICAgIH0gZWxzZSBpZiAoc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gPT09IHRydWUpIHtcclxuICAgICAgbWF4IC09IDFlLTE1O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHZhbGlkID0gZGF0YSA8PSBtYXg7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQsXHJcbiAgICAgIGVycm9yczogdmFsaWRcclxuICAgICAgICA/IFtdXHJcbiAgICAgICAgOiBbXHJcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoJ051bWJlciBpcyB0b28gYmlnJywge1xyXG4gICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgY29kZTogJ05VTUJFUl9UT09fQklHJyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBtdWx0aXBsZU9mKHNjaGVtYSwgZGF0YSwgcG9pbnRlcikge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnbnVtYmVyJykge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHF1b3RpZW50ID0gZGF0YSAvIHNjaGVtYS5tdWx0aXBsZU9mO1xyXG5cclxuICAgIC8vIERldGVjdCBvdmVyZmxvdyBoYW5kbGluZyBpbiBKU1xyXG4gICAgaWYgKCFpc0Zpbml0ZShxdW90aWVudCkpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBhcmVNdWx0aXBsZXMgPSBhcmVDbG9zZUVub3VnaChxdW90aWVudCwgTWF0aC5yb3VuZChxdW90aWVudCkpO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBhcmVNdWx0aXBsZXMsXHJcbiAgICAgIGVycm9yczogYXJlTXVsdGlwbGVzXHJcbiAgICAgICAgPyBbXVxyXG4gICAgICAgIDogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdOdW1iZXIgaXMgbm90IGEgbXVsdGlwbGUgb2YnLCB7XHJcbiAgICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICBjb2RlOiAnTlVNQkVSX05PVF9NVUxUSVBMRV9PRicsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgZXhjbHVzaXZlTWluaW11bShzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gJ251bWJlcicgfHwgdHlwZW9mIHNjaGVtYS5leGNsdXNpdmVNaW5pbXVtICE9PSAnbnVtYmVyJyB8fCAnbWluaW11bScgaW4gc2NoZW1hKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdmFsaWQgPSBkYXRhID4gc2NoZW1hLmV4Y2x1c2l2ZU1pbmltdW0gKyAxZS0xNTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZCxcclxuICAgICAgZXJyb3JzOiB2YWxpZFxyXG4gICAgICAgID8gW11cclxuICAgICAgICA6IFtcclxuICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignTnVtYmVyIGlzIHRvbyBzbWFsbCcsIHtcclxuICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgIGNvZGU6ICdOVU1CRVJfVE9PX1NNQUxMJyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBleGNsdXNpdmVNYXhpbXVtKHNjaGVtYSwgZGF0YSwgcG9pbnRlcikge1xyXG4gICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnbnVtYmVyJyB8fCB0eXBlb2Ygc2NoZW1hLmV4Y2x1c2l2ZU1heGltdW0gIT09ICdudW1iZXInIHx8ICdtYXhpbXVtJyBpbiBzY2hlbWEpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWxpZCA9IGRhdGEgPCBzY2hlbWEuZXhjbHVzaXZlTWF4aW11bSAtIDFlLTE1O1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkLFxyXG4gICAgICBlcnJvcnM6IHZhbGlkXHJcbiAgICAgICAgPyBbXVxyXG4gICAgICAgIDogW1xyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdOdW1iZXIgaXMgdG9vIGJpZycsIHtcclxuICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICAgIGNvZGU6ICdOVU1CRVJfVE9PX0JJRycsXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgQ29tcGlsZWRTY2hlbWEsIFZhbGlkYXRvckZ1bmN0aW9uIH0gZnJvbSAnLi4vaW5kZXgnO1xyXG5pbXBvcnQgeyBWYWxpZGF0aW9uRXJyb3IsIGlzT2JqZWN0LCBkZWVwRXF1YWwgfSBmcm9tICcuLi91dGlscyc7XHJcblxyXG5leHBvcnQgY29uc3QgT3RoZXJLZXl3b3JkczogUmVjb3JkPHN0cmluZywgVmFsaWRhdG9yRnVuY3Rpb24+ID0ge1xyXG4gIG51bGxhYmxlKHNjaGVtYSwgZGF0YSwgcG9pbnRlcikge1xyXG4gICAgaWYgKHNjaGVtYS5udWxsYWJsZSAmJiBkYXRhICE9PSBudWxsKSB7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgIGVycm9yczogW1xyXG4gICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcignVmFsdWUgbXVzdCBiZSBudWxsIHRvIGJlIGVtcHR5Jywge1xyXG4gICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ1ZBTFVFX05PVF9OVUxMJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gIH0sXHJcblxyXG4gIGFsbE9mKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xyXG4gICAgbGV0IGZpbmFsRGF0YSA9IGRhdGE7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNjaGVtYS5hbGxPZi5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaXNPYmplY3Qoc2NoZW1hLmFsbE9mW2ldKSkge1xyXG4gICAgICAgIGNvbnN0IHsgdmFsaWRhdG9yIH0gPSBzY2hlbWEuYWxsT2ZbaV0gYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgICAgaWYgKCF2YWxpZGF0b3IpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yUmVzdWx0ID0gdmFsaWRhdG9yKHNjaGVtYS5hbGxPZltpXSwgZmluYWxEYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSk7XHJcblxyXG4gICAgICAgIGlmICghdmFsaWRhdG9yUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbmFsRGF0YSA9IHZhbGlkYXRvclJlc3VsdC5kYXRhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLmFsbE9mW2ldID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgIGlmIChCb29sZWFuKGRhdGEpICE9PSBzY2hlbWEuYWxsT2ZbaV0pIHtcclxuICAgICAgICAgICAgZXJyb3JzLnB1c2goXHJcbiAgICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgbXVzdCBtYXRjaCBhbGwgc2NoZW1hcyBpbiBhbGxPZmAsIHtcclxuICAgICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvZGU6ICdWQUxVRV9ET0VTX05PVF9NQVRDSF9BTExfT0YnLFxyXG4gICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhICE9PSBzY2hlbWEuYWxsT2ZbaV0pIHtcclxuICAgICAgICAgIGVycm9ycy5wdXNoKFxyXG4gICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKGBWYWx1ZSBtdXN0IG1hdGNoIGFsbCBzY2hlbWFzIGluIGFsbE9mYCwge1xyXG4gICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0RPRVNfTk9UX01BVENIX0FMTF9PRicsXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7IHZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLCBlcnJvcnMsIGRhdGE6IGZpbmFsRGF0YSB9O1xyXG4gIH0sXHJcblxyXG4gIGFueU9mKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGxldCBmaW5hbERhdGEgPSBkYXRhO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hLmFueU9mLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChpc09iamVjdChzY2hlbWEuYW55T2ZbaV0pKSB7XHJcbiAgICAgICAgY29uc3QgeyB2YWxpZGF0b3IgfSA9IHNjaGVtYS5hbnlPZltpXSBhcyBDb21waWxlZFNjaGVtYTtcclxuICAgICAgICBpZiAoIXZhbGlkYXRvcikge1xyXG4gICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHZhbGlkYXRvcihzY2hlbWEuYW55T2ZbaV0sIGZpbmFsRGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgICAgIGZpbmFsRGF0YSA9IHZhbGlkYXRpb25SZXN1bHQuZGF0YTtcclxuICAgICAgICBpZiAodmFsaWRhdGlvblJlc3VsdC52YWxpZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGE6IGZpbmFsRGF0YSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYS5hbnlPZltpXSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICBpZiAoQm9vbGVhbihkYXRhKSA9PT0gc2NoZW1hLmFueU9mW2ldKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhID09PSBzY2hlbWEuYW55T2ZbaV0pIHtcclxuICAgICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3QgbWF0Y2ggYXQgbGVhc3Qgb25lIHNjaGVtYSBpbiBhbnlPZmAsIHtcclxuICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgIGNvZGU6ICdWQUxVRV9ET0VTX05PVF9NQVRDSF9BTllfT0YnLFxyXG4gICAgICAgIH0pLFxyXG4gICAgICBdLFxyXG4gICAgICBkYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBvbmVPZihzY2hlbWEsIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKSB7XHJcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgIGxldCB2YWxpZENvdW50ID0gMDtcclxuICAgIGxldCBmaW5hbERhdGEgPSBkYXRhO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzY2hlbWEub25lT2YubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGlzT2JqZWN0KHNjaGVtYS5vbmVPZltpXSkpIHtcclxuICAgICAgICBjb25zdCB7IHZhbGlkYXRvciB9ID0gc2NoZW1hLm9uZU9mW2ldIGFzIENvbXBpbGVkU2NoZW1hO1xyXG4gICAgICAgIGlmICghdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgICB2YWxpZENvdW50Kys7XHJcbiAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvblJlc3VsdCA9IHZhbGlkYXRvcihzY2hlbWEub25lT2ZbaV0sIGZpbmFsRGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgICAgIGlmICh2YWxpZGF0aW9uUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICB2YWxpZENvdW50Kys7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGVycm9ycy5wdXNoKC4uLnZhbGlkYXRpb25SZXN1bHQuZXJyb3JzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxEYXRhID0gdmFsaWRhdGlvblJlc3VsdC5kYXRhO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hLm9uZU9mW2ldID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgIGlmIChCb29sZWFuKGRhdGEpID09PSBzY2hlbWEub25lT2ZbaV0pIHtcclxuICAgICAgICAgICAgdmFsaWRDb3VudCsrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGF0YSA9PT0gc2NoZW1hLm9uZU9mW2ldKSB7XHJcbiAgICAgICAgICB2YWxpZENvdW50Kys7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHZhbGlkQ291bnQgPT09IDEpIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGE6IGZpbmFsRGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgbXVzdCBtYXRjaCBleGFjdGx5IG9uZSBzY2hlbWEgaW4gb25lT2ZgLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnVkFMVUVfRE9FU19OT1RfTUFUQ0hfT05FX09GJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YTogZmluYWxEYXRhLFxyXG4gICAgfTtcclxuICB9LFxyXG5cclxuICBkZXBlbmRlbmNpZXMoc2NoZW1hLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSkge1xyXG4gICAgaWYgKCFpc09iamVjdChkYXRhKSkge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVycm9ycyA9IFtdO1xyXG4gICAgbGV0IGZpbmFsRGF0YSA9IGRhdGE7XHJcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEuZGVwZW5kZW5jaWVzKSB7XHJcbiAgICAgIGlmIChrZXkgaW4gZGF0YSA9PT0gZmFsc2UpIHtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZGVwZW5kZW5jeSA9IHNjaGVtYS5kZXBlbmRlbmNpZXNba2V5XTtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZGVwZW5kZW5jeSkpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcGVuZGVuY3kubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgIGlmICghKGRlcGVuZGVuY3lbaV0gaW4gZGF0YSkpIHtcclxuICAgICAgICAgICAgZXJyb3JzLnB1c2goXHJcbiAgICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgRGVwZW5kZW5jeSAke2RlcGVuZGVuY3lbaV19IGlzIG1pc3NpbmdgLCB7XHJcbiAgICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICBjb2RlOiAnREVQRU5ERU5DWV9NSVNTSU5HJyxcclxuICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHR5cGVvZiBkZXBlbmRlbmN5ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICBpZiAoZGVwZW5kZW5jeSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVycm9ycy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgRGVwZW5kZW5jeSAke2tleX0gaXMgbWlzc2luZ2AsIHtcclxuICAgICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgIGNvZGU6ICdERVBFTkRFTkNZX01JU1NJTkcnLFxyXG4gICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGRlcGVuZGVuY3kgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgaWYgKGRlcGVuZGVuY3kgaW4gZGF0YSkge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVycm9ycy5wdXNoKFxyXG4gICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgRGVwZW5kZW5jeSAke2RlcGVuZGVuY3l9IGlzIG1pc3NpbmdgLCB7XHJcbiAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgICBjb2RlOiAnREVQRU5ERU5DWV9NSVNTSU5HJyxcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgeyB2YWxpZGF0b3IgfSA9IGRlcGVuZGVuY3kgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgIGlmICghdmFsaWRhdG9yKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHZhbGlkYXRvclJlc3VsdCA9IHZhbGlkYXRvcihkZXBlbmRlbmN5LCBmaW5hbERhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuICAgICAgaWYgKCF2YWxpZGF0b3JSZXN1bHQudmFsaWQpIHtcclxuICAgICAgICBlcnJvcnMucHVzaCguLi52YWxpZGF0b3JSZXN1bHQuZXJyb3JzKTtcclxuICAgICAgfVxyXG4gICAgICBmaW5hbERhdGEgPSB2YWxpZGF0b3JSZXN1bHQuZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogZXJyb3JzLmxlbmd0aCA9PT0gMCwgZXJyb3JzLCBkYXRhOiBmaW5hbERhdGEgfTtcclxuICB9LFxyXG5cclxuICBjb25zdChzY2hlbWEsIGRhdGEsIHBvaW50ZXIpIHtcclxuICAgIGlmIChcclxuICAgICAgZGF0YSA9PT0gc2NoZW1hLmNvbnN0IHx8XHJcbiAgICAgIChpc09iamVjdChkYXRhKSAmJiBpc09iamVjdChzY2hlbWEuY29uc3QpICYmIGRlZXBFcXVhbChkYXRhLCBzY2hlbWEuY29uc3QpKSB8fFxyXG4gICAgICAoQXJyYXkuaXNBcnJheShkYXRhKSAmJiBBcnJheS5pc0FycmF5KHNjaGVtYS5jb25zdCkgJiYgZGVlcEVxdWFsKGRhdGEsIHNjaGVtYS5jb25zdCkpXHJcbiAgICApIHtcclxuICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB2YWxpZDogZmFsc2UsXHJcbiAgICAgIGVycm9yczogW1xyXG4gICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3QgYmUgZXF1YWwgdG8gY29uc3RgLCB7XHJcbiAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICBjb2RlOiAnVkFMVUVfTk9UX0VRVUFMX1RPX0NPTlNUJyxcclxuICAgICAgICB9KSxcclxuICAgICAgXSxcclxuICAgICAgZGF0YSxcclxuICAgIH07XHJcbiAgfSxcclxuXHJcbiAgY29udGFpbnMoc2NoZW1hLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBzY2hlbWEuY29udGFpbnMgPT09ICdib29sZWFuJykge1xyXG4gICAgICBpZiAoc2NoZW1hLmNvbnRhaW5zKSB7XHJcbiAgICAgICAgY29uc3QgdmFsaWQgPSBkYXRhLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHZhbGlkLFxyXG4gICAgICAgICAgZXJyb3JzOiB2YWxpZFxyXG4gICAgICAgICAgICA/IFtdXHJcbiAgICAgICAgICAgIDogW1xyXG4gICAgICAgICAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBpdGVtYCwge1xyXG4gICAgICAgICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0RPRVNfTk9UX0NPTlRBSU5fSVRFTScsXHJcbiAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICBdLFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3Qgbm90IGNvbnRhaW4gYW55IGl0ZW1zYCwge1xyXG4gICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0NPTlRBSU5TX0lURU0nLFxyXG4gICAgICAgICAgfSksXHJcbiAgICAgICAgXSxcclxuICAgICAgICBkYXRhLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgdmFsaWRhdG9yIH0gPSBzY2hlbWEuY29udGFpbnMgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICBpZiAoIXZhbGlkYXRvcikge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hLmNvbnRhaW5zLCBkYXRhW2ldLCBgJHtwb2ludGVyfS8ke2l9YCwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgICBpZiAodmFsaWRhdG9yUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgbmV3IFZhbGlkYXRpb25FcnJvcihgVmFsdWUgbXVzdCBjb250YWluIGF0IGxlYXN0IG9uZSBpdGVtIHRoYXQgbWF0Y2hlcyB0aGUgY29udGFpbnMgc2NoZW1hYCwge1xyXG4gICAgICAgICAgcG9pbnRlcixcclxuICAgICAgICAgIHZhbHVlOiBkYXRhLFxyXG4gICAgICAgICAgY29kZTogJ1ZBTFVFX0RPRVNfTk9UX0NPTlRBSU5fTUFUQ0hJTkdfSVRFTScsXHJcbiAgICAgICAgfSksXHJcbiAgICAgIF0sXHJcbiAgICAgIGRhdGEsXHJcbiAgICB9O1xyXG4gIH0sXHJcblxyXG4gIGlmKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpIHtcclxuICAgIGlmICgndGhlbicgaW4gc2NoZW1hID09PSBmYWxzZSAmJiAnZWxzZScgaW4gc2NoZW1hID09PSBmYWxzZSkge1xyXG4gICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2Ygc2NoZW1hLmlmID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgaWYgKHNjaGVtYS5pZikge1xyXG4gICAgICAgIGlmIChzY2hlbWEudGhlbikge1xyXG4gICAgICAgICAgY29uc3QgeyB2YWxpZGF0b3I6IHRoZW5WYWxpZGF0b3IgfSA9IHNjaGVtYS50aGVuIGFzIENvbXBpbGVkU2NoZW1hO1xyXG4gICAgICAgICAgaWYgKHRoZW5WYWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgY29uc3QgdGhlblJlc3VsdCA9IHRoZW5WYWxpZGF0b3Ioc2NoZW1hLnRoZW4sIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuICAgICAgICAgICAgaWYgKCF0aGVuUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoZW5SZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAoc2NoZW1hLmVsc2UpIHtcclxuICAgICAgICBjb25zdCB7IHZhbGlkYXRvcjogZWxzZVZhbGlkYXRvciB9ID0gc2NoZW1hLmVsc2UgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgICAgaWYgKGVsc2VWYWxpZGF0b3IpIHtcclxuICAgICAgICAgIGNvbnN0IGVsc2VSZXN1bHQgPSBlbHNlVmFsaWRhdG9yKHNjaGVtYS5lbHNlLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSk7XHJcbiAgICAgICAgICBpZiAoIWVsc2VSZXN1bHQudmFsaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsc2VSZXN1bHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyB2YWxpZGF0b3I6IGlmVmFsaWRhdG9yIH0gPSBzY2hlbWEuaWYgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICBpZiAoIWlmVmFsaWRhdG9yKSB7XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgaWZSZXN1bHQgPSBpZlZhbGlkYXRvcihzY2hlbWEuaWYsIGRhdGEsIHBvaW50ZXIsIHNjaGVtYVNoaWVsZEluc3RhbmNlKTtcclxuICAgIGlmIChpZlJlc3VsdC52YWxpZCkge1xyXG4gICAgICBpZiAoc2NoZW1hLnRoZW4pIHtcclxuICAgICAgICBjb25zdCB7IHZhbGlkYXRvcjogdGhlblZhbGlkYXRvciB9ID0gc2NoZW1hLnRoZW4gYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICAgICAgaWYgKHRoZW5WYWxpZGF0b3IpIHtcclxuICAgICAgICAgIGNvbnN0IHRoZW5SZXN1bHQgPSB0aGVuVmFsaWRhdG9yKHNjaGVtYS50aGVuLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSk7XHJcbiAgICAgICAgICBpZiAoIXRoZW5SZXN1bHQudmFsaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoZW5SZXN1bHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHNjaGVtYS5lbHNlKSB7XHJcbiAgICAgIGNvbnN0IHsgdmFsaWRhdG9yOiBlbHNlVmFsaWRhdG9yIH0gPSBzY2hlbWEuZWxzZSBhcyBDb21waWxlZFNjaGVtYTtcclxuICAgICAgaWYgKGVsc2VWYWxpZGF0b3IpIHtcclxuICAgICAgICBjb25zdCBlbHNlUmVzdWx0ID0gZWxzZVZhbGlkYXRvcihzY2hlbWEuZWxzZSwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgICAgIGlmICghZWxzZVJlc3VsdC52YWxpZCkge1xyXG4gICAgICAgICAgcmV0dXJuIGVsc2VSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUsIGVycm9yczogW10sIGRhdGEgfTtcclxuICB9LFxyXG5cclxuICBub3Qoc2NoZW1hLCBkYXRhLCBwb2ludGVyLCBzY2hlbWFTaGllbGRJbnN0YW5jZSkge1xyXG4gICAgaWYgKHR5cGVvZiBzY2hlbWEubm90ID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgaWYgKHNjaGVtYS5ub3QpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgZXJyb3JzOiBbXHJcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3Qgbm90IGJlIHZhbGlkYCwge1xyXG4gICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgdmFsdWU6IGRhdGEsXHJcbiAgICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0lTX1ZBTElEJyxcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgICAgZGF0YSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlLCBlcnJvcnM6IFtdLCBkYXRhIH07XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgeyB2YWxpZGF0b3IgfSA9IHNjaGVtYS5ub3QgYXMgQ29tcGlsZWRTY2hlbWE7XHJcbiAgICBpZiAoIXZhbGlkYXRvcikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3Qgbm90IGJlIHZhbGlkYCwge1xyXG4gICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0lTX1ZBTElEJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2YWxpZGF0b3JSZXN1bHQgPSB2YWxpZGF0b3Ioc2NoZW1hLm5vdCwgZGF0YSwgcG9pbnRlciwgc2NoZW1hU2hpZWxkSW5zdGFuY2UpO1xyXG4gICAgaWYgKHZhbGlkYXRvclJlc3VsdC52YWxpZCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiBmYWxzZSxcclxuICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgIG5ldyBWYWxpZGF0aW9uRXJyb3IoYFZhbHVlIG11c3Qgbm90IGJlIHZhbGlkYCwge1xyXG4gICAgICAgICAgICBwb2ludGVyLFxyXG4gICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgY29kZTogJ1ZBTFVFX0lTX1ZBTElEJyxcclxuICAgICAgICAgIH0pLFxyXG4gICAgICAgIF0sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSwgZXJyb3JzOiBbXSwgZGF0YSB9O1xyXG4gIH0sXHJcbn07XHJcbiIsImltcG9ydCB7IFZhbGlkYXRpb25FcnJvciwgaXNPYmplY3QgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmltcG9ydCB7IEZvcm1hdHMgfSBmcm9tICcuL2Zvcm1hdHMnO1xyXG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBrZXl3b3JkcyB9IGZyb20gJy4va2V5d29yZHMnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0aW9uRXJyb3JQcm9wcyB7XHJcbiAgcG9pbnRlcjogc3RyaW5nO1xyXG4gIHZhbHVlOiBhbnk7XHJcbiAgY29kZTogc3RyaW5nO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlc3VsdCB7XHJcbiAgdmFsaWQ6IGJvb2xlYW47XHJcbiAgZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JbXTtcclxuICBkYXRhOiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVmFsaWRhdG9yRnVuY3Rpb24ge1xyXG4gIChzY2hlbWE6IENvbXBpbGVkU2NoZW1hLCBkYXRhOiBhbnksIHBvaW50ZXI6IHN0cmluZywgc2NoZW1hU2hpZWxkSW5zdGFuY2U6IFNjaGVtYVNoaWVsZCk6IFJlc3VsdDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBGb3JtYXRGdW5jdGlvbiB7XHJcbiAgKGRhdGE6IGFueSk6IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcGlsZWRTY2hlbWEge1xyXG4gIHBvaW50ZXI6IHN0cmluZztcclxuICB2YWxpZGF0b3I/OiBWYWxpZGF0b3JGdW5jdGlvbjtcclxuICB0eXBlPzogc3RyaW5nO1xyXG4gIHZhbGlkYXRvcnM/OiBWYWxpZGF0b3JGdW5jdGlvbltdO1xyXG4gIGtleXdvcmRzPzogUmVjb3JkPHN0cmluZywgVmFsaWRhdG9yRnVuY3Rpb24+O1xyXG4gIFtrZXk6IHN0cmluZ106IGFueTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWYWxpZGF0b3Ige1xyXG4gIChkYXRhOiBhbnkpOiBSZXN1bHQ7XHJcbiAgY29tcGlsZWRTY2hlbWE6IENvbXBpbGVkU2NoZW1hO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2NoZW1hU2hpZWxkIHtcclxuICB0eXBlcyA9IG5ldyBNYXA8c3RyaW5nLCBWYWxpZGF0b3JGdW5jdGlvbj4oKTtcclxuICBmb3JtYXRzID0gbmV3IE1hcDxzdHJpbmcsIEZvcm1hdEZ1bmN0aW9uPigpO1xyXG4gIGtleXdvcmRzID0gbmV3IE1hcDxzdHJpbmcsIFZhbGlkYXRvckZ1bmN0aW9uPigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIE9iamVjdC5rZXlzKFR5cGVzKS5mb3JFYWNoKCh0eXBlKSA9PiB7XHJcbiAgICAgIHRoaXMuYWRkVHlwZSh0eXBlLCBUeXBlc1t0eXBlXSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBPYmplY3Qua2V5cyhrZXl3b3JkcykuZm9yRWFjaCgoa2V5d29yZCkgPT4ge1xyXG4gICAgICB0aGlzLmFkZEtleXdvcmQoa2V5d29yZCwga2V5d29yZHNba2V5d29yZF0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgT2JqZWN0LmtleXMoRm9ybWF0cykuZm9yRWFjaCgoZm9ybWF0KSA9PiB7XHJcbiAgICAgIHRoaXMuYWRkRm9ybWF0KGZvcm1hdCwgRm9ybWF0c1tmb3JtYXRdKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgYWRkVHlwZShuYW1lOiBzdHJpbmcsIHZhbGlkYXRvcjogVmFsaWRhdG9yRnVuY3Rpb24pIHtcclxuICAgIHRoaXMudHlwZXMuc2V0KG5hbWUsIHZhbGlkYXRvcik7XHJcbiAgfVxyXG5cclxuICBhZGRGb3JtYXQobmFtZTogc3RyaW5nLCB2YWxpZGF0b3I6IEZvcm1hdEZ1bmN0aW9uKSB7XHJcbiAgICB0aGlzLmZvcm1hdHMuc2V0KG5hbWUsIHZhbGlkYXRvcik7XHJcbiAgfVxyXG5cclxuICBhZGRLZXl3b3JkKG5hbWU6IHN0cmluZywgdmFsaWRhdG9yOiBWYWxpZGF0b3JGdW5jdGlvbikge1xyXG4gICAgdGhpcy5rZXl3b3Jkcy5zZXQobmFtZSwgdmFsaWRhdG9yKTtcclxuICB9XHJcblxyXG4gIGNvbXBpbGUoc2NoZW1hOiBhbnkpOiBWYWxpZGF0b3Ige1xyXG4gICAgY29uc3QgY29tcGlsZWRTY2hlbWEgPSB0aGlzLmNvbXBpbGVTY2hlbWEoc2NoZW1hLCAnIycpO1xyXG5cclxuICAgIGNvbnN0IHZhbGlkYXRlOiBWYWxpZGF0b3IgPSAoZGF0YTogYW55KSA9PiB7XHJcbiAgICAgIHJldHVybiBjb21waWxlZFNjaGVtYS52YWxpZGF0b3IoY29tcGlsZWRTY2hlbWEsIGRhdGEsICcjJywgdGhpcyk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhbGlkYXRlLmNvbXBpbGVkU2NoZW1hID0gY29tcGlsZWRTY2hlbWE7XHJcblxyXG4gICAgcmV0dXJuIHZhbGlkYXRlO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjb21waWxlU2NoZW1hKHNjaGVtYTogUGFydGlhbDxDb21waWxlZFNjaGVtYT4gfCBhbnksIHBvaW50ZXIpOiBDb21waWxlZFNjaGVtYSB7XHJcbiAgICBpZiAoIXRoaXMuaXNTY2hlbWFMaWtlKHNjaGVtYSkpIHtcclxuICAgICAgaWYgKHNjaGVtYSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHNjaGVtYSA9IHtcclxuICAgICAgICAgIGFueU9mOiBbeyB0eXBlOiAnc3RyaW5nJyB9LCB7IHR5cGU6ICdudW1iZXInIH0sIHsgdHlwZTogJ2Jvb2xlYW4nIH0sIHsgdHlwZTogJ2FycmF5JyB9LCB7IHR5cGU6ICdvYmplY3QnIH0sIHsgdHlwZTogJ251bGwnIH1dLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzY2hlbWEgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgc2NoZW1hID0ge1xyXG4gICAgICAgICAgb25lT2Y6IFtdLFxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb21waWxlZFNjaGVtYSA9IHtcclxuICAgICAgLi4uc2NoZW1hLFxyXG4gICAgICBwb2ludGVyLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAoJ3R5cGUnIGluIGNvbXBpbGVkU2NoZW1hKSB7XHJcbiAgICAgIGNvbnN0IHR5cGVzID0gQXJyYXkuaXNBcnJheShjb21waWxlZFNjaGVtYS50eXBlKSA/IGNvbXBpbGVkU2NoZW1hLnR5cGUgOiBjb21waWxlZFNjaGVtYS50eXBlLnNwbGl0KCcsJykubWFwKCh0KSA9PiB0LnRyaW0oKSk7XHJcblxyXG4gICAgICBjb21waWxlZFNjaGVtYS52YWxpZGF0b3JzID0gdHlwZXMubWFwKCh0eXBlKSA9PiB0aGlzLnR5cGVzLmdldCh0eXBlKSkuZmlsdGVyKCh2YWxpZGF0b3IpID0+IHZhbGlkYXRvciAhPT0gdW5kZWZpbmVkKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb21waWxlIHNjaGVtYSB0eXBlXHJcbiAgICBjb25zdCB2YWxpZGF0b3I6IFZhbGlkYXRvckZ1bmN0aW9uID0gKHNjaGVtYTogYW55LCBkYXRhOiBhbnksIHBvaW50ZXI6IHN0cmluZykgPT4ge1xyXG4gICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXIgPT09ICcjJykge1xyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxyXG4gICAgICAgICAgICBlcnJvcnM6IFtcclxuICAgICAgICAgICAgICBuZXcgVmFsaWRhdGlvbkVycm9yKCdEYXRhIGlzIHVuZGVmaW5lZCcsIHtcclxuICAgICAgICAgICAgICAgIHBvaW50ZXIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvZGU6ICdEQVRBX1VOREVGSU5FRCcsXHJcbiAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IGZpbmFsRGF0YSA9IGRhdGE7XHJcbiAgICAgIGNvbnN0IHR5cGVFcnJvcnNSZXN1bHQgPSB0aGlzLnZhbGlkYXRlVHlwZXMoc2NoZW1hLCBmaW5hbERhdGEsIHBvaW50ZXIpO1xyXG4gICAgICBpZiAodHlwZUVycm9yc1Jlc3VsdC52YWxpZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICByZXR1cm4gdHlwZUVycm9yc1Jlc3VsdDtcclxuICAgICAgfVxyXG4gICAgICBmaW5hbERhdGEgPSB0eXBlRXJyb3JzUmVzdWx0LmRhdGE7XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy52YWxpZGF0ZUtleXdvcmRzKHNjaGVtYSwgZmluYWxEYXRhLCBwb2ludGVyKTtcclxuICAgIH07XHJcblxyXG4gICAgY29tcGlsZWRTY2hlbWEudmFsaWRhdG9yID0gdmFsaWRhdG9yO1xyXG5cclxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBpbGUgc3ViIHNjaGVtYXNcclxuICAgIGZvciAobGV0IGtleSBpbiBzY2hlbWEpIHtcclxuICAgICAgLy8gU2tpcCB0eXBlIGFzIGl0IGlzIGFscmVhZHkgY29tcGlsZWRcclxuICAgICAgaWYgKGtleSA9PT0gJ3R5cGUnKSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0aGlzLmtleXdvcmRzLmhhcyhrZXkpKSB7XHJcbiAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gdGhpcy5rZXl3b3Jkcy5nZXQoa2V5KTtcclxuICAgICAgICBjb21waWxlZFNjaGVtYS5rZXl3b3JkcyA9IGNvbXBpbGVkU2NoZW1hLmtleXdvcmRzIHx8IHt9O1xyXG4gICAgICAgIGNvbXBpbGVkU2NoZW1hLmtleXdvcmRzW2tleV0gPSB2YWxpZGF0b3I7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuaGFuZGxlU3ViU2NoZW1hKGtleSwgc2NoZW1hLCBwb2ludGVyLCBjb21waWxlZFNjaGVtYSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvbXBpbGVkU2NoZW1hO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBoYW5kbGVTdWJTY2hlbWEoa2V5OiBzdHJpbmcsIHNjaGVtYTogYW55LCBwb2ludGVyOiBzdHJpbmcsIGNvbXBpbGVkU2NoZW1hOiBhbnkpIHtcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYVtrZXldKSkge1xyXG4gICAgICBjb21waWxlZFNjaGVtYVtrZXldID0gc2NoZW1hW2tleV0ubWFwKChzdWJTY2hlbWEsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTY2hlbWFMaWtlKHN1YlNjaGVtYSkpIHtcclxuICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVTY2hlbWEoc3ViU2NoZW1hLCBgJHtwb2ludGVyfS8ke2tleX0vJHtpbmRleH1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN1YlNjaGVtYTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNPYmplY3Qoc2NoZW1hW2tleV0pKSB7XHJcbiAgICAgIGlmICh0aGlzLmlzU2NoZW1hTGlrZShzY2hlbWFba2V5XSkgJiYga2V5ICE9PSAncHJvcGVydGllcycpIHtcclxuICAgICAgICBjb21waWxlZFNjaGVtYVtrZXldID0gdGhpcy5jb21waWxlU2NoZW1hKHNjaGVtYVtrZXldLCBgJHtwb2ludGVyfS8ke2tleX1gKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAobGV0IHN1YktleSBpbiBzY2hlbWFba2V5XSkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzU2NoZW1hTGlrZShzY2hlbWFba2V5XVtzdWJLZXldKSkge1xyXG4gICAgICAgICAgY29tcGlsZWRTY2hlbWFba2V5XSA9IGNvbXBpbGVkU2NoZW1hW2tleV0gfHwge307XHJcblxyXG4gICAgICAgICAgY29tcGlsZWRTY2hlbWFba2V5XVtzdWJLZXldID0gdGhpcy5jb21waWxlU2NoZW1hKHNjaGVtYVtrZXldW3N1YktleV0sIGAke3BvaW50ZXJ9LyR7a2V5fS8ke3N1YktleX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgdmFsaWRhdGVUeXBlcyhzY2hlbWE6IENvbXBpbGVkU2NoZW1hLCBkYXRhLCBwb2ludGVyKTogUmVzdWx0IHtcclxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3VuZGVmaW5lZCcgfHwgIUFycmF5LmlzQXJyYXkoc2NoZW1hLnZhbGlkYXRvcnMpIHx8IHNjaGVtYS52YWxpZGF0b3JzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkOiB0cnVlLFxyXG4gICAgICAgIGVycm9yczogW10sXHJcbiAgICAgICAgZGF0YSxcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZXJyb3JzID0gW107XHJcbiAgICBsZXQgZmluYWxEYXRhID0gZGF0YTtcclxuXHJcbiAgICBmb3IgKGxldCBzY2hlbWFWYWxpZGF0b3Igb2Ygc2NoZW1hLnZhbGlkYXRvcnMpIHtcclxuICAgICAgY29uc3Qgc2NoZW1hUmVzdWx0ID0gc2NoZW1hVmFsaWRhdG9yKHNjaGVtYSwgZGF0YSwgcG9pbnRlciwgdGhpcyk7XHJcblxyXG4gICAgICBmaW5hbERhdGEgPSBzY2hlbWFSZXN1bHQuZGF0YTtcclxuXHJcbiAgICAgIGlmIChzY2hlbWFSZXN1bHQudmFsaWQpIHtcclxuICAgICAgICByZXR1cm4gc2NoZW1hUmVzdWx0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBlcnJvcnMgPSBzY2hlbWFSZXN1bHQuZXJyb3JzO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIHZhbGlkOiBlcnJvcnMubGVuZ3RoID09PSAwLFxyXG4gICAgICBlcnJvcnMsXHJcbiAgICAgIGRhdGE6IGZpbmFsRGF0YSxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHZhbGlkYXRlS2V5d29yZHMoc2NoZW1hOiBDb21waWxlZFNjaGVtYSwgZGF0YSwgcG9pbnRlcik6IFJlc3VsdCB7XHJcbiAgICBjb25zdCBlcnJvcnMgPSBbXTtcclxuICAgIGxldCBmaW5hbERhdGEgPSBkYXRhO1xyXG5cclxuICAgIGlmICgna2V5d29yZHMnIGluIHNjaGVtYSkge1xyXG4gICAgICBmb3IgKGxldCBrZXl3b3JkIGluIHNjaGVtYS5rZXl3b3Jkcykge1xyXG4gICAgICAgIGNvbnN0IGtleXdvcmRWYWxpZGF0b3I6IFZhbGlkYXRvckZ1bmN0aW9uID0gc2NoZW1hLmtleXdvcmRzW2tleXdvcmRdO1xyXG4gICAgICAgIGNvbnN0IGtleXdvcmRSZXN1bHQgPSBrZXl3b3JkVmFsaWRhdG9yKHNjaGVtYSwgZmluYWxEYXRhLCBwb2ludGVyLCB0aGlzKTtcclxuICAgICAgICBmaW5hbERhdGEgPSBrZXl3b3JkUmVzdWx0LmRhdGE7XHJcbiAgICAgICAgaWYgKCFrZXl3b3JkUmVzdWx0LnZhbGlkKSB7XHJcbiAgICAgICAgICBlcnJvcnMucHVzaCguLi5rZXl3b3JkUmVzdWx0LmVycm9ycyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgdmFsaWQ6IGVycm9ycy5sZW5ndGggPT09IDAsXHJcbiAgICAgIGVycm9ycyxcclxuICAgICAgZGF0YTogZmluYWxEYXRhLFxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNTY2hlbWFPcktleXdvcmRQcmVzZW50KHN1YlNjaGVtYTogYW55KTogYm9vbGVhbiB7XHJcbiAgICBpZiAoJ3R5cGUnIGluIHN1YlNjaGVtYSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBmb3IgKGxldCBzdWJLZXkgaW4gc3ViU2NoZW1hKSB7XHJcbiAgICAgIGlmICh0aGlzLmtleXdvcmRzLmhhcyhzdWJLZXkpKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaXNTY2hlbWFMaWtlKHN1YlNjaGVtYTogYW55KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gaXNPYmplY3Qoc3ViU2NoZW1hKSAmJiB0aGlzLmlzU2NoZW1hT3JLZXl3b3JkUHJlc2VudChzdWJTY2hlbWEpO1xyXG4gIH1cclxufVxyXG4iXSwibWFwcGluZ3MiOiIrS0FBQUEsRyxFQUFBLHdDQUFBQyxFQUFBQyxHQUFBLElBQUlDLEVBQWtCLHVDQUVsQkMsRUFBaUIsbUJBQ2pCQyxFQUFpQixLQUNqQkMsRUFBUyxPQUNUQyxFQUFrQixrQkFDbEJDLEVBQWUsMENBNEVuQk4sRUFBT0QsUUFBeUIsZ0JBQUksQ0FDbENFLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0FDLEVBQ0YsRyw0RUN2RmFDLEVBQU4sY0FBOEJDLE1BQ25DQyxL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