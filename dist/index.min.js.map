//# sourceMappingURL=data:application/json;charset=utf-8;base64,{"version":3,"names":["require_is_my_ip_valid","exports","module","reIpv4FirstPass","reSubnetString","reForwardSlash","reZone","reBadCharacters","reBadAddress","ValidationError","Error","name","pointer","message","value","code","constructor","options","super","this","deepEqual","obj","other","Array","isArray","length","i","keys","Object","key","isObject","data","import_is_my_ip_valid","__toESM","RegExps","time","uri","email","hostname","date","notImplementedFormat","Formats","upperCaseData","toUpperCase","test","Date","isNaN","getTime","local","domain","split","indexOf","ipv4","isMyIpValid","version","ipv6","regex","RegExp","e","duration","uuid","iri","Types","object","schema","valid","errors","array","string","number","integer","Number","isInteger","boolean","null","keywords","required","hasOwnProperty","push","properties","schemaShieldInstance","finalData","default","validatorResult","validate","maxProperties","minProperties","additionalProperties","isCompiledSchema","patternProperties","match","pattern","patterns","propertyNames","items","schemaItems","schemaItemsLength","dataLength","itemsLength","Math","min","validatorErrors","minItems","maxItems","additionalItems","uniqueItems","unique","Map","item","itemStr","sorted","fromEntries","entries","sort","a","b","localeCompare","JSON","stringify","has","set","minLength","maxLength","patternRegexp","format","formatInstance","formatValidate","formats","get","enum","enumItem","join","minimum","exclusiveMinimum","maximum","max","exclusiveMaximum","multipleOf","quotient","isFinite","areMultiples","epsilon","abs","areCloseEnough","round","nullable","allOf","Boolean","anyOf","validationResult","oneOf","validCount","dependencies","dependency","const","contains","if","then","thenResult","else","elseResult","not","types","forEach","type","addType","keyword","addKeyword","addFormat","validator","compile","compiledSchema","compileSchema","map","t","trim","filter","validators","isSchemaLike","subSchema","index","result","isSchemaOrKeywordPresent","subKey"],"sources":["../node_modules/is-my-ip-valid/index.js","../lib/utils.ts","../lib/formats.ts","../lib/types.ts","../lib/keywords.ts","../lib/keywords/object-keywords.ts","../lib/keywords/array-keywords.ts","../lib/keywords/string-keywords.ts","../lib/keywords/number-keywords.ts","../lib/keywords/other-keywords.ts","../lib/index.ts"],"sourcesContent":["var reIpv4FirstPass = /^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n\nvar reSubnetString = /\\/\\d{1,3}(?=%|$)/\nvar reForwardSlash = /\\//\nvar reZone = /%.*$/\nvar reBadCharacters = /([^0-9a-f:/%])/i\nvar reBadAddress = /([0-9a-f]{5,}|:{3,}|[^:]:$|^:[^:]|\\/$)/i\n\nfunction validate4 (input) {\n  if (!(reIpv4FirstPass.test(input))) return false\n\n  var parts = input.split('.')\n\n  if (parts.length !== 4) return false\n\n  if (parts[0][0] === '0' && parts[0].length > 1) return false\n  if (parts[1][0] === '0' && parts[1].length > 1) return false\n  if (parts[2][0] === '0' && parts[2].length > 1) return false\n  if (parts[3][0] === '0' && parts[3].length > 1) return false\n\n  var n0 = Number(parts[0])\n  var n1 = Number(parts[1])\n  var n2 = Number(parts[2])\n  var n3 = Number(parts[3])\n\n  return (n0 >= 0 && n0 < 256 && n1 >= 0 && n1 < 256 && n2 >= 0 && n2 < 256 && n3 >= 0 && n3 < 256)\n}\n\nfunction validate6 (input) {\n  var withoutSubnet = input.replace(reSubnetString, '')\n  var hasSubnet = (input.length !== withoutSubnet.length)\n\n  // FIXME: this should probably be an option in the future\n  if (hasSubnet) return false\n\n  if (!hasSubnet) {\n    if (reForwardSlash.test(input)) return false\n  }\n\n  var withoutZone = withoutSubnet.replace(reZone, '')\n  var lastPartSeparator = withoutZone.lastIndexOf(':')\n\n  if (lastPartSeparator === -1) return false\n\n  var lastPart = withoutZone.substring(lastPartSeparator + 1)\n  var hasV4Part = validate4(lastPart)\n  var address = (hasV4Part ? withoutZone.substring(0, lastPartSeparator + 1) + '1234:5678' : withoutZone)\n\n  if (reBadCharacters.test(address)) return false\n  if (reBadAddress.test(address)) return false\n\n  var halves = address.split('::')\n\n  if (halves.length > 2) return false\n\n  if (halves.length === 2) {\n    var first = (halves[0] === '' ? [] : halves[0].split(':'))\n    var last = (halves[1] === '' ? [] : halves[1].split(':'))\n    var remainingLength = 8 - (first.length + last.length)\n\n    if (remainingLength <= 0) return false\n  } else {\n    if (address.split(':').length !== 8) return false\n  }\n\n  return true\n}\n\nfunction validate (input) {\n  return validate4(input) || validate6(input)\n}\n\nmodule.exports = function validator (options) {\n  if (!options) options = {}\n\n  if (options.version === 4) return validate4\n  if (options.version === 6) return validate6\n  if (options.version == null) return validate\n\n  throw new Error('Unknown version: ' + options.version)\n}\n\nmodule.exports['__all_regexes__'] = [\n  reIpv4FirstPass,\n  reSubnetString,\n  reForwardSlash,\n  reZone,\n  reBadCharacters,\n  reBadAddress\n]\n","import { SchemaShield, ValidationErrorProps } from './index';\r\n\r\nexport class ValidationError extends Error {\r\n  name: string;\r\n  pointer: string;\r\n  message: string;\r\n  value: any;\r\n  code: string;\r\n\r\n  constructor(\r\n    message: string,\r\n    options: ValidationErrorProps = {\r\n      pointer: '',\r\n      value: null,\r\n      code: '',\r\n    }\r\n  ) {\r\n    super(message);\r\n    this.name = 'ValidationError';\r\n    this.pointer = options.pointer;\r\n    this.message = message;\r\n    this.value = options.value;\r\n    this.code = options.code;\r\n  }\r\n}\r\n\r\nexport const defaultValidator = (schema, data, pointer) => {\r\n  return [\r\n    new ValidationError('No validator for this schema', {\r\n      pointer,\r\n      value: data,\r\n      code: 'NO_VALIDATOR',\r\n    }),\r\n  ];\r\n};\r\n\r\nexport function deepEqual(obj: Array<any> | Record<string, any>, other: Array<any> | Record<string, any>) {\r\n  if (Array.isArray(obj) && Array.isArray(other)) {\r\n    if (obj.length !== other.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < obj.length; i++) {\r\n      if (!deepEqual(obj[i], other[i])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  if (typeof obj === 'object' && typeof other === 'object') {\r\n    if (obj === null || other === null) {\r\n      return obj === other;\r\n    }\r\n\r\n    const keys = Object.keys(obj);\r\n    if (keys.length !== Object.keys(other).length) {\r\n      return false;\r\n    }\r\n\r\n    for (const key of keys) {\r\n      if (!deepEqual(obj[key], other[key])) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  return obj === other;\r\n}\r\n\r\nexport function isObject(data) {\r\n  return typeof data === 'object' && data !== null && !Array.isArray(data);\r\n}\r\n\r\nexport function areCloseEnough(a, b, epsilon = 1e-15) {\r\n  return Math.abs(a - b) <= epsilon * Math.max(Math.abs(a), Math.abs(b));\r\n}\r\n\r\nexport function getUTF16Length(str) {\r\n  let length = 0;\r\n  for (let i = 0; i < str.length; i++) {\r\n    const codePoint = str.codePointAt(i);\r\n    if (codePoint > 0xffff) {\r\n      i++;\r\n    }\r\n    length++;\r\n  }\r\n  return length;\r\n}\r\n\r\nexport function deepClone(obj: any): any {\r\n  if (Array.isArray(obj)) {\r\n    const result = [];\r\n    for (let i = 0; i < obj.length; i++) {\r\n      result[i] = deepClone(obj[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  if (isObject(obj)) {\r\n    const result = {};\r\n    for (const key in obj) {\r\n      result[key] = deepClone(obj[key]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  return obj;\r\n}\r\n","import isMyIpValid from 'is-my-ip-valid';\r\nimport { FormatFunction } from './index';\r\nimport { ValidationError } from './utils';\r\n\r\n// The datetime 1990-02-31T15:59:60.123-08:00 must be rejected.\r\nconst RegExps = {\r\n  'date-time': /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  time: /^(\\d{2}):(\\d{2}):(\\d{2})(\\.\\d+)?(Z|([+-])(\\d{2}):(\\d{2}))$/,\r\n  uri: /^[a-zA-Z][a-zA-Z0-9+\\-.]*:[^\\s]*$/,\r\n  email:\r\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\r\n  hostname: /^[a-zA-Z0-9][a-zA-Z0-9-]{0,62}(\\.[a-zA-Z0-9][a-zA-Z0-9-]{0,62})*[a-zA-Z0-9]$/,\r\n  date: /^(\\d{4})-(\\d{2})-(\\d{2})$/,\r\n  'json-pointer': /^\\/(?:[^~]|~0|~1)*$/,\r\n  'relative-json-pointer': /^([0-9]+)(#|\\/(?:[^~]|~0|~1)*)?$/,\r\n};\r\n\r\nfunction notImplementedFormat(data: any) {\r\n  throw new ValidationError(`Format \"${data}\" is not implemented yet. Please open an issue on GitHub.`);\r\n  return false;\r\n}\r\n\r\nexport const Formats: Record<string, FormatFunction> = {\r\n  ['date-time'](data) {\r\n    const upperCaseData = data.toUpperCase();\r\n    if (!RegExps['date-time'].test(upperCaseData)) {\r\n      return false;\r\n    }\r\n\r\n    const date = new Date(upperCaseData);\r\n    return !isNaN(date.getTime());\r\n  },\r\n  uri(data) {\r\n    return RegExps.uri.test(data);\r\n  },\r\n  email(data) {\r\n    if (!RegExps.email.test(data)) {\r\n      return false;\r\n    }\r\n\r\n    const [local, domain] = data.split('@');\r\n\r\n    if (local.length > 64 || local.indexOf('..') !== -1 || local[0] === '.' || local[local.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    if (domain.length > 255 || domain.indexOf('..') !== -1 || domain[0] === '.' || domain[domain.length - 1] === '.') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  },\r\n  ipv4: isMyIpValid({ version: 4 }),\r\n  ipv6: isMyIpValid({ version: 6 }),\r\n\r\n  hostname(data) {\r\n    return RegExps.hostname.test(data);\r\n  },\r\n  date(data) {\r\n    if (typeof data !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    if (RegExps.date.test(data) === false) {\r\n      return false;\r\n    }\r\n\r\n    return !isNaN(new Date(data).getTime());\r\n  },\r\n  regex(data) {\r\n    try {\r\n      new RegExp(data);\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  },\r\n  'json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['json-pointer'].test(data);\r\n  },\r\n  'relative-json-pointer'(data) {\r\n    if (data === '') {\r\n      return true;\r\n    }\r\n\r\n    return RegExps['relative-json-pointer'].test(data);\r\n  },\r\n  time(data) {\r\n    return RegExps.time.test(data);\r\n  },\r\n\r\n  // Not supported yet\r\n\r\n  duration: notImplementedFormat,\r\n  'idn-email': notImplementedFormat,\r\n  'idn-hostname': notImplementedFormat,\r\n  uuid: notImplementedFormat,\r\n  'uri-reference': notImplementedFormat,\r\n  iri: notImplementedFormat,\r\n  'iri-reference': notImplementedFormat,\r\n  'uri-template': notImplementedFormat,\r\n};\r\n","import { isObject, ValidationError } from './utils';\r\nimport { ValidatorFunction } from './index';\r\n\r\nexport const Types: Record<string, ValidatorFunction> = {\r\n  object(schema, data, pointer) {\r\n    if (isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an object', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_OBJECT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  array(schema, data, pointer) {\r\n    if (Array.isArray(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null && 'length' in data) {\r\n      // Check if the first key is a number and the length is the same as the number of keys - 1 (length)\r\n      const keys = Object.keys(data);\r\n      if (keys.length > 0 && (keys[0] !== '0' || keys.length !== data.length)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Data is not an array', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NOT_AN_ARRAY',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an array', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_ARRAY',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  string(schema, data, pointer) {\r\n    if (typeof data === 'string') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a string', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_STRING',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  number(schema, data, pointer) {\r\n    if (typeof data === 'number') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a number', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_NUMBER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  integer(schema, data, pointer) {\r\n    if (typeof data === 'number' && Number.isInteger(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not an integer', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_AN_INTEGER',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  boolean(schema, data, pointer) {\r\n    // Check if data is a boolean like value\r\n    if (typeof data === 'boolean') {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not a boolean', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_A_BOOLEAN',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n  null(schema, data, pointer) {\r\n    if (data === null) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Data is not null', {\r\n          pointer,\r\n          value: data,\r\n          code: 'NOT_NULL',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { ArrayKeywords } from \"./keywords/array-keywords\";\r\nimport { NumberKeywords } from \"./keywords/number-keywords\";\r\nimport { ObjectKeywords } from \"./keywords/object-keywords\";\r\nimport { OtherKeywords } from \"./keywords/other-keywords\";\r\nimport { StringKeywords } from \"./keywords/string-keywords\";\r\nimport { ValidatorFunction } from \"./index\";\r\n\r\nexport const keywords: Record<string, ValidatorFunction> = {\r\n  ...ObjectKeywords,\r\n  ...ArrayKeywords,\r\n  ...StringKeywords,\r\n  ...NumberKeywords,\r\n  ...OtherKeywords\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ObjectKeywords: Record<string, ValidatorFunction> = {\r\n  // Object\r\n  required(schema, data, pointer) {\r\n    if (!isObject(data)) {\r\n      return {\r\n        valid: true,\r\n        errors: [],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const errors = [];\r\n    for (let i = 0; i < schema.required.length; i++) {\r\n      const key = schema.required[i];\r\n      if (!data.hasOwnProperty(key)) {\r\n        errors.push(\r\n          new ValidationError('Missing required property', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'MISSING_REQUIRED_PROPERTY',\r\n          })\r\n        );\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data };\r\n  },\r\n\r\n  properties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    for (let key in schema.properties) {\r\n      if (!data.hasOwnProperty(key) || typeof data[key] === 'undefined') {\r\n        if (isObject(schema.properties[key]) && 'default' in schema.properties[key]) {\r\n          finalData[key] = schema.properties[key].default;\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      if (typeof schema.properties[key] === 'boolean') {\r\n        if (schema.properties[key] === false) {\r\n          errors.push(\r\n            new ValidationError('Property is not allowed', {\r\n              pointer: `${pointer}/${key}`,\r\n              value: data[key],\r\n              code: 'PROPERTY_NOT_ALLOWED',\r\n            })\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = schemaShieldInstance.validate(schema.properties[key], finalData[key]);\r\n\r\n      finalData[key] = validatorResult.data;\r\n\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  maxProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length <= schema.maxProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too many properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_MANY_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  minProperties(schema, data, pointer) {\r\n    if (!isObject(data) || Object.keys(data).length >= schema.minProperties) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Object has too few properties', {\r\n          pointer,\r\n          value: data,\r\n          code: 'OBJECT_TOO_FEW_PROPERTIES',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const keys = Object.keys(data);\r\n    const isCompiledSchema = schemaShieldInstance.isCompiledSchema(schema.additionalProperties);\r\n    for (const key of keys) {\r\n      if (schema.properties && schema.properties.hasOwnProperty(key)) {\r\n        continue;\r\n      }\r\n\r\n      if (schema.patternProperties) {\r\n        let match = false;\r\n        for (const pattern in schema.patternProperties) {\r\n          if (new RegExp(pattern, 'u').test(key)) {\r\n            match = true;\r\n            break;\r\n          }\r\n        }\r\n        if (match) {\r\n          continue;\r\n        }\r\n      }\r\n\r\n      if (schema.additionalProperties === false) {\r\n        errors.push(\r\n          new ValidationError('Additional property not allowed', {\r\n            pointer: `${pointer}/${key}`,\r\n            value: data,\r\n            code: 'ADDITIONAL_PROPERTY_NOT_ALLOWED',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (isCompiledSchema) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.additionalProperties, finalData[key]);\r\n\r\n        finalData[key] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  patternProperties(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n    const patterns = Object.keys(schema.patternProperties);\r\n    for (const pattern of patterns) {\r\n      const regex = new RegExp(pattern, 'u');\r\n\r\n      if (typeof schema.patternProperties[pattern] === 'boolean') {\r\n        if (schema.patternProperties[pattern] === false) {\r\n          for (const key in finalData) {\r\n            if (regex.test(key)) {\r\n              errors.push(\r\n                new ValidationError('Property is not allowed', {\r\n                  pointer: `${pointer}/${key}`,\r\n                  value: data[key],\r\n                  code: 'PROPERTY_NOT_ALLOWED',\r\n                })\r\n              );\r\n            }\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const keys = Object.keys(finalData);\r\n      for (const key of keys) {\r\n        if (regex.test(key)) {\r\n          const validatorResult = schemaShieldInstance.validate(schema.patternProperties[pattern], finalData[key]);\r\n\r\n          finalData[key] = validatorResult.data;\r\n\r\n          if (!validatorResult.valid) {\r\n            errors.push(...validatorResult.errors);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  propertyNames(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.propertyNames === 'boolean') {\r\n      if (schema.propertyNames === false && Object.keys(data).length > 0) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Property names are not allowed', {\r\n              pointer,\r\n              value: data,\r\n              code: 'PROPERTY_NAMES_NOT_ALLOWED',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = { ...data };\r\n\r\n    if (schemaShieldInstance.isCompiledSchema(schema.propertyNames)) {\r\n      for (let key in finalData) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.propertyNames, key);\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject } from '../utils';\r\n\r\nexport const ArrayKeywords: Record<string, ValidatorFunction> = {\r\n  items(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    const finalData = [...data];\r\n    const schemaItems = schema.items;\r\n    const schemaItemsLength = Array.isArray(schemaItems) ? schemaItems.length : 0;\r\n    const dataLength = data.length;\r\n\r\n    if (Array.isArray(schemaItems)) {\r\n      const itemsLength = Math.min(schemaItemsLength, dataLength);\r\n      for (let i = 0; i < itemsLength; i++) {\r\n        if (typeof schemaItems[i] === 'boolean') {\r\n          if (schemaItems[i] === false && typeof data[i] !== 'undefined') {\r\n            errors.push(\r\n              new ValidationError('Array item is not allowed', {\r\n                pointer: `${pointer}/${i}`,\r\n                value: data[i],\r\n                code: 'ARRAY_ITEM_NOT_ALLOWED',\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        const validatorResult = schemaShieldInstance.validate(schemaItems[i], finalData[i]);\r\n\r\n        finalData[i] = validatorResult.data;\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n      }\r\n    } else if (typeof schemaItems === 'boolean') {\r\n      if (schemaItems === false && dataLength > 0) {\r\n        errors.push(\r\n          new ValidationError('Array is not allowed', {\r\n            pointer,\r\n            value: data,\r\n            code: 'ARRAY_NOT_ALLOWED',\r\n          })\r\n        );\r\n      }\r\n    } else if (schemaShieldInstance.isCompiledSchema(schemaItems)) {\r\n      for (let i = 0; i < dataLength; i++) {\r\n        const validatorErrors = schemaShieldInstance.validate(schemaItems, finalData[i]);\r\n\r\n        finalData[i] = validatorErrors.data;\r\n\r\n        if (!validatorErrors.valid) {\r\n          errors.push(...validatorErrors.errors);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  minItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length >= schema.minItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Array is too short', {\r\n          pointer,\r\n          value: data,\r\n          code: 'ARRAY_TOO_SHORT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || data.length <= schema.maxItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('Array is too long', {\r\n          pointer,\r\n          value: data,\r\n          code: 'ARRAY_TOO_LONG',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  additionalItems(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data) || !schema.items || !Array.isArray(schema.items)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (schema.additionalItems === false) {\r\n      if (data.length > schema.items.length) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Array has too many items', {\r\n              pointer,\r\n              value: data,\r\n              code: 'ARRAY_TOO_MANY_ITEMS',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = [...data];\r\n    if (schemaShieldInstance.isCompiledSchema(schema.additionalItems)) {\r\n      for (let i = schema.items.length; i < finalData.length; i++) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.additionalItems, finalData[i]);\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n        finalData[i] = validatorResult.data;\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  uniqueItems(schema, data, pointer) {\r\n    if (!Array.isArray(data) || !schema.uniqueItems) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const unique = new Map();\r\n\r\n    for (const item of data) {\r\n      let itemStr;\r\n\r\n      // Change string to \"string\" to avoid false positives\r\n      if (typeof item === 'string') {\r\n        itemStr = `\"${item}\"`;\r\n\r\n        // Sort object keys to avoid false positives\r\n      } else if (isObject(item)) {\r\n        const sorted = Object.fromEntries(Object.entries(item).sort(([a], [b]) => a.localeCompare(b)));\r\n        itemStr = JSON.stringify(sorted);\r\n      } else if (Array.isArray(item)) {\r\n        itemStr = JSON.stringify(item);\r\n      } else {\r\n        itemStr = item;\r\n      }\r\n\r\n      if (unique.has(itemStr)) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError('Array items are not unique', {\r\n              pointer,\r\n              value: data,\r\n              code: 'ARRAY_ITEMS_NOT_UNIQUE',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      } else {\r\n        unique.set(itemStr, true);\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n};\r\n","import { ValidationError, deepEqual } from '../utils';\r\n\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const StringKeywords: Record<string, ValidatorFunction> = {\r\n  minLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length >= schema.minLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too short', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_SHORT',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maxLength(schema, data, pointer) {\r\n    if (typeof data !== 'string' || data.length <= schema.maxLength) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError('String is too long', {\r\n          pointer,\r\n          value: data,\r\n          code: 'STRING_TOO_LONG',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  pattern(schema, data, pointer) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const patternRegexp = new RegExp(schema.pattern, 'u');\r\n\r\n    if (patternRegexp instanceof RegExp === false) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Pattern is not a valid regular expression', {\r\n            pointer,\r\n            value: data,\r\n            code: 'PATTERN_IS_NOT_REGEXP',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = patternRegexp.test(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('String does not match pattern', {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_PATTERN',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  format(schema, data, pointer, formatInstance) {\r\n    if (typeof data !== 'string') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const formatValidate = formatInstance.formats.get(schema.format);\r\n    if (!formatValidate) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Unknown format ${schema.format}`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'UNKNOWN_FORMAT',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    const valid = formatValidate(data);\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError(`String does not match format ${schema.format}`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'STRING_DOES_NOT_MATCH_FORMAT',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  enum(schema, data, pointer) {\r\n    // Check if data is an array or an object\r\n    const isArray = Array.isArray(data);\r\n    const isObject = typeof data === 'object' && data !== null;\r\n\r\n    for (let i = 0; i < schema.enum.length; i++) {\r\n      const enumItem = schema.enum[i];\r\n\r\n      // Simple equality check\r\n      if (enumItem === data) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n\r\n      // If data is an array or an object, check for deep equality\r\n      if ((isArray && Array.isArray(enumItem)) || (isObject && typeof enumItem === 'object' && enumItem !== null)) {\r\n        if (deepEqual(enumItem, data)) {\r\n          return { valid: true, errors: [], data };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be one of ${schema.enum.join(', ')}`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_IN_ENUM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { areCloseEnough, ValidationError } from '../utils';\r\nimport { ValidatorFunction } from '../index';\r\n\r\nexport const NumberKeywords: Record<string, ValidatorFunction> = {\r\n  minimum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    let min = schema.minimum;\r\n    if (typeof schema.exclusiveMinimum === 'number') {\r\n      min = schema.exclusiveMinimum + 1e-15;\r\n    } else if (schema.exclusiveMinimum === true) {\r\n      min += 1e-15;\r\n    }\r\n\r\n    const valid = data >= min;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  maximum(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    let max = schema.maximum;\r\n    if (typeof schema.exclusiveMaximum === 'number') {\r\n      max = schema.exclusiveMaximum - 1e-15;\r\n    } else if (schema.exclusiveMaximum === true) {\r\n      max -= 1e-15;\r\n    }\r\n\r\n    const valid = data <= max;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  multipleOf(schema, data, pointer) {\r\n    if (typeof data !== 'number') {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const quotient = data / schema.multipleOf;\r\n\r\n    // Detect overflow handling in JS\r\n    if (!isFinite(quotient)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const areMultiples = areCloseEnough(quotient, Math.round(quotient));\r\n\r\n    return {\r\n      valid: areMultiples,\r\n      errors: areMultiples\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is not a multiple of', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_NOT_MULTIPLE_OF',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMinimum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMinimum !== 'number' || 'minimum' in schema) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data > schema.exclusiveMinimum + 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too small', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_SMALL',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  exclusiveMaximum(schema, data, pointer) {\r\n    if (typeof data !== 'number' || typeof schema.exclusiveMaximum !== 'number' || 'maximum' in schema) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const valid = data < schema.exclusiveMaximum - 1e-15;\r\n\r\n    return {\r\n      valid,\r\n      errors: valid\r\n        ? []\r\n        : [\r\n            new ValidationError('Number is too big', {\r\n              pointer,\r\n              value: data,\r\n              code: 'NUMBER_TOO_BIG',\r\n            }),\r\n          ],\r\n      data,\r\n    };\r\n  },\r\n};\r\n","import { CompiledSchema, ValidatorFunction } from '../index';\r\nimport { ValidationError, isObject, deepEqual } from '../utils';\r\n\r\nexport const OtherKeywords: Record<string, ValidatorFunction> = {\r\n  nullable(schema, data, pointer) {\r\n    if (schema.nullable && data !== null) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError('Value must be null to be empty', {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_NOT_NULL',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  allOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.allOf.length; i++) {\r\n      if (isObject(schema.allOf[i])) {\r\n        const validatorResult = schemaShieldInstance.validate(schema.allOf[i], finalData);\r\n\r\n        if (!validatorResult.valid) {\r\n          errors.push(...validatorResult.errors);\r\n        }\r\n\r\n        finalData = validatorResult.data;\r\n      } else {\r\n        if (typeof schema.allOf[i] === 'boolean') {\r\n          if (Boolean(data) !== schema.allOf[i]) {\r\n            errors.push(\r\n              new ValidationError(`Value must match all schemas in allOf`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n              })\r\n            );\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data !== schema.allOf[i]) {\r\n          errors.push(\r\n            new ValidationError(`Value must match all schemas in allOf`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_DOES_NOT_MATCH_ALL_OF',\r\n            })\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  anyOf(schema, data, pointer, schemaShieldInstance) {\r\n    let finalData = data;\r\n\r\n    for (let i = 0; i < schema.anyOf.length; i++) {\r\n      if (isObject(schema.anyOf[i])) {\r\n        const validationResult = schemaShieldInstance.validate(schema.anyOf[i], finalData);\r\n        finalData = validationResult.data;\r\n        if (validationResult.valid) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      } else {\r\n        if (typeof schema.anyOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.anyOf[i]) {\r\n            return { valid: true, errors: [], data: finalData };\r\n          }\r\n        }\r\n\r\n        if (data === schema.anyOf[i]) {\r\n          return { valid: true, errors: [], data: finalData };\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match at least one schema in anyOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ANY_OF',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  oneOf(schema, data, pointer, schemaShieldInstance) {\r\n    const errors = [];\r\n    let validCount = 0;\r\n    let finalData = data;\r\n    for (let i = 0; i < schema.oneOf.length; i++) {\r\n      if (isObject(schema.oneOf[i])) {\r\n        const validationResult = schemaShieldInstance.validate(schema.oneOf[i], finalData);\r\n        if (validationResult.valid) {\r\n          validCount++;\r\n        } else {\r\n          errors.push(...validationResult.errors);\r\n        }\r\n        finalData = validationResult.data;\r\n      } else {\r\n        if (typeof schema.oneOf[i] === 'boolean') {\r\n          if (Boolean(data) === schema.oneOf[i]) {\r\n            validCount++;\r\n          }\r\n          continue;\r\n        }\r\n\r\n        if (data === schema.oneOf[i]) {\r\n          validCount++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (validCount === 1) {\r\n      return { valid: true, errors: [], data: finalData };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must match exactly one schema in oneOf`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_MATCH_ONE_OF',\r\n        }),\r\n      ],\r\n      data: finalData,\r\n    };\r\n  },\r\n\r\n  dependencies(schema, data, pointer, schemaShieldInstance) {\r\n    if (!isObject(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const errors = [];\r\n    let finalData = data;\r\n    for (const key in schema.dependencies) {\r\n      if (key in data === false) {\r\n        continue;\r\n      }\r\n\r\n      const dependency = schema.dependencies[key];\r\n      if (Array.isArray(dependency)) {\r\n        for (let i = 0; i < dependency.length; i++) {\r\n          if (!(dependency[i] in data)) {\r\n            errors.push(\r\n              new ValidationError(`Dependency ${dependency[i]} is missing`, {\r\n                pointer,\r\n                value: data,\r\n                code: 'DEPENDENCY_MISSING',\r\n              })\r\n            );\r\n          }\r\n        }\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'boolean') {\r\n        if (dependency) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${key} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (typeof dependency === 'string') {\r\n        if (dependency in data) {\r\n          continue;\r\n        }\r\n        errors.push(\r\n          new ValidationError(`Dependency ${dependency} is missing`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'DEPENDENCY_MISSING',\r\n          })\r\n        );\r\n        continue;\r\n      }\r\n\r\n      const validatorResult = schemaShieldInstance.validate(dependency, finalData);\r\n      if (!validatorResult.valid) {\r\n        errors.push(...validatorResult.errors);\r\n      }\r\n      finalData = validatorResult.data;\r\n    }\r\n\r\n    return { valid: errors.length === 0, errors, data: finalData };\r\n  },\r\n\r\n  const(schema, data, pointer) {\r\n    if (\r\n      data === schema.const ||\r\n      (isObject(data) && isObject(schema.const) && deepEqual(data, schema.const)) ||\r\n      (Array.isArray(data) && Array.isArray(schema.const) && deepEqual(data, schema.const))\r\n    ) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must be equal to const`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_NOT_EQUAL_TO_CONST',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  contains(schema, data, pointer, schemaShieldInstance) {\r\n    if (!Array.isArray(data)) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.contains === 'boolean') {\r\n      if (schema.contains) {\r\n        const valid = data.length > 0;\r\n        return {\r\n          valid,\r\n          errors: valid\r\n            ? []\r\n            : [\r\n                new ValidationError(`Value must contain at least one item`, {\r\n                  pointer,\r\n                  value: data,\r\n                  code: 'VALUE_DOES_NOT_CONTAIN_ITEM',\r\n                }),\r\n              ],\r\n          data,\r\n        };\r\n      }\r\n\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not contain any items`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_CONTAINS_ITEM',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      const validatorResult = schemaShieldInstance.validate(schema.contains, data[i]);\r\n      if (validatorResult.valid) {\r\n        return { valid: true, errors: [], data };\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: false,\r\n      errors: [\r\n        new ValidationError(`Value must contain at least one item that matches the contains schema`, {\r\n          pointer,\r\n          value: data,\r\n          code: 'VALUE_DOES_NOT_CONTAIN_MATCHING_ITEM',\r\n        }),\r\n      ],\r\n      data,\r\n    };\r\n  },\r\n\r\n  if(schema, data, pointer, schemaShieldInstance) {\r\n    if ('then' in schema === false && 'else' in schema === false) {\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    if (typeof schema.if === 'boolean') {\r\n      if (schema.if) {\r\n        if (schema.then) {\r\n          const thenResult = schemaShieldInstance.validate(schema.then, data);\r\n          if (!thenResult.valid) {\r\n            return thenResult;\r\n          }\r\n        }\r\n      } else if (schema.else) {\r\n        const elseResult = schemaShieldInstance.validate(schema.else, data);\r\n        if (!elseResult.valid) {\r\n          return elseResult;\r\n        }\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const ifResult = schemaShieldInstance.validate(schema.if, data);\r\n    if (ifResult.valid) {\r\n      if (schema.then) {\r\n        const thenResult = schemaShieldInstance.validate(schema.then, data);\r\n        if (!thenResult.valid) {\r\n          return thenResult;\r\n        }\r\n      }\r\n    } else if (schema.else) {\r\n      const elseResult = schemaShieldInstance.validate(schema.else, data);\r\n      if (!elseResult.valid) {\r\n        return elseResult;\r\n      }\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n\r\n  not(schema, data, pointer, schemaShieldInstance) {\r\n    if (typeof schema.not === 'boolean') {\r\n      if (schema.not) {\r\n        return {\r\n          valid: false,\r\n          errors: [\r\n            new ValidationError(`Value must not be valid`, {\r\n              pointer,\r\n              value: data,\r\n              code: 'VALUE_IS_VALID',\r\n            }),\r\n          ],\r\n          data,\r\n        };\r\n      }\r\n      return { valid: true, errors: [], data };\r\n    }\r\n\r\n    const validatorResult = schemaShieldInstance.validate(schema.not, data);\r\n    if (validatorResult.valid) {\r\n      return {\r\n        valid: false,\r\n        errors: [\r\n          new ValidationError(`Value must not be valid`, {\r\n            pointer,\r\n            value: data,\r\n            code: 'VALUE_IS_VALID',\r\n          }),\r\n        ],\r\n        data,\r\n      };\r\n    }\r\n\r\n    return { valid: true, errors: [], data };\r\n  },\r\n};\r\n","import { ValidationError, isObject } from './utils';\r\n\r\nimport { Formats } from './formats';\r\nimport { Types } from './types';\r\nimport { keywords } from './keywords';\r\n\r\nexport interface ValidationErrorProps {\r\n  pointer: string;\r\n  value: any;\r\n  code: string;\r\n}\r\n\r\nexport interface Result {\r\n  valid: boolean;\r\n  errors: ValidationError[];\r\n  data: any;\r\n}\r\n\r\nexport interface ValidatorFunction {\r\n  (schema: CompiledSchema, data: any, pointer: string, schemaShieldInstance: SchemaShield): Result;\r\n}\r\n\r\nexport interface FormatFunction {\r\n  (data: any): boolean;\r\n}\r\n\r\nexport interface CompiledSchema {\r\n  validators?: ValidatorFunction[];\r\n  types?: ValidatorFunction[];\r\n  [key: string]: any;\r\n}\r\n\r\nexport interface Validator {\r\n  (data: any): Result;\r\n  compiledSchema: CompiledSchema;\r\n}\r\n\r\nexport class SchemaShield {\r\n  types = new Map<string, ValidatorFunction>();\r\n  formats = new Map<string, FormatFunction>();\r\n  keywords = new Map<string, ValidatorFunction>();\r\n\r\n  constructor() {\r\n    Object.keys(Types).forEach((type) => {\r\n      this.addType(type, Types[type]);\r\n    });\r\n\r\n    Object.keys(keywords).forEach((keyword) => {\r\n      this.addKeyword(keyword, keywords[keyword]);\r\n    });\r\n\r\n    Object.keys(Formats).forEach((format) => {\r\n      this.addFormat(format, Formats[format]);\r\n    });\r\n  }\r\n\r\n  addType(name: string, validator: ValidatorFunction) {\r\n    this.types.set(name, validator);\r\n  }\r\n\r\n  addFormat(name: string, validator: FormatFunction) {\r\n    this.formats.set(name, validator);\r\n  }\r\n\r\n  addKeyword(name: string, validator: ValidatorFunction) {\r\n    this.keywords.set(name, validator);\r\n  }\r\n\r\n  compile(schema: any): Validator {\r\n    const compiledSchema = this.compileSchema(schema, '#');\r\n\r\n    const validate: Validator = (data: any) => this.validate(compiledSchema, data);\r\n    validate.compiledSchema = compiledSchema;\r\n\r\n    return validate;\r\n  }\r\n\r\n  private compileSchema(schema: Partial<CompiledSchema> | any, pointer): CompiledSchema {\r\n    if (!isObject(schema)) {\r\n      if (schema === true) {\r\n        schema = {\r\n          anyOf: [{ type: 'string' }, { type: 'number' }, { type: 'boolean' }, { type: 'array' }, { type: 'object' }, { type: 'null' }],\r\n        };\r\n      } else if (schema === false) {\r\n        schema = {\r\n          oneOf: [],\r\n        };\r\n      } else {\r\n        schema = {\r\n          oneOf: [schema],\r\n        };\r\n      }\r\n    }\r\n\r\n    const compiledSchema: CompiledSchema = {};\r\n\r\n    if ('type' in schema) {\r\n      const types = Array.isArray(schema.type) ? schema.type : schema.type.split(',').map((t) => t.trim());\r\n\r\n      compiledSchema.types = types.map((type) => this.types.get(type)).filter((validator) => validator !== undefined);\r\n    }\r\n\r\n    for (let key in schema) {\r\n      if (key === 'type') {\r\n        continue;\r\n      }\r\n\r\n      if (this.keywords.has(key)) {\r\n        compiledSchema.validators = compiledSchema.validators || [];\r\n        compiledSchema.validators.push(this.keywords.get(key));\r\n      }\r\n\r\n      if (this.isSchemaLike(schema[key])) {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        continue;\r\n      }\r\n      if (Array.isArray(schema[key])) {\r\n        compiledSchema[key] = schema[key].map((subSchema, index) =>\r\n          this.isSchemaLike(subSchema) ? this.compileSchema(subSchema, `${pointer}/${key}/${index}`) : subSchema\r\n        );\r\n        continue;\r\n      }\r\n\r\n      if (isObject(schema[key])) {\r\n        compiledSchema[key] = this.compileSchema(schema[key], `${pointer}/${key}`);\r\n        continue;\r\n      }\r\n\r\n      compiledSchema[key] = schema[key];\r\n    }\r\n\r\n    return compiledSchema;\r\n  }\r\n\r\n  validate(schema: CompiledSchema, data: any): Result {\r\n    let errors: ValidationError[] = [];\r\n\r\n    if (schema.types) {\r\n      for (let type of schema.types) {\r\n        const result = type(schema, data, schema.pointer, this);\r\n\r\n        if (result.valid) {\r\n          errors = [];\r\n          break;\r\n        }\r\n\r\n        errors.push(...result.errors);\r\n      }\r\n    }\r\n\r\n    if (schema.validators) {\r\n      for (let validator of schema.validators) {\r\n        const result = validator(schema, data, schema.pointer, this);\r\n\r\n        if (!result.valid) {\r\n          return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      data,\r\n    };\r\n  }\r\n\r\n  private isSchemaOrKeywordPresent(subSchema: any): boolean {\r\n    if ('type' in subSchema) {\r\n      return true;\r\n    }\r\n\r\n    for (let subKey in subSchema) {\r\n      if (this.keywords.has(subKey)) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  isSchemaLike(subSchema: any): boolean {\r\n    return isObject(subSchema) && this.isSchemaOrKeywordPresent(subSchema);\r\n  }\r\n\r\n  isCompiledSchema(subSchema: any): boolean {\r\n    return isObject(subSchema) && ('validators' in subSchema || 'types' in subSchema);\r\n  }\r\n}\r\n"],"mappings":"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"}